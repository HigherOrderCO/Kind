module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var bitsmap_new = {
        _: 'BitsMap.new'
    };
    var bitsmap_tie = function(val, lft, rgt) {
        return {
            _: 'BitsMap.tip',
            val,
            lft,
            rgt
        };
    }
    var maybe_none = {
        _: 'Maybe.none'
    };
    var maybe_some = function(value) {
        return {
            _: 'Maybe.some',
            value
        };
    }
    var bitsmap_get = function(bits, map) {
        for (var i = bits.length - 1; i >= 0; --i) {
            if (map._ !== 'BitsMap.new') {
                map = bits[i] === '0' ? map.lft : map.rgt;
            }
        }
        return map._ === 'BitsMap.new' ? maybe_none : map.val;
    }
    var bitsmap_set = function(bits, val, map, mode) {
        var res = {
            value: map
        };
        var key = 'value';
        var obj = res;
        for (var i = bits.length - 1; i >= 0; --i) {
            var map = obj[key];
            if (map._ === 'BitsMap.new') {
                obj[key] = {
                    _: 'BitsMap.tie',
                    val: maybe_none,
                    lft: bitsmap_new,
                    rgt: bitsmap_new
                };
            } else {
                obj[key] = {
                    _: 'BitsMap.tie',
                    val: map.val,
                    lft: map.lft,
                    rgt: map.rgt
                };
            }
            obj = obj[key];
            key = bits[i] === '0' ? 'lft' : 'rgt';
        }
        var map = obj[key];
        if (map._ === 'BitsMap.new') {
            var x = mode === 'del' ? maybe_none : {
                _: 'Maybe.some',
                value: val
            };
            obj[key] = {
                _: 'BitsMap.tie',
                val: x,
                lft: bitsmap_new,
                rgt: bitsmap_new
            };
        } else {
            var x = mode === 'set' ? {
                _: 'Maybe.some',
                value: val
            } : mode === 'del' ? maybe_none : map.val;
            obj[key] = {
                _: 'BitsMap.tie',
                val: x,
                lft: map.lft,
                rgt: map.rgt
            };
        }
        return res.value;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(null);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c0;
                return $2;
            } else {
                var $3 = c1;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c0;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c1($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c0;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c1($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var get_file_mtime = (lib, param) => {
        return String(lib.fs.statSync(param).mtime.getTime());
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'put_string':
                            process.stdout.write(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_time':
                            run_io(lib, p.then(String(Date.now()))).then(res).catch(err);
                            break;
                        case 'get_line':
                            lib.rl.question(p.param, (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(get_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'set_file':
                            try {
                                run_io(lib, p.then(set_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'del_file':
                            try {
                                run_io(lib, p.then(del_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_dir':
                            try {
                                run_io(lib, p.then(get_dir(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_file_mtime':
                            try {
                                run_io(lib, p.then(get_file_mtime(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });
    const BitsMap$get = a0 => a1 => (bitsmap_get(a0, a1));
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $38 = Bool$true;
                var $37 = $38;
                break;
            case 'Cmp.gtn':
                var $39 = Bool$false;
                var $37 = $39;
                break;
        };
        return $37;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $41 = self.pred;
                var $42 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $44 = self.pred;
                            var $45 = (_a$pred$10 => {
                                var $46 = Word$cmp$go$(_a$pred$10, $44, _c$4);
                                return $46;
                            });
                            var $43 = $45;
                            break;
                        case 'Word.i':
                            var $47 = self.pred;
                            var $48 = (_a$pred$10 => {
                                var $49 = Word$cmp$go$(_a$pred$10, $47, Cmp$ltn);
                                return $49;
                            });
                            var $43 = $48;
                            break;
                        case 'Word.e':
                            var $50 = (_a$pred$8 => {
                                var $51 = _c$4;
                                return $51;
                            });
                            var $43 = $50;
                            break;
                    };
                    var $43 = $43($41);
                    return $43;
                });
                var $40 = $42;
                break;
            case 'Word.i':
                var $52 = self.pred;
                var $53 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $55 = self.pred;
                            var $56 = (_a$pred$10 => {
                                var $57 = Word$cmp$go$(_a$pred$10, $55, Cmp$gtn);
                                return $57;
                            });
                            var $54 = $56;
                            break;
                        case 'Word.i':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $54 = $59;
                            break;
                        case 'Word.e':
                            var $61 = (_a$pred$8 => {
                                var $62 = _c$4;
                                return $62;
                            });
                            var $54 = $61;
                            break;
                    };
                    var $54 = $54($52);
                    return $54;
                });
                var $40 = $53;
                break;
            case 'Word.e':
                var $63 = (_b$5 => {
                    var $64 = _c$4;
                    return $64;
                });
                var $40 = $63;
                break;
        };
        var $40 = $40(_b$3);
        return $40;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $65 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $65;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $66 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $66;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $67 = 1n + _pred$1;
        return $67;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $68 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $68;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $69 = word_to_u16(_value$1);
        return $69;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $70 = null;
        return $70;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $71 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $71;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $72 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $72;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $74 = self.pred;
                var $75 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $77 = self.pred;
                            var $78 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $80 = Word$i$(Word$subber$(_a$pred$10, $77, Bool$true));
                                    var $79 = $80;
                                } else {
                                    var $81 = Word$o$(Word$subber$(_a$pred$10, $77, Bool$false));
                                    var $79 = $81;
                                };
                                return $79;
                            });
                            var $76 = $78;
                            break;
                        case 'Word.i':
                            var $82 = self.pred;
                            var $83 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $85 = Word$o$(Word$subber$(_a$pred$10, $82, Bool$true));
                                    var $84 = $85;
                                } else {
                                    var $86 = Word$i$(Word$subber$(_a$pred$10, $82, Bool$true));
                                    var $84 = $86;
                                };
                                return $84;
                            });
                            var $76 = $83;
                            break;
                        case 'Word.e':
                            var $87 = (_a$pred$8 => {
                                var $88 = Word$e;
                                return $88;
                            });
                            var $76 = $87;
                            break;
                    };
                    var $76 = $76($74);
                    return $76;
                });
                var $73 = $75;
                break;
            case 'Word.i':
                var $89 = self.pred;
                var $90 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $92 = self.pred;
                            var $93 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $95 = Word$o$(Word$subber$(_a$pred$10, $92, Bool$false));
                                    var $94 = $95;
                                } else {
                                    var $96 = Word$i$(Word$subber$(_a$pred$10, $92, Bool$false));
                                    var $94 = $96;
                                };
                                return $94;
                            });
                            var $91 = $93;
                            break;
                        case 'Word.i':
                            var $97 = self.pred;
                            var $98 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $100 = Word$i$(Word$subber$(_a$pred$10, $97, Bool$true));
                                    var $99 = $100;
                                } else {
                                    var $101 = Word$o$(Word$subber$(_a$pred$10, $97, Bool$false));
                                    var $99 = $101;
                                };
                                return $99;
                            });
                            var $91 = $98;
                            break;
                        case 'Word.e':
                            var $102 = (_a$pred$8 => {
                                var $103 = Word$e;
                                return $103;
                            });
                            var $91 = $102;
                            break;
                    };
                    var $91 = $91($89);
                    return $91;
                });
                var $73 = $90;
                break;
            case 'Word.e':
                var $104 = (_b$5 => {
                    var $105 = Word$e;
                    return $105;
                });
                var $73 = $104;
                break;
        };
        var $73 = $73(_b$3);
        return $73;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $106 = Word$subber$(_a$2, _b$3, Bool$false);
        return $106;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => ((a0 - a1) & 0xFFFF);

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $107 = _x$4;
                    return $107;
                } else {
                    var $108 = (self - 1n);
                    var $109 = Nat$apply$($108, _f$3, _f$3(_x$4));
                    return $109;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $111 = self.pred;
                var $112 = Word$i$($111);
                var $110 = $112;
                break;
            case 'Word.i':
                var $113 = self.pred;
                var $114 = Word$o$(Word$inc$($113));
                var $110 = $114;
                break;
            case 'Word.e':
                var $115 = Word$e;
                var $110 = $115;
                break;
        };
        return $110;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $117 = Word$e;
            var $116 = $117;
        } else {
            var $118 = (self - 1n);
            var $119 = Word$o$(Word$zero$($118));
            var $116 = $119;
        };
        return $116;
    };
    const Word$zero = x0 => Word$zero$(x0);

    function Nat$to_word$(_size$1, _n$2) {
        var $120 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));
        return $120;
    };
    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);
    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $122 = self.pred;
                var $123 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $125 = self.pred;
                            var $126 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $128 = Word$i$(Word$adder$(_a$pred$10, $125, Bool$false));
                                    var $127 = $128;
                                } else {
                                    var $129 = Word$o$(Word$adder$(_a$pred$10, $125, Bool$false));
                                    var $127 = $129;
                                };
                                return $127;
                            });
                            var $124 = $126;
                            break;
                        case 'Word.i':
                            var $130 = self.pred;
                            var $131 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $133 = Word$o$(Word$adder$(_a$pred$10, $130, Bool$true));
                                    var $132 = $133;
                                } else {
                                    var $134 = Word$i$(Word$adder$(_a$pred$10, $130, Bool$false));
                                    var $132 = $134;
                                };
                                return $132;
                            });
                            var $124 = $131;
                            break;
                        case 'Word.e':
                            var $135 = (_a$pred$8 => {
                                var $136 = Word$e;
                                return $136;
                            });
                            var $124 = $135;
                            break;
                    };
                    var $124 = $124($122);
                    return $124;
                });
                var $121 = $123;
                break;
            case 'Word.i':
                var $137 = self.pred;
                var $138 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $140 = self.pred;
                            var $141 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $143 = Word$o$(Word$adder$(_a$pred$10, $140, Bool$true));
                                    var $142 = $143;
                                } else {
                                    var $144 = Word$i$(Word$adder$(_a$pred$10, $140, Bool$false));
                                    var $142 = $144;
                                };
                                return $142;
                            });
                            var $139 = $141;
                            break;
                        case 'Word.i':
                            var $145 = self.pred;
                            var $146 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $148 = Word$i$(Word$adder$(_a$pred$10, $145, Bool$true));
                                    var $147 = $148;
                                } else {
                                    var $149 = Word$o$(Word$adder$(_a$pred$10, $145, Bool$true));
                                    var $147 = $149;
                                };
                                return $147;
                            });
                            var $139 = $146;
                            break;
                        case 'Word.e':
                            var $150 = (_a$pred$8 => {
                                var $151 = Word$e;
                                return $151;
                            });
                            var $139 = $150;
                            break;
                    };
                    var $139 = $139($137);
                    return $139;
                });
                var $121 = $138;
                break;
            case 'Word.e':
                var $152 = (_b$5 => {
                    var $153 = Word$e;
                    return $153;
                });
                var $121 = $152;
                break;
        };
        var $121 = $121(_b$3);
        return $121;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $154 = Word$adder$(_a$2, _b$3, Bool$false);
        return $154;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $156 = Bool$false;
                var $155 = $156;
                break;
            case 'Cmp.eql':
                var $157 = Bool$true;
                var $155 = $157;
                break;
        };
        return $155;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $158 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $158;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $160 = self.pred;
                var $161 = (Word$to_bits$($160) + '0');
                var $159 = $161;
                break;
            case 'Word.i':
                var $162 = self.pred;
                var $163 = (Word$to_bits$($162) + '1');
                var $159 = $163;
                break;
            case 'Word.e':
                var $164 = Bits$e;
                var $159 = $164;
                break;
        };
        return $159;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $166 = Word$e;
            var $165 = $166;
        } else {
            var $167 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.o':
                    var $169 = self.pred;
                    var $170 = Word$o$(Word$trim$($167, $169));
                    var $168 = $170;
                    break;
                case 'Word.i':
                    var $171 = self.pred;
                    var $172 = Word$i$(Word$trim$($167, $171));
                    var $168 = $172;
                    break;
                case 'Word.e':
                    var $173 = Word$o$(Word$trim$($167, Word$e));
                    var $168 = $173;
                    break;
            };
            var $165 = $168;
        };
        return $165;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $174 = self.slice(0, -1);
                        var $175 = Bits$reverse$tco$($174, (_r$2 + '0'));
                        return $175;
                    case 'i':
                        var $176 = self.slice(0, -1);
                        var $177 = Bits$reverse$tco$($176, (_r$2 + '1'));
                        return $177;
                    case 'e':
                        var $178 = _r$2;
                        return $178;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $179 = Bits$reverse$tco$(_a$1, Bits$e);
        return $179;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $180 = (bitsmap_get((kind_name_to_bits(_name$2)), _map$3));
        return $180;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function Parser$Reply$(_V$1) {
        var $181 = null;
        return $181;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function List$(_A$1) {
        var $182 = null;
        return $182;
    };
    const List = x0 => List$(x0);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $183 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $183;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $184 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $184;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);
    const List$nil = ({
        _: 'List.nil'
    });

    function List$cons$(_head$2, _tail$3) {
        var $185 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $185;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $186 = self.idx;
                        var $187 = self.code;
                        var $188 = self.val;
                        var $189 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $190 = _values$3(List$cons$($188, _xs$9));
                            return $190;
                        }), $186, $187);
                        return $189;
                    case 'Parser.Reply.error':
                        var $191 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $191;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $192 = Parser$many$go(_parser$2)((_x$3 => {
            var $193 = _x$3;
            return $193;
        }));
        return $192;
    };
    const Parser$many = x0 => Parser$many$(x0);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $195 = self.idx;
                var $196 = self.code;
                var $197 = self.err;
                var $198 = Parser$Reply$error$($195, $196, $197);
                var $194 = $198;
                break;
            case 'Parser.Reply.value':
                var $199 = self.idx;
                var $200 = self.code;
                var $201 = self.val;
                var self = Parser$many$(_parser$2)($199)($200);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $203 = self.idx;
                        var $204 = self.code;
                        var $205 = self.err;
                        var $206 = Parser$Reply$error$($203, $204, $205);
                        var $202 = $206;
                        break;
                    case 'Parser.Reply.value':
                        var $207 = self.idx;
                        var $208 = self.code;
                        var $209 = self.val;
                        var $210 = Parser$Reply$value$($207, $208, List$cons$($201, $209));
                        var $202 = $210;
                        break;
                };
                var $194 = $202;
                break;
        };
        return $194;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $212 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $211 = $212;
        } else {
            var $213 = self.charCodeAt(0);
            var $214 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($213 === 48);
            if (self) {
                var $216 = Parser$Reply$value$(_sidx$5, $214, 0n);
                var $215 = $216;
            } else {
                var self = ($213 === 49);
                if (self) {
                    var $218 = Parser$Reply$value$(_sidx$5, $214, 1n);
                    var $217 = $218;
                } else {
                    var self = ($213 === 50);
                    if (self) {
                        var $220 = Parser$Reply$value$(_sidx$5, $214, 2n);
                        var $219 = $220;
                    } else {
                        var self = ($213 === 51);
                        if (self) {
                            var $222 = Parser$Reply$value$(_sidx$5, $214, 3n);
                            var $221 = $222;
                        } else {
                            var self = ($213 === 52);
                            if (self) {
                                var $224 = Parser$Reply$value$(_sidx$5, $214, 4n);
                                var $223 = $224;
                            } else {
                                var self = ($213 === 53);
                                if (self) {
                                    var $226 = Parser$Reply$value$(_sidx$5, $214, 5n);
                                    var $225 = $226;
                                } else {
                                    var self = ($213 === 54);
                                    if (self) {
                                        var $228 = Parser$Reply$value$(_sidx$5, $214, 6n);
                                        var $227 = $228;
                                    } else {
                                        var self = ($213 === 55);
                                        if (self) {
                                            var $230 = Parser$Reply$value$(_sidx$5, $214, 7n);
                                            var $229 = $230;
                                        } else {
                                            var self = ($213 === 56);
                                            if (self) {
                                                var $232 = Parser$Reply$value$(_sidx$5, $214, 8n);
                                                var $231 = $232;
                                            } else {
                                                var self = ($213 === 57);
                                                if (self) {
                                                    var $234 = Parser$Reply$value$(_sidx$5, $214, 9n);
                                                    var $233 = $234;
                                                } else {
                                                    var $235 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $233 = $235;
                                                };
                                                var $231 = $233;
                                            };
                                            var $229 = $231;
                                        };
                                        var $227 = $229;
                                    };
                                    var $225 = $227;
                                };
                                var $223 = $225;
                            };
                            var $221 = $223;
                        };
                        var $219 = $221;
                    };
                    var $217 = $219;
                };
                var $215 = $217;
            };
            var $211 = $215;
        };
        return $211;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $236 = self.head;
                        var $237 = self.tail;
                        var $238 = Nat$from_base$go$(_b$1, $237, (_b$1 * _p$3), (($236 * _p$3) + _res$4));
                        return $238;
                    case 'List.nil':
                        var $239 = _res$4;
                        return $239;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $240 = self.head;
                        var $241 = self.tail;
                        var $242 = List$reverse$go$($241, List$cons$($240, _res$3));
                        return $242;
                    case 'List.nil':
                        var $243 = _res$3;
                        return $243;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $244 = List$reverse$go$(_xs$2, List$nil);
        return $244;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $245 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $245;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $247 = self.idx;
                var $248 = self.code;
                var $249 = self.err;
                var $250 = Parser$Reply$error$($247, $248, $249);
                var $246 = $250;
                break;
            case 'Parser.Reply.value':
                var $251 = self.idx;
                var $252 = self.code;
                var $253 = self.val;
                var $254 = Parser$Reply$value$($251, $252, Nat$from_base$(10n, $253));
                var $246 = $254;
                break;
        };
        return $246;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Nat$read$(_str$1) {
        var _p$2 = Parser$nat$(0n, _str$1);
        var self = _p$2;
        switch (self._) {
            case 'Parser.Reply.value':
                var $256 = self.val;
                var $257 = $256;
                var $255 = $257;
                break;
            case 'Parser.Reply.error':
                var $258 = 0n;
                var $255 = $258;
                break;
        };
        return $255;
    };
    const Nat$read = x0 => Nat$read$(x0);
    const IO$get_time = IO$ask$("get_time", "", (_time$1 => {
        var $259 = IO$end$(Nat$read$(_time$1));
        return $259;
    }));

    function Maybe$some$(_value$2) {
        var $260 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $260;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function IO$get_file$(_name$1) {
        var $261 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $262 = IO$end$(_file$2);
            return $262;
        }));
        return $261;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function String$cons$(_head$1, _tail$2) {
        var $263 = (String.fromCharCode(_head$1) + _tail$2);
        return $263;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);
    const Bool$not = a0 => (!a0);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $265 = Bool$true;
            var $264 = $265;
        } else {
            var $266 = self.charCodeAt(0);
            var $267 = self.slice(1);
            var $268 = Bool$false;
            var $264 = $268;
        };
        return $264;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function IO$get_file_mtime$(_name$1) {
        var $269 = IO$ask$("get_file_mtime", _name$1, (_file$2 => {
            var $270 = IO$end$(_file$2);
            return $270;
        }));
        return $269;
    };
    const IO$get_file_mtime = x0 => IO$get_file_mtime$(x0);
    const String$eql = a0 => a1 => (a0 === a1);

    function Pair$new$(_fst$3, _snd$4) {
        var $271 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $271;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $273 = self.value;
                var $274 = _f$4($273);
                var $272 = $274;
                break;
            case 'Maybe.none':
                var $275 = Maybe$none;
                var $272 = $275;
                break;
        };
        return $272;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $276 = _new$2(Maybe$bind)(Maybe$some);
        return $276;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Pair$(_A$1, _B$2) {
        var $277 = null;
        return $277;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);
    const Unit$new = null;
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Core$read$spaces$(_code$1) {
        var Kind$Core$read$spaces$ = (_code$1) => ({
            ctr: 'TCO',
            arg: [_code$1]
        });
        var Kind$Core$read$spaces = _code$1 => Kind$Core$read$spaces$(_code$1);
        var arg = [_code$1];
        while (true) {
            let [_code$1] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $278 = Pair$new$(_code$1, Unit$new);
                    return $278;
                } else {
                    var $279 = self.charCodeAt(0);
                    var $280 = self.slice(1);
                    var _is_space$4 = (($279 === 32) || (($279 === 10) || (($279 === 13) || (($279 === 9) || (($279 === 11) || (($279 === 12) || Bool$false))))));
                    var self = _is_space$4;
                    if (self) {
                        var $282 = Kind$Core$read$spaces$($280);
                        var $281 = $282;
                    } else {
                        var $283 = Pair$new$(_code$1, Unit$new);
                        var $281 = $283;
                    };
                    return $281;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$spaces = x0 => Kind$Core$read$spaces$(x0);

    function Kind$Term$ref$(_name$1) {
        var $284 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $284;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Char$eql$(_a$1, _b$2) {
        var $285 = (_a$1 === _b$2);
        return $285;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Cmp$as_gte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $287 = Bool$false;
                var $286 = $287;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $288 = Bool$true;
                var $286 = $288;
                break;
        };
        return $286;
    };
    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);

    function Word$gte$(_a$2, _b$3) {
        var $289 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));
        return $289;
    };
    const Word$gte = x0 => x1 => Word$gte$(x0, x1);
    const U16$gte = a0 => a1 => (a0 >= a1);

    function Cmp$as_ltn$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $291 = Bool$true;
                var $290 = $291;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $292 = Bool$false;
                var $290 = $292;
                break;
        };
        return $290;
    };
    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);

    function Word$ltn$(_a$2, _b$3) {
        var $293 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));
        return $293;
    };
    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);
    const U16$ltn = a0 => a1 => (a0 < a1);

    function Kind$Core$read$is_name$(_chr$1) {
        var $294 = (((_chr$1 >= 46) && (_chr$1 <= 47)) || (((_chr$1 >= 48) && (_chr$1 < 58)) || (((_chr$1 >= 65) && (_chr$1 < 91)) || (((_chr$1 >= 95) && (_chr$1 < 96)) || (((_chr$1 >= 97) && (_chr$1 < 123)) || Bool$false)))));
        return $294;
    };
    const Kind$Core$read$is_name = x0 => Kind$Core$read$is_name$(x0);

    function Kind$Core$read$name$(_code$1) {
        var self = _code$1;
        if (self.length === 0) {
            var $296 = Pair$new$(_code$1, "");
            var $295 = $296;
        } else {
            var $297 = self.charCodeAt(0);
            var $298 = self.slice(1);
            var self = Kind$Core$read$is_name$($297);
            if (self) {
                var self = Kind$Core$read$name$($298);
                switch (self._) {
                    case 'Pair.new':
                        var $301 = self.fst;
                        var $302 = self.snd;
                        var $303 = Pair$new$($301, String$cons$($297, $302));
                        var $300 = $303;
                        break;
                };
                var $299 = $300;
            } else {
                var $304 = Pair$new$(_code$1, "");
                var $299 = $304;
            };
            var $295 = $299;
        };
        return $295;
    };
    const Kind$Core$read$name = x0 => Kind$Core$read$name$(x0);

    function Kind$Core$read$char$(_code$1, _chr$2) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $306 = self.fst;
                var self = $306;
                if (self.length === 0) {
                    var $308 = Pair$new$("", Unit$new);
                    var $307 = $308;
                } else {
                    var $309 = self.charCodeAt(0);
                    var $310 = self.slice(1);
                    var self = ($309 === _chr$2);
                    if (self) {
                        var $312 = Pair$new$($310, Unit$new);
                        var $311 = $312;
                    } else {
                        var $313 = Pair$new$("", Unit$new);
                        var $311 = $313;
                    };
                    var $307 = $311;
                };
                var $305 = $307;
                break;
        };
        return $305;
    };
    const Kind$Core$read$char = x0 => x1 => Kind$Core$read$char$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $314 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $314;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $315 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $315;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $316 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $316;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $317 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $317;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $318 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $318;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $319 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $319;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $320 = Bool$true;
                    return $320;
                } else {
                    var $321 = self.charCodeAt(0);
                    var $322 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $324 = Bool$false;
                        var $323 = $324;
                    } else {
                        var $325 = self.charCodeAt(0);
                        var $326 = self.slice(1);
                        var self = Char$eql$($321, $325);
                        if (self) {
                            var $328 = String$starts_with$($326, $322);
                            var $327 = $328;
                        } else {
                            var $329 = Bool$false;
                            var $327 = $329;
                        };
                        var $323 = $327;
                    };
                    return $323;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);
    const String$nil = '';

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $330 = _xs$2;
                    return $330;
                } else {
                    var $331 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $333 = String$nil;
                        var $332 = $333;
                    } else {
                        var $334 = self.charCodeAt(0);
                        var $335 = self.slice(1);
                        var $336 = String$drop$($331, $335);
                        var $332 = $336;
                    };
                    return $332;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function Char$is_hex$(_chr$1) {
        var $337 = (((_chr$1 >= 48) && (_chr$1 <= 57)) || (((_chr$1 >= 97) && (_chr$1 <= 102)) || (((_chr$1 >= 65) && (_chr$1 <= 70)) || Bool$false)));
        return $337;
    };
    const Char$is_hex = x0 => Char$is_hex$(x0);

    function Word$shift_left1$aux$(_word$2, _prev$3) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $339 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $341 = Word$i$(Word$shift_left1$aux$($339, Bool$false));
                    var $340 = $341;
                } else {
                    var $342 = Word$o$(Word$shift_left1$aux$($339, Bool$false));
                    var $340 = $342;
                };
                var $338 = $340;
                break;
            case 'Word.i':
                var $343 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $345 = Word$i$(Word$shift_left1$aux$($343, Bool$true));
                    var $344 = $345;
                } else {
                    var $346 = Word$o$(Word$shift_left1$aux$($343, Bool$true));
                    var $344 = $346;
                };
                var $338 = $344;
                break;
            case 'Word.e':
                var $347 = Word$e;
                var $338 = $347;
                break;
        };
        return $338;
    };
    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);

    function Word$shift_left1$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $349 = self.pred;
                var $350 = Word$o$(Word$shift_left1$aux$($349, Bool$false));
                var $348 = $350;
                break;
            case 'Word.i':
                var $351 = self.pred;
                var $352 = Word$o$(Word$shift_left1$aux$($351, Bool$true));
                var $348 = $352;
                break;
            case 'Word.e':
                var $353 = Word$e;
                var $348 = $353;
                break;
        };
        return $348;
    };
    const Word$shift_left1 = x0 => Word$shift_left1$(x0);

    function Word$mul$go$(_a$3, _b$4, _acc$5) {
        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({
            ctr: 'TCO',
            arg: [_a$3, _b$4, _acc$5]
        });
        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);
        var arg = [_a$3, _b$4, _acc$5];
        while (true) {
            let [_a$3, _b$4, _acc$5] = arg;
            var R = (() => {
                var self = _a$3;
                switch (self._) {
                    case 'Word.o':
                        var $354 = self.pred;
                        var $355 = Word$mul$go$($354, Word$shift_left1$(_b$4), _acc$5);
                        return $355;
                    case 'Word.i':
                        var $356 = self.pred;
                        var $357 = Word$mul$go$($356, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));
                        return $357;
                    case 'Word.e':
                        var $358 = _acc$5;
                        return $358;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);

    function Word$to_zero$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $360 = self.pred;
                var $361 = Word$o$(Word$to_zero$($360));
                var $359 = $361;
                break;
            case 'Word.i':
                var $362 = self.pred;
                var $363 = Word$o$(Word$to_zero$($362));
                var $359 = $363;
                break;
            case 'Word.e':
                var $364 = Word$e;
                var $359 = $364;
                break;
        };
        return $359;
    };
    const Word$to_zero = x0 => Word$to_zero$(x0);

    function Word$mul$(_a$2, _b$3) {
        var $365 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));
        return $365;
    };
    const Word$mul = x0 => x1 => Word$mul$(x0, x1);
    const U16$mul = a0 => a1 => ((a0 * a1) & 0xFFFF);
    const U16$inc = a0 => ((a0 + 1) & 0xFFFF);
    const U16$zero = U16$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))));

    function Char$hex_value16$(_chr$1) {
        var self = ((_chr$1 >= 48) && (_chr$1 <= 57));
        if (self) {
            var $367 = ((_chr$1 - 48) & 0xFFFF);
            var $366 = $367;
        } else {
            var self = ((_chr$1 >= 97) && (_chr$1 <= 102));
            if (self) {
                var $369 = (_x0$2 => {
                    var $370 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                    return $370;
                })(((_chr$1 - 97) & 0xFFFF));
                var $368 = $369;
            } else {
                var self = ((_chr$1 >= 65) && (_chr$1 <= 70));
                if (self) {
                    var $372 = (_x0$2 => {
                        var $373 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                        return $373;
                    })(((_chr$1 - 65) & 0xFFFF));
                    var $371 = $372;
                } else {
                    var $374 = U16$zero;
                    var $371 = $374;
                };
                var $368 = $371;
            };
            var $366 = $368;
        };
        return $366;
    };
    const Char$hex_value16 = x0 => Char$hex_value16$(x0);

    function Kind$Core$read$u16$(_code$1, _u16$2) {
        var Kind$Core$read$u16$ = (_code$1, _u16$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _u16$2]
        });
        var Kind$Core$read$u16 = _code$1 => _u16$2 => Kind$Core$read$u16$(_code$1, _u16$2);
        var arg = [_code$1, _u16$2];
        while (true) {
            let [_code$1, _u16$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $375 = Pair$new$(_code$1, _u16$2);
                    return $375;
                } else {
                    var $376 = self.charCodeAt(0);
                    var $377 = self.slice(1);
                    var self = Char$is_hex$($376);
                    if (self) {
                        var _u16$5 = ((((_u16$2 * 16) & 0xFFFF) + Char$hex_value16$($376)) & 0xFFFF);
                        var $379 = Kind$Core$read$u16$($377, _u16$5);
                        var $378 = $379;
                    } else {
                        var $380 = Pair$new$(_code$1, _u16$2);
                        var $378 = $380;
                    };
                    return $378;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$u16 = x0 => x1 => Kind$Core$read$u16$(x0, x1);

    function Kind$Core$read$chrx$(_code$1) {
        var self = String$starts_with$(_code$1, "\\u{");
        if (self) {
            var _code$2 = String$drop$(3n, _code$1);
            var self = Kind$Core$read$u16$(_code$2, 0);
            switch (self._) {
                case 'Pair.new':
                    var $383 = self.fst;
                    var $384 = self.snd;
                    var self = String$starts_with$($383, "}");
                    if (self) {
                        var $386 = Pair$new$(String$drop$(1n, $383), $384);
                        var $385 = $386;
                    } else {
                        var $387 = Pair$new$("", 63);
                        var $385 = $387;
                    };
                    var $382 = $385;
                    break;
            };
            var $381 = $382;
        } else {
            var self = String$starts_with$(_code$1, "\\\'");
            if (self) {
                var $389 = Pair$new$(String$drop$(2n, _code$1), 39);
                var $388 = $389;
            } else {
                var self = String$starts_with$(_code$1, "\\\"");
                if (self) {
                    var $391 = Pair$new$(String$drop$(2n, _code$1), 34);
                    var $390 = $391;
                } else {
                    var self = String$starts_with$(_code$1, "\\\\");
                    if (self) {
                        var $393 = Pair$new$(String$drop$(2n, _code$1), 92);
                        var $392 = $393;
                    } else {
                        var self = _code$1;
                        if (self.length === 0) {
                            var $395 = Pair$new$("", 63);
                            var $394 = $395;
                        } else {
                            var $396 = self.charCodeAt(0);
                            var $397 = self.slice(1);
                            var $398 = Pair$new$($397, $396);
                            var $394 = $398;
                        };
                        var $392 = $394;
                    };
                    var $390 = $392;
                };
                var $388 = $390;
            };
            var $381 = $388;
        };
        return $381;
    };
    const Kind$Core$read$chrx = x0 => Kind$Core$read$chrx$(x0);

    function Kind$Term$chr$(_chrx$1) {
        var $399 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $399;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Core$read$strx$(_code$1) {
        var self = String$starts_with$(_code$1, "\"");
        if (self) {
            var $401 = Pair$new$(_code$1, "");
            var $400 = $401;
        } else {
            var self = Kind$Core$read$chrx$(_code$1);
            switch (self._) {
                case 'Pair.new':
                    var $403 = self.fst;
                    var $404 = self.snd;
                    var self = Kind$Core$read$strx$($403);
                    switch (self._) {
                        case 'Pair.new':
                            var $406 = self.fst;
                            var $407 = self.snd;
                            var $408 = Pair$new$($406, String$cons$($404, $407));
                            var $405 = $408;
                            break;
                    };
                    var $402 = $405;
                    break;
            };
            var $400 = $402;
        };
        return $400;
    };
    const Kind$Core$read$strx = x0 => Kind$Core$read$strx$(x0);

    function Kind$Term$str$(_strx$1) {
        var $409 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $409;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Char$dec_value$(_chr$1) {
        var self = (_chr$1 === 48);
        if (self) {
            var $411 = 0n;
            var $410 = $411;
        } else {
            var self = (_chr$1 === 49);
            if (self) {
                var $413 = 1n;
                var $412 = $413;
            } else {
                var self = (_chr$1 === 50);
                if (self) {
                    var $415 = 2n;
                    var $414 = $415;
                } else {
                    var self = (_chr$1 === 51);
                    if (self) {
                        var $417 = 3n;
                        var $416 = $417;
                    } else {
                        var self = (_chr$1 === 52);
                        if (self) {
                            var $419 = 4n;
                            var $418 = $419;
                        } else {
                            var self = (_chr$1 === 53);
                            if (self) {
                                var $421 = 5n;
                                var $420 = $421;
                            } else {
                                var self = (_chr$1 === 54);
                                if (self) {
                                    var $423 = 6n;
                                    var $422 = $423;
                                } else {
                                    var self = (_chr$1 === 55);
                                    if (self) {
                                        var $425 = 7n;
                                        var $424 = $425;
                                    } else {
                                        var self = (_chr$1 === 56);
                                        if (self) {
                                            var $427 = 8n;
                                            var $426 = $427;
                                        } else {
                                            var self = (_chr$1 === 57);
                                            if (self) {
                                                var $429 = 9n;
                                                var $428 = $429;
                                            } else {
                                                var $430 = 0n;
                                                var $428 = $430;
                                            };
                                            var $426 = $428;
                                        };
                                        var $424 = $426;
                                    };
                                    var $422 = $424;
                                };
                                var $420 = $422;
                            };
                            var $418 = $420;
                        };
                        var $416 = $418;
                    };
                    var $414 = $416;
                };
                var $412 = $414;
            };
            var $410 = $412;
        };
        return $410;
    };
    const Char$dec_value = x0 => Char$dec_value$(x0);

    function Kind$Core$read$natx$(_code$1, _nat$2) {
        var Kind$Core$read$natx$ = (_code$1, _nat$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _nat$2]
        });
        var Kind$Core$read$natx = _code$1 => _nat$2 => Kind$Core$read$natx$(_code$1, _nat$2);
        var arg = [_code$1, _nat$2];
        while (true) {
            let [_code$1, _nat$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $431 = Pair$new$(_code$1, _nat$2);
                    return $431;
                } else {
                    var $432 = self.charCodeAt(0);
                    var $433 = self.slice(1);
                    var self = Char$is_hex$($432);
                    if (self) {
                        var _nat$5 = ((_nat$2 * 10n) + Char$dec_value$($432));
                        var $435 = Kind$Core$read$natx$($433, _nat$5);
                        var $434 = $435;
                    } else {
                        var $436 = Pair$new$(_code$1, _nat$2);
                        var $434 = $436;
                    };
                    return $434;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$natx = x0 => x1 => Kind$Core$read$natx$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $437 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $437;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $439 = self.fst;
                var $440 = $439;
                var $438 = $440;
                break;
        };
        return $438;
    };
    const Pair$fst = x0 => Pair$fst$(x0);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $442 = Nat$zero;
            var $441 = $442;
        } else {
            var $443 = (self - 1n);
            var $444 = $443;
            var $441 = $444;
        };
        return $441;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5) {
        var Kind$Core$read$find$ = (_list$2, _cond$3, _indx$4, _skip$5) => ({
            ctr: 'TCO',
            arg: [_list$2, _cond$3, _indx$4, _skip$5]
        });
        var Kind$Core$read$find = _list$2 => _cond$3 => _indx$4 => _skip$5 => Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5);
        var arg = [_list$2, _cond$3, _indx$4, _skip$5];
        while (true) {
            let [_list$2, _cond$3, _indx$4, _skip$5] = arg;
            var R = (() => {
                var self = _list$2;
                switch (self._) {
                    case 'List.cons':
                        var $445 = self.head;
                        var $446 = self.tail;
                        var self = _cond$3($445)(_indx$4);
                        if (self) {
                            var self = (_skip$5 === 0n);
                            if (self) {
                                var $449 = Maybe$some$(Pair$new$($445, _indx$4));
                                var $448 = $449;
                            } else {
                                var $450 = Kind$Core$read$find$($446, _cond$3, Nat$succ$(_indx$4), Nat$pred$(_skip$5));
                                var $448 = $450;
                            };
                            var $447 = $448;
                        } else {
                            var $451 = Kind$Core$read$find$($446, _cond$3, Nat$succ$(_indx$4), _skip$5);
                            var $447 = $451;
                        };
                        return $447;
                    case 'List.nil':
                        var $452 = Maybe$none;
                        return $452;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$find = x0 => x1 => x2 => x3 => Kind$Core$read$find$(x0, x1, x2, x3);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $454 = self.snd;
                var $455 = $454;
                var $453 = $455;
                break;
        };
        return $453;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Kind$Core$read$term$(_code$1) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $457 = self.fst;
                var self = $457;
                if (self.length === 0) {
                    var $459 = Pair$new$("", (_ctx$4 => {
                        var $460 = Kind$Term$ref$("error");
                        return $460;
                    }));
                    var $458 = $459;
                } else {
                    var $461 = self.charCodeAt(0);
                    var $462 = self.slice(1);
                    var _head$6 = $461;
                    var _code$7 = $462;
                    var self = Char$eql$(_head$6, 42);
                    if (self) {
                        var $464 = Pair$new$(_code$7, (_ctx$8 => {
                            var $465 = Kind$Term$typ;
                            return $465;
                        }));
                        var $463 = $464;
                    } else {
                        var self = (_head$6 === 64);
                        if (self) {
                            var self = Kind$Core$read$name$(_code$7);
                            switch (self._) {
                                case 'Pair.new':
                                    var $468 = self.fst;
                                    var $469 = self.snd;
                                    var self = Kind$Core$read$char$($468, 40);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $471 = self.fst;
                                            var self = Kind$Core$read$name$($471);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $473 = self.fst;
                                                    var $474 = self.snd;
                                                    var self = Kind$Core$read$char$($473, 58);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $476 = self.fst;
                                                            var self = Kind$Core$read$term$($476);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $478 = self.fst;
                                                                    var $479 = self.snd;
                                                                    var self = Kind$Core$read$char$($478, 41);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $481 = self.fst;
                                                                            var self = Kind$Core$read$term$($481);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $483 = self.fst;
                                                                                    var $484 = self.snd;
                                                                                    var $485 = Pair$new$($483, (_ctx$22 => {
                                                                                        var $486 = Kind$Term$all$(Bool$false, $469, $474, $479(_ctx$22), (_s$23 => _x$24 => {
                                                                                            var $487 = $484(List$cons$(Pair$new$($474, _x$24), List$cons$(Pair$new$($469, _s$23), _ctx$22)));
                                                                                            return $487;
                                                                                        }));
                                                                                        return $486;
                                                                                    }));
                                                                                    var $482 = $485;
                                                                                    break;
                                                                            };
                                                                            var $480 = $482;
                                                                            break;
                                                                    };
                                                                    var $477 = $480;
                                                                    break;
                                                            };
                                                            var $475 = $477;
                                                            break;
                                                    };
                                                    var $472 = $475;
                                                    break;
                                            };
                                            var $470 = $472;
                                            break;
                                    };
                                    var $467 = $470;
                                    break;
                            };
                            var $466 = $467;
                        } else {
                            var self = (_head$6 === 37);
                            if (self) {
                                var self = Kind$Core$read$name$(_code$7);
                                switch (self._) {
                                    case 'Pair.new':
                                        var $490 = self.fst;
                                        var $491 = self.snd;
                                        var self = Kind$Core$read$char$($490, 40);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $493 = self.fst;
                                                var self = Kind$Core$read$name$($493);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $495 = self.fst;
                                                        var $496 = self.snd;
                                                        var self = Kind$Core$read$char$($495, 58);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $498 = self.fst;
                                                                var self = Kind$Core$read$term$($498);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $500 = self.fst;
                                                                        var $501 = self.snd;
                                                                        var self = Kind$Core$read$char$($500, 41);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $503 = self.fst;
                                                                                var self = Kind$Core$read$term$($503);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $505 = self.fst;
                                                                                        var $506 = self.snd;
                                                                                        var $507 = Pair$new$($505, (_ctx$22 => {
                                                                                            var $508 = Kind$Term$all$(Bool$true, $491, $496, $501(_ctx$22), (_s$23 => _x$24 => {
                                                                                                var $509 = $506(List$cons$(Pair$new$($496, _x$24), List$cons$(Pair$new$($491, _s$23), _ctx$22)));
                                                                                                return $509;
                                                                                            }));
                                                                                            return $508;
                                                                                        }));
                                                                                        var $504 = $507;
                                                                                        break;
                                                                                };
                                                                                var $502 = $504;
                                                                                break;
                                                                        };
                                                                        var $499 = $502;
                                                                        break;
                                                                };
                                                                var $497 = $499;
                                                                break;
                                                        };
                                                        var $494 = $497;
                                                        break;
                                                };
                                                var $492 = $494;
                                                break;
                                        };
                                        var $489 = $492;
                                        break;
                                };
                                var $488 = $489;
                            } else {
                                var self = (_head$6 === 35);
                                if (self) {
                                    var self = Kind$Core$read$name$(_code$7);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $512 = self.fst;
                                            var $513 = self.snd;
                                            var self = Kind$Core$read$term$($512);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $515 = self.fst;
                                                    var $516 = self.snd;
                                                    var $517 = Pair$new$($515, (_ctx$12 => {
                                                        var $518 = Kind$Term$lam$($513, (_x$13 => {
                                                            var $519 = $516(List$cons$(Pair$new$($513, _x$13), _ctx$12));
                                                            return $519;
                                                        }));
                                                        return $518;
                                                    }));
                                                    var $514 = $517;
                                                    break;
                                            };
                                            var $511 = $514;
                                            break;
                                    };
                                    var $510 = $511;
                                } else {
                                    var self = (_head$6 === 40);
                                    if (self) {
                                        var self = Kind$Core$read$term$(_code$7);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $522 = self.fst;
                                                var $523 = self.snd;
                                                var self = Kind$Core$read$term$($522);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $525 = self.fst;
                                                        var $526 = self.snd;
                                                        var self = Kind$Core$read$char$($525, 41);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $528 = self.fst;
                                                                var $529 = Pair$new$($528, (_ctx$14 => {
                                                                    var $530 = Kind$Term$app$($523(_ctx$14), $526(_ctx$14));
                                                                    return $530;
                                                                }));
                                                                var $527 = $529;
                                                                break;
                                                        };
                                                        var $524 = $527;
                                                        break;
                                                };
                                                var $521 = $524;
                                                break;
                                        };
                                        var $520 = $521;
                                    } else {
                                        var self = (_head$6 === 33);
                                        if (self) {
                                            var self = Kind$Core$read$name$(_code$7);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $533 = self.fst;
                                                    var $534 = self.snd;
                                                    var self = Kind$Core$read$char$($533, 61);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $536 = self.fst;
                                                            var self = Kind$Core$read$term$($536);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $538 = self.fst;
                                                                    var $539 = self.snd;
                                                                    var self = Kind$Core$read$char$($538, 59);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $541 = self.fst;
                                                                            var self = Kind$Core$read$term$($541);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $543 = self.fst;
                                                                                    var $544 = self.snd;
                                                                                    var $545 = Pair$new$($543, (_ctx$18 => {
                                                                                        var $546 = Kind$Term$let$($534, $539(_ctx$18), (_x$19 => {
                                                                                            var $547 = $544(List$cons$(Pair$new$($534, _x$19), _ctx$18));
                                                                                            return $547;
                                                                                        }));
                                                                                        return $546;
                                                                                    }));
                                                                                    var $542 = $545;
                                                                                    break;
                                                                            };
                                                                            var $540 = $542;
                                                                            break;
                                                                    };
                                                                    var $537 = $540;
                                                                    break;
                                                            };
                                                            var $535 = $537;
                                                            break;
                                                    };
                                                    var $532 = $535;
                                                    break;
                                            };
                                            var $531 = $532;
                                        } else {
                                            var self = (_head$6 === 36);
                                            if (self) {
                                                var self = Kind$Core$read$name$(_code$7);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $550 = self.fst;
                                                        var $551 = self.snd;
                                                        var self = Kind$Core$read$char$($550, 61);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $553 = self.fst;
                                                                var self = Kind$Core$read$term$($553);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $555 = self.fst;
                                                                        var $556 = self.snd;
                                                                        var self = Kind$Core$read$char$($555, 59);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $558 = self.fst;
                                                                                var self = Kind$Core$read$term$($558);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $560 = self.fst;
                                                                                        var $561 = self.snd;
                                                                                        var $562 = Pair$new$($560, (_ctx$18 => {
                                                                                            var $563 = Kind$Term$def$($551, $556(_ctx$18), (_x$19 => {
                                                                                                var $564 = $561(List$cons$(Pair$new$($551, _x$19), _ctx$18));
                                                                                                return $564;
                                                                                            }));
                                                                                            return $563;
                                                                                        }));
                                                                                        var $559 = $562;
                                                                                        break;
                                                                                };
                                                                                var $557 = $559;
                                                                                break;
                                                                        };
                                                                        var $554 = $557;
                                                                        break;
                                                                };
                                                                var $552 = $554;
                                                                break;
                                                        };
                                                        var $549 = $552;
                                                        break;
                                                };
                                                var $548 = $549;
                                            } else {
                                                var self = (_head$6 === 123);
                                                if (self) {
                                                    var self = Kind$Core$read$term$(_code$7);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $567 = self.fst;
                                                            var $568 = self.snd;
                                                            var self = Kind$Core$read$char$($567, 58);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $570 = self.fst;
                                                                    var self = Kind$Core$read$term$($570);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $572 = self.fst;
                                                                            var $573 = self.snd;
                                                                            var self = Kind$Core$read$char$($572, 125);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $575 = self.fst;
                                                                                    var $576 = Pair$new$($575, (_ctx$16 => {
                                                                                        var $577 = Kind$Term$ann$(Bool$false, $568(_ctx$16), $573(_ctx$16));
                                                                                        return $577;
                                                                                    }));
                                                                                    var $574 = $576;
                                                                                    break;
                                                                            };
                                                                            var $571 = $574;
                                                                            break;
                                                                    };
                                                                    var $569 = $571;
                                                                    break;
                                                            };
                                                            var $566 = $569;
                                                            break;
                                                    };
                                                    var $565 = $566;
                                                } else {
                                                    var self = (_head$6 === 39);
                                                    if (self) {
                                                        var self = Kind$Core$read$chrx$(_code$7);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $580 = self.fst;
                                                                var $581 = self.snd;
                                                                var self = Kind$Core$read$char$($580, 39);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $583 = self.fst;
                                                                        var $584 = Pair$new$($583, (_ctx$12 => {
                                                                            var $585 = Kind$Term$chr$($581);
                                                                            return $585;
                                                                        }));
                                                                        var $582 = $584;
                                                                        break;
                                                                };
                                                                var $579 = $582;
                                                                break;
                                                        };
                                                        var $578 = $579;
                                                    } else {
                                                        var self = (_head$6 === 34);
                                                        if (self) {
                                                            var self = Kind$Core$read$strx$(_code$7);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $588 = self.fst;
                                                                    var $589 = self.snd;
                                                                    var self = Kind$Core$read$char$($588, 34);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $591 = self.fst;
                                                                            var $592 = Pair$new$($591, (_ctx$12 => {
                                                                                var $593 = Kind$Term$str$($589);
                                                                                return $593;
                                                                            }));
                                                                            var $590 = $592;
                                                                            break;
                                                                    };
                                                                    var $587 = $590;
                                                                    break;
                                                            };
                                                            var $586 = $587;
                                                        } else {
                                                            var self = (_head$6 === 43);
                                                            if (self) {
                                                                var self = Kind$Core$read$natx$(_code$7, 0n);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $596 = self.fst;
                                                                        var $597 = self.snd;
                                                                        var $598 = Pair$new$($596, (_ctx$10 => {
                                                                            var $599 = Kind$Term$nat$($597);
                                                                            return $599;
                                                                        }));
                                                                        var $595 = $598;
                                                                        break;
                                                                };
                                                                var $594 = $595;
                                                            } else {
                                                                var self = Kind$Core$read$is_name$(_head$6);
                                                                if (self) {
                                                                    var self = Kind$Core$read$name$(_code$7);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $602 = self.fst;
                                                                            var $603 = self.snd;
                                                                            var _name$10 = String$cons$(_head$6, $603);
                                                                            var self = $602;
                                                                            if (self.length === 0) {
                                                                                var $605 = Pair$new$("", 0n);
                                                                                var self = $605;
                                                                            } else {
                                                                                var $606 = self.charCodeAt(0);
                                                                                var $607 = self.slice(1);
                                                                                var self = ($606 === 94);
                                                                                if (self) {
                                                                                    var $609 = Kind$Core$read$natx$($607, 0n);
                                                                                    var $608 = $609;
                                                                                } else {
                                                                                    var $610 = Pair$new$($602, 0n);
                                                                                    var $608 = $610;
                                                                                };
                                                                                var self = $608;
                                                                            };
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $611 = self.fst;
                                                                                    var $612 = self.snd;
                                                                                    var $613 = Pair$new$($611, (_ctx$13 => {
                                                                                        var _got$14 = Kind$Core$read$find$(_ctx$13, (_x$14 => _i$15 => {
                                                                                            var $615 = (Pair$fst$(_x$14) === _name$10);
                                                                                            return $615;
                                                                                        }), 0n, $612);
                                                                                        var self = _got$14;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.some':
                                                                                                var $616 = self.value;
                                                                                                var $617 = Pair$snd$(Pair$fst$($616));
                                                                                                var $614 = $617;
                                                                                                break;
                                                                                            case 'Maybe.none':
                                                                                                var $618 = Kind$Term$ref$(_name$10);
                                                                                                var $614 = $618;
                                                                                                break;
                                                                                        };
                                                                                        return $614;
                                                                                    }));
                                                                                    var $604 = $613;
                                                                                    break;
                                                                            };
                                                                            var $601 = $604;
                                                                            break;
                                                                    };
                                                                    var $600 = $601;
                                                                } else {
                                                                    var $619 = Pair$new$("", (_ctx$8 => {
                                                                        var $620 = Kind$Term$ref$("error");
                                                                        return $620;
                                                                    }));
                                                                    var $600 = $619;
                                                                };
                                                                var $594 = $600;
                                                            };
                                                            var $586 = $594;
                                                        };
                                                        var $578 = $586;
                                                    };
                                                    var $565 = $578;
                                                };
                                                var $548 = $565;
                                            };
                                            var $531 = $548;
                                        };
                                        var $520 = $531;
                                    };
                                    var $510 = $520;
                                };
                                var $488 = $510;
                            };
                            var $466 = $488;
                        };
                        var $463 = $466;
                    };
                    var $458 = $463;
                };
                var $456 = $458;
                break;
        };
        return $456;
    };
    const Kind$Core$read$term = x0 => Kind$Core$read$term$(x0);

    function Kind$Core$read$(_code$1) {
        var self = Kind$Core$read$term$((_code$1 + ";"));
        switch (self._) {
            case 'Pair.new':
                var $622 = self.fst;
                var $623 = self.snd;
                var self = $622;
                if (self.length === 0) {
                    var $625 = Maybe$none;
                    var $624 = $625;
                } else {
                    var $626 = self.charCodeAt(0);
                    var $627 = self.slice(1);
                    var $628 = Maybe$some$($623(List$nil));
                    var $624 = $628;
                };
                var $621 = $624;
                break;
        };
        return $621;
    };
    const Kind$Core$read = x0 => Kind$Core$read$(x0);

    function Bool$read$(_code$1) {
        var self = (_code$1 === "Bool.true");
        if (self) {
            var $630 = Maybe$some$(Bool$true);
            var $629 = $630;
        } else {
            var self = (_code$1 === "Bool.false");
            if (self) {
                var $632 = Maybe$some$(Bool$false);
                var $631 = $632;
            } else {
                var $633 = Maybe$none;
                var $631 = $633;
            };
            var $629 = $631;
        };
        return $629;
    };
    const Bool$read = x0 => Bool$read$(x0);
    const Kind$Status$done = ({
        _: 'Kind.Status.done'
    });

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $634 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $634;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Synth$load$cached$def$(_name$1) {
        var $635 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $636 = _m$bind$2;
            return $636;
        }))(IO$get_file$((".cache/" + (_name$1 + ".file"))))((_cache_file$2 => {
            var self = (!String$is_empty$(_cache_file$2));
            if (self) {
                var $638 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $639 = _m$bind$3;
                    return $639;
                }))(IO$get_file$((".cache/" + (_name$1 + ".time"))))((_cache_time$3 => {
                    var $640 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $641 = _m$bind$4;
                        return $641;
                    }))(IO$get_file_mtime$(_cache_file$2))((_cache_file_time$4 => {
                        var self = (_cache_time$3 === _cache_file_time$4);
                        if (self) {
                            var $643 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $644 = _m$bind$5;
                                return $644;
                            }))(IO$get_file$((".cache/" + (_name$1 + ".term"))))((_cache_term$5 => {
                                var $645 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $646 = _m$bind$6;
                                    return $646;
                                }))(IO$get_file$((".cache/" + (_name$1 + ".type"))))((_cache_type$6 => {
                                    var $647 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $648 = _m$bind$7;
                                        return $648;
                                    }))(IO$get_file$((".cache/" + (_name$1 + ".isct"))))((_cache_isct$7 => {
                                        var $649 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $650 = _m$bind$8;
                                            return $650;
                                        }))(IO$get_file$((".cache/" + (_name$1 + ".arit"))))((_cache_arit$8 => {
                                            var $651 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $652 = _m$pure$10;
                                                return $652;
                                            }))((() => {
                                                var _file$9 = _cache_file$2;
                                                var _code$10 = "<cached>";
                                                var _orig$11 = Pair$new$(0n, 0n);
                                                var $653 = Maybe$monad$((_m$bind$12 => _m$pure$13 => {
                                                    var $654 = _m$bind$12;
                                                    return $654;
                                                }))(Kind$Core$read$(_cache_term$5))((_term$12 => {
                                                    var $655 = Maybe$monad$((_m$bind$13 => _m$pure$14 => {
                                                        var $656 = _m$bind$13;
                                                        return $656;
                                                    }))(Kind$Core$read$(_cache_type$6))((_type$13 => {
                                                        var $657 = Maybe$monad$((_m$bind$14 => _m$pure$15 => {
                                                            var $658 = _m$bind$14;
                                                            return $658;
                                                        }))(Bool$read$(_cache_isct$7))((_isct$14 => {
                                                            var $659 = Maybe$monad$((_m$bind$15 => _m$pure$16 => {
                                                                var $660 = _m$bind$15;
                                                                return $660;
                                                            }))(Maybe$some$(Nat$read$(_cache_arit$8)))((_arit$15 => {
                                                                var _stat$16 = Kind$Status$done;
                                                                var $661 = Maybe$monad$((_m$bind$17 => _m$pure$18 => {
                                                                    var $662 = _m$pure$18;
                                                                    return $662;
                                                                }))(Kind$Def$new$(_file$9, _code$10, _orig$11, _name$1, _term$12, _type$13, _isct$14, _arit$15, _stat$16));
                                                                return $661;
                                                            }));
                                                            return $659;
                                                        }));
                                                        return $657;
                                                    }));
                                                    return $655;
                                                }));
                                                return $653;
                                            })());
                                            return $651;
                                        }));
                                        return $649;
                                    }));
                                    return $647;
                                }));
                                return $645;
                            }));
                            var $642 = $643;
                        } else {
                            var $663 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $664 = _m$pure$6;
                                return $664;
                            }))(Maybe$none);
                            var $642 = $663;
                        };
                        return $642;
                    }));
                    return $640;
                }));
                var $637 = $638;
            } else {
                var $665 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $666 = _m$pure$4;
                    return $666;
                }))(Maybe$none);
                var $637 = $665;
            };
            return $637;
        }));
        return $635;
    };
    const Kind$Synth$load$cached$def = x0 => Kind$Synth$load$cached$def$(x0);

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $667 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $667;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });
    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $668 = (bitsmap_set((kind_name_to_bits(_name$2)), _val$3, _map$4, 'set'));
        return $668;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);
    const Kind$Map$new = BitsMap$new;
    const Kind$Map = null;

    function Kind$Core$dependencies$go$(_term$1, _deps$2) {
        var _nil$3 = Kind$Term$typ;
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $670 = self.name;
                var $671 = Kind$Map$set$($670, Unit$new, _deps$2);
                var $669 = $671;
                break;
            case 'Kind.Term.all':
                var $672 = self.xtyp;
                var $673 = self.body;
                var _deps$9 = Kind$Core$dependencies$go$($672, _deps$2);
                var _deps$10 = Kind$Core$dependencies$go$($673(_nil$3)(_nil$3), _deps$9);
                var $674 = _deps$10;
                var $669 = $674;
                break;
            case 'Kind.Term.lam':
                var $675 = self.body;
                var _deps$6 = Kind$Core$dependencies$go$($675(_nil$3), _deps$2);
                var $676 = _deps$6;
                var $669 = $676;
                break;
            case 'Kind.Term.app':
                var $677 = self.func;
                var $678 = self.argm;
                var _deps$6 = Kind$Core$dependencies$go$($677, _deps$2);
                var _deps$7 = Kind$Core$dependencies$go$($678, _deps$6);
                var $679 = _deps$7;
                var $669 = $679;
                break;
            case 'Kind.Term.let':
                var $680 = self.expr;
                var $681 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($680, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($681(_nil$3), _deps$7);
                var $682 = _deps$8;
                var $669 = $682;
                break;
            case 'Kind.Term.def':
                var $683 = self.expr;
                var $684 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($683, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($684(_nil$3), _deps$7);
                var $685 = _deps$8;
                var $669 = $685;
                break;
            case 'Kind.Term.ann':
                var $686 = self.term;
                var $687 = self.type;
                var _deps$7 = Kind$Core$dependencies$go$($686, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($687, _deps$7);
                var $688 = _deps$8;
                var $669 = $688;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $689 = _deps$2;
                var $669 = $689;
                break;
        };
        return $669;
    };
    const Kind$Core$dependencies$go = x0 => x1 => Kind$Core$dependencies$go$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $691 = self.head;
                var $692 = self.tail;
                var $693 = List$cons$(_f$4($691), List$mapped$($692, _f$4));
                var $690 = $693;
                break;
            case 'List.nil':
                var $694 = List$nil;
                var $690 = $694;
                break;
        };
        return $690;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $696 = self.val;
                var $697 = self.lft;
                var $698 = self.rgt;
                var self = $696;
                switch (self._) {
                    case 'Maybe.some':
                        var $700 = self.value;
                        var $701 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $700), _list$4);
                        var _list0$8 = $701;
                        break;
                    case 'Maybe.none':
                        var $702 = _list$4;
                        var _list0$8 = $702;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($697, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($698, (_key$3 + '1'), _list1$9);
                var $699 = _list2$10;
                var $695 = $699;
                break;
            case 'BitsMap.new':
                var $703 = _list$4;
                var $695 = $703;
                break;
        };
        return $695;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $705 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $707 = List$cons$(_head$6, _tail$7);
                    var $706 = $707;
                } else {
                    var $708 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $709 = Bits$chunks_of$go$(_len$1, $705, $708, _chunk$7);
                    var $706 = $709;
                };
                var $704 = $706;
                break;
            case 'i':
                var $710 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $712 = List$cons$(_head$6, _tail$7);
                    var $711 = $712;
                } else {
                    var $713 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $714 = Bits$chunks_of$go$(_len$1, $710, $713, _chunk$7);
                    var $711 = $714;
                };
                var $704 = $711;
                break;
            case 'e':
                var $715 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $704 = $715;
                break;
        };
        return $704;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $716 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $716;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $718 = self.head;
                var $719 = self.tail;
                var $720 = _cons$5($718)(List$fold$($719, _nil$4, _cons$5));
                var $717 = $720;
                break;
            case 'List.nil':
                var $721 = _nil$4;
                var $717 = $721;
                break;
        };
        return $717;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $723 = Word$e;
            var $722 = $723;
        } else {
            var $724 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $726 = self.slice(0, -1);
                    var $727 = Word$o$(Word$from_bits$($724, $726));
                    var $725 = $727;
                    break;
                case 'i':
                    var $728 = self.slice(0, -1);
                    var $729 = Word$i$(Word$from_bits$($724, $728));
                    var $725 = $729;
                    break;
                case 'e':
                    var $730 = Word$o$(Word$from_bits$($724, Bits$e));
                    var $725 = $730;
                    break;
            };
            var $722 = $725;
        };
        return $722;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Kind$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $733 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $733;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $735 = ((_u16$5 + 71) & 0xFFFF);
                    var $734 = $735;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $737 = ((_u16$5 - 4) & 0xFFFF);
                        var $736 = $737;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $739 = 46;
                            var $738 = $739;
                        } else {
                            var $740 = 95;
                            var $738 = $740;
                        };
                        var $736 = $738;
                    };
                    var $734 = $736;
                };
                var _chr$6 = $734;
            };
            var $732 = String$cons$(_chr$6, _name$4);
            return $732;
        }));
        var $731 = _name$3;
        return $731;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Map$to_list$(_xs$2) {
        var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        var $741 = List$mapped$(_kvs$3, (_kv$4 => {
            var self = _kv$4;
            switch (self._) {
                case 'Pair.new':
                    var $743 = self.fst;
                    var $744 = self.snd;
                    var $745 = Pair$new$(Kind$Name$from_bits$($743), $744);
                    var $742 = $745;
                    break;
            };
            return $742;
        }));
        return $741;
    };
    const Kind$Map$to_list = x0 => Kind$Map$to_list$(x0);

    function Kind$Map$keys$(_xs$2) {
        var $746 = List$mapped$(Kind$Map$to_list$(_xs$2), Pair$fst);
        return $746;
    };
    const Kind$Map$keys = x0 => Kind$Map$keys$(x0);

    function Kind$Synth$load$cached$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $748 = self.head;
                var $749 = self.tail;
                var self = Kind$Map$get$($748, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var _name$5 = $748;
                        var $751 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $752 = _m$bind$6;
                            return $752;
                        }))(Kind$Synth$load$cached$def$(_name$5))((_defn$6 => {
                            var self = _defn$6;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $754 = self.value;
                                    var self = $754;
                                    switch (self._) {
                                        case 'Kind.Def.new':
                                            var $756 = self.term;
                                            var $757 = self.type;
                                            var _defs$17 = Kind$Map$set$(_name$5, $754, _defs$2);
                                            var _deps$18 = Kind$Map$new;
                                            var _deps$19 = Kind$Core$dependencies$go$($756, _deps$18);
                                            var _deps$20 = Kind$Core$dependencies$go$($757, _deps$19);
                                            var _deps$21 = Kind$Map$keys$(_deps$20);
                                            var $758 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                                var $759 = _m$bind$22;
                                                return $759;
                                            }))(Kind$Synth$load$cached$(_deps$21, _defs$17))((_defs$22 => {
                                                var self = _defs$22;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $761 = self.value;
                                                        var $762 = Kind$Synth$load$cached$($749, $761);
                                                        var $760 = $762;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $763 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                                            var $764 = _m$pure$24;
                                                            return $764;
                                                        }))(Maybe$none);
                                                        var $760 = $763;
                                                        break;
                                                };
                                                return $760;
                                            }));
                                            var $755 = $758;
                                            break;
                                    };
                                    var $753 = $755;
                                    break;
                                case 'Maybe.none':
                                    var $765 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $766 = _m$pure$8;
                                        return $766;
                                    }))(Maybe$none);
                                    var $753 = $765;
                                    break;
                            };
                            return $753;
                        }));
                        var $750 = $751;
                        break;
                    case 'Maybe.some':
                        var $767 = Kind$Synth$load$cached$($749, _defs$2);
                        var $750 = $767;
                        break;
                };
                var $747 = $750;
                break;
            case 'List.nil':
                var $768 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $769 = _m$pure$4;
                    return $769;
                }))(Maybe$some$(_defs$2));
                var $747 = $768;
                break;
        };
        return $747;
    };
    const Kind$Synth$load$cached = x0 => x1 => Kind$Synth$load$cached$(x0, x1);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $771 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $770 = $771;
        } else {
            var $772 = self.charCodeAt(0);
            var $773 = self.slice(1);
            var $774 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $770 = $774;
        };
        return $770;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$(_V$1) {
        var $775 = null;
        return $775;
    };
    const Parser = x0 => Parser$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $776 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $776;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $778 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $780 = self.value;
                        var self = $778;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $782 = self.idx;
                                var self = $780;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $784 = self.idx;
                                        var self = ($782 > $784);
                                        if (self) {
                                            var $786 = _a$1;
                                            var $785 = $786;
                                        } else {
                                            var $787 = _b$2;
                                            var $785 = $787;
                                        };
                                        var $783 = $785;
                                        break;
                                };
                                var $781 = $783;
                                break;
                        };
                        var $779 = $781;
                        break;
                    case 'Maybe.none':
                        var $788 = _a$1;
                        var $779 = $788;
                        break;
                };
                var $777 = $779;
                break;
            case 'Maybe.none':
                var $789 = _b$2;
                var $777 = $789;
                break;
        };
        return $777;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $790 = self.head;
                        var $791 = self.tail;
                        var _parsed$8 = $790(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $793 = self.idx;
                                var $794 = self.code;
                                var $795 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($793, $794, $795));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $796 = Parser$first_of$go$($791, _err$13, _idx$4, _code$5);
                                var $792 = $796;
                                break;
                            case 'Parser.Reply.value':
                                var $797 = self.idx;
                                var $798 = self.code;
                                var $799 = self.val;
                                var $800 = Parser$Reply$value$($797, $798, $799);
                                var $792 = $800;
                                break;
                        };
                        return $792;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $802 = self.value;
                                var self = $802;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $804 = self.idx;
                                        var $805 = self.code;
                                        var $806 = self.err;
                                        var $807 = Parser$Reply$error$($804, $805, $806);
                                        var $803 = $807;
                                        break;
                                };
                                var $801 = $803;
                                break;
                            case 'Maybe.none':
                                var $808 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $801 = $808;
                                break;
                        };
                        return $801;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $809 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $809;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $810 = self.head;
                        var $811 = self.tail;
                        var $812 = String$flatten$go$($811, (_res$2 + $810));
                        return $812;
                    case 'List.nil':
                        var $813 = _res$2;
                        return $813;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $814 = String$flatten$go$(_xs$1, "");
        return $814;
    };
    const String$flatten = x0 => String$flatten$(x0);

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $816 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $815 = $816;
        } else {
            var $817 = self.charCodeAt(0);
            var $818 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $820 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $819 = $820;
            } else {
                var $821 = self.charCodeAt(0);
                var $822 = self.slice(1);
                var self = ($817 === $821);
                if (self) {
                    var $824 = Parser$text$($818, Nat$succ$(_idx$2), $822);
                    var $823 = $824;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($821, String$nil), List$cons$("\'.", List$nil))))));
                    var $825 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $823 = $825;
                };
                var $819 = $823;
            };
            var $815 = $819;
        };
        return $815;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $827 = self.err;
                var $828 = Parser$Reply$error$(_idx$2, _code$3, $827);
                var $826 = $828;
                break;
            case 'Parser.Reply.value':
                var $829 = self.idx;
                var $830 = self.code;
                var $831 = self.val;
                var $832 = Parser$Reply$value$($829, $830, $831);
                var $826 = $832;
                break;
        };
        return $826;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $834 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $833 = $834;
        } else {
            var $835 = self.charCodeAt(0);
            var $836 = self.slice(1);
            var $837 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $833 = $837;
        };
        return $833;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $839 = self.idx;
                        var $840 = self.code;
                        var $841 = Parser$Reply$value$($839, $840, List$reverse$(_values$4));
                        var $838 = $841;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $843 = self.idx;
                                var $844 = self.code;
                                var $845 = self.err;
                                var $846 = Parser$Reply$error$($843, $844, $845);
                                var $842 = $846;
                                break;
                            case 'Parser.Reply.value':
                                var $847 = self.idx;
                                var $848 = self.code;
                                var $849 = self.val;
                                var $850 = Parser$until$go$(_until$2, _parse$3, List$cons$($849, _values$4), $847, $848);
                                var $842 = $850;
                                break;
                        };
                        var $838 = $842;
                        break;
                };
                return $838;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $851 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $851;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $853 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $852 = $853;
        } else {
            var $854 = self.charCodeAt(0);
            var $855 = self.slice(1);
            var $856 = Parser$Reply$value$(Nat$succ$(_idx$1), $855, $854);
            var $852 = $856;
        };
        return $852;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $858 = self.idx;
                var $859 = self.code;
                var $860 = self.err;
                var $861 = Parser$Reply$error$($858, $859, $860);
                var $857 = $861;
                break;
            case 'Parser.Reply.value':
                var $862 = self.idx;
                var $863 = self.code;
                var _endl_or_eof$6 = Parser$first_of$(List$cons$(Parser$text("\u{a}"), List$cons$(Parser$eof, List$nil)));
                var self = Parser$until$(_endl_or_eof$6, Parser$one)($862)($863);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $865 = self.idx;
                        var $866 = self.code;
                        var $867 = self.err;
                        var $868 = Parser$Reply$error$($865, $866, $867);
                        var $864 = $868;
                        break;
                    case 'Parser.Reply.value':
                        var $869 = self.idx;
                        var $870 = self.code;
                        var $871 = Parser$Reply$value$($869, $870, Unit$new);
                        var $864 = $871;
                        break;
                };
                var $857 = $864;
                break;
        };
        return $857;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $872 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $872;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $874 = self.idx;
                var $875 = self.code;
                var $876 = self.err;
                var $877 = Parser$Reply$error$($874, $875, $876);
                var $873 = $877;
                break;
            case 'Parser.Reply.value':
                var $878 = self.idx;
                var $879 = self.code;
                var self = Parser$get_index$($878, $879);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $881 = self.idx;
                        var $882 = self.code;
                        var $883 = self.err;
                        var $884 = Parser$Reply$error$($881, $882, $883);
                        var $880 = $884;
                        break;
                    case 'Parser.Reply.value':
                        var $885 = self.idx;
                        var $886 = self.code;
                        var $887 = self.val;
                        var $888 = Parser$Reply$value$($885, $886, $887);
                        var $880 = $888;
                        break;
                };
                var $873 = $880;
                break;
        };
        return $873;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $890 = Bool$true;
            var $889 = $890;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $892 = Bool$true;
                var $891 = $892;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $894 = Bool$true;
                    var $893 = $894;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $896 = Bool$true;
                        var $895 = $896;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $898 = Bool$true;
                            var $897 = $898;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $900 = Bool$true;
                                var $899 = $900;
                            } else {
                                var $901 = Bool$false;
                                var $899 = $901;
                            };
                            var $897 = $899;
                        };
                        var $895 = $897;
                    };
                    var $893 = $895;
                };
                var $891 = $893;
            };
            var $889 = $891;
        };
        return $889;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $903 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $902 = $903;
        } else {
            var $904 = self.charCodeAt(0);
            var $905 = self.slice(1);
            var self = Kind$Name$is_letter$($904);
            if (self) {
                var $907 = Parser$Reply$value$(Nat$succ$(_idx$1), $905, $904);
                var $906 = $907;
            } else {
                var $908 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $906 = $908;
            };
            var $902 = $906;
        };
        return $902;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $910 = self.idx;
                var $911 = self.code;
                var $912 = self.err;
                var $913 = Parser$Reply$error$($910, $911, $912);
                var $909 = $913;
                break;
            case 'Parser.Reply.value':
                var $914 = self.idx;
                var $915 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $914, $915);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $917 = self.idx;
                        var $918 = self.code;
                        var $919 = self.err;
                        var $920 = Parser$Reply$error$($917, $918, $919);
                        var $916 = $920;
                        break;
                    case 'Parser.Reply.value':
                        var $921 = self.idx;
                        var $922 = self.code;
                        var $923 = self.val;
                        var $924 = Parser$Reply$value$($921, $922, List$fold$($923, String$nil, String$cons));
                        var $916 = $924;
                        break;
                };
                var $909 = $916;
                break;
        };
        return $909;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $926 = self.idx;
                var $927 = self.code;
                var $928 = self.err;
                var $929 = Parser$Reply$error$($926, $927, $928);
                var $925 = $929;
                break;
            case 'Parser.Reply.value':
                var $930 = self.idx;
                var $931 = self.code;
                var $932 = Parser$text$(_text$1, $930, $931);
                var $925 = $932;
                break;
        };
        return $925;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $934 = self.idx;
                var $935 = self.code;
                var $936 = self.err;
                var $937 = Parser$Reply$error$($934, $935, $936);
                var $933 = $937;
                break;
            case 'Parser.Reply.value':
                var $938 = self.idx;
                var $939 = self.code;
                var $940 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($938)($939);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $942 = self.idx;
                        var $943 = self.code;
                        var $944 = self.err;
                        var $945 = Parser$Reply$error$($942, $943, $944);
                        var $941 = $945;
                        break;
                    case 'Parser.Reply.value':
                        var $946 = self.idx;
                        var $947 = self.code;
                        var $948 = self.val;
                        var $949 = Parser$Reply$value$($946, $947, List$cons$($940, $948));
                        var $941 = $949;
                        break;
                };
                var $933 = $941;
                break;
        };
        return $933;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $951 = self.idx;
                var $952 = self.code;
                var $953 = self.val;
                var $954 = Parser$Reply$value$($951, $952, Maybe$some$($953));
                var $950 = $954;
                break;
            case 'Parser.Reply.error':
                var $955 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $950 = $955;
                break;
        };
        return $950;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $957 = self.idx;
                var $958 = self.code;
                var $959 = self.err;
                var $960 = Parser$Reply$error$($957, $958, $959);
                var $956 = $960;
                break;
            case 'Parser.Reply.value':
                var $961 = self.idx;
                var $962 = self.code;
                var self = _parser$2($961)($962);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $964 = self.idx;
                        var $965 = self.code;
                        var $966 = self.err;
                        var $967 = Parser$Reply$error$($964, $965, $966);
                        var $963 = $967;
                        break;
                    case 'Parser.Reply.value':
                        var $968 = self.idx;
                        var $969 = self.code;
                        var $970 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $968, $969);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $972 = self.idx;
                                var $973 = self.code;
                                var $974 = self.err;
                                var $975 = Parser$Reply$error$($972, $973, $974);
                                var $971 = $975;
                                break;
                            case 'Parser.Reply.value':
                                var $976 = self.idx;
                                var $977 = self.code;
                                var $978 = Parser$Reply$value$($976, $977, $970);
                                var $971 = $978;
                                break;
                        };
                        var $963 = $971;
                        break;
                };
                var $956 = $963;
                break;
        };
        return $956;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $980 = self.idx;
                var $981 = self.code;
                var $982 = self.err;
                var $983 = Parser$Reply$error$($980, $981, $982);
                var $979 = $983;
                break;
            case 'Parser.Reply.value':
                var $984 = self.idx;
                var $985 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($984)($985);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $987 = self.idx;
                        var $988 = self.code;
                        var $989 = self.err;
                        var $990 = Parser$Reply$error$($987, $988, $989);
                        var $986 = $990;
                        break;
                    case 'Parser.Reply.value':
                        var $991 = self.idx;
                        var $992 = self.code;
                        var $993 = self.val;
                        var $994 = Parser$Reply$value$($991, $992, List$fold$($993, String$nil, String$cons));
                        var $986 = $994;
                        break;
                };
                var $979 = $986;
                break;
        };
        return $979;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $996 = self.idx;
                var $997 = self.code;
                var $998 = self.err;
                var $999 = Parser$Reply$error$($996, $997, $998);
                var $995 = $999;
                break;
            case 'Parser.Reply.value':
                var $1000 = self.idx;
                var $1001 = self.code;
                var $1002 = self.val;
                var _orig$7 = Pair$new$(_from$1, $1002);
                var $1003 = Parser$Reply$value$($1000, $1001, _orig$7);
                var $995 = $1003;
                break;
        };
        return $995;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $1004 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $1004;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1006 = self.idx;
                var $1007 = self.code;
                var $1008 = self.err;
                var $1009 = Parser$Reply$error$($1006, $1007, $1008);
                var $1005 = $1009;
                break;
            case 'Parser.Reply.value':
                var $1010 = self.idx;
                var $1011 = self.code;
                var $1012 = self.val;
                var self = Kind$Parser$name$($1010, $1011);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1014 = self.idx;
                        var $1015 = self.code;
                        var $1016 = self.err;
                        var $1017 = Parser$Reply$error$($1014, $1015, $1016);
                        var $1013 = $1017;
                        break;
                    case 'Parser.Reply.value':
                        var $1018 = self.idx;
                        var $1019 = self.code;
                        var $1020 = self.val;
                        var self = Kind$Parser$binder$(":", $1018, $1019);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1022 = self.idx;
                                var $1023 = self.code;
                                var $1024 = self.err;
                                var $1025 = Parser$Reply$error$($1022, $1023, $1024);
                                var $1021 = $1025;
                                break;
                            case 'Parser.Reply.value':
                                var $1026 = self.idx;
                                var $1027 = self.code;
                                var $1028 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $1026, $1027);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1030 = self.idx;
                                        var $1031 = self.code;
                                        var $1032 = self.err;
                                        var $1033 = Parser$Reply$error$($1030, $1031, $1032);
                                        var $1029 = $1033;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1034 = self.idx;
                                        var $1035 = self.code;
                                        var self = Kind$Parser$term$($1034, $1035);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1037 = self.idx;
                                                var $1038 = self.code;
                                                var $1039 = self.err;
                                                var $1040 = Parser$Reply$error$($1037, $1038, $1039);
                                                var $1036 = $1040;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1041 = self.idx;
                                                var $1042 = self.code;
                                                var $1043 = self.val;
                                                var _term$18 = List$fold$($1028, $1043, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $1046 = self.eras;
                                                            var $1047 = self.name;
                                                            var $1048 = self.term;
                                                            var $1049 = Kind$Term$all$($1046, "", $1047, $1048, (_s$23 => _x$24 => {
                                                                var $1050 = _t$19;
                                                                return $1050;
                                                            }));
                                                            var $1045 = $1049;
                                                            break;
                                                    };
                                                    return $1045;
                                                }));
                                                var self = Kind$Parser$stop$($1012, $1041, $1042);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1051 = self.idx;
                                                        var $1052 = self.code;
                                                        var $1053 = self.err;
                                                        var $1054 = Parser$Reply$error$($1051, $1052, $1053);
                                                        var $1044 = $1054;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1055 = self.idx;
                                                        var $1056 = self.code;
                                                        var $1057 = self.val;
                                                        var $1058 = Parser$Reply$value$($1055, $1056, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $1059 = self.eras;
                                                                    var $1060 = self.name;
                                                                    var $1061 = self.xtyp;
                                                                    var $1062 = self.body;
                                                                    var $1063 = Kind$Term$ori$($1057, Kind$Term$all$($1059, $1020, $1060, $1061, $1062));
                                                                    return $1063;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $1064 = _term$18;
                                                                    return $1064;
                                                            };
                                                        })());
                                                        var $1044 = $1058;
                                                        break;
                                                };
                                                var $1036 = $1044;
                                                break;
                                        };
                                        var $1029 = $1036;
                                        break;
                                };
                                var $1021 = $1029;
                                break;
                        };
                        var $1013 = $1021;
                        break;
                };
                var $1005 = $1013;
                break;
        };
        return $1005;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $1066 = self.head;
                var $1067 = self.tail;
                var $1068 = Kind$Term$lam$($1066, (_x$5 => {
                    var $1069 = Kind$Parser$make_lambda$($1067, _body$2);
                    return $1069;
                }));
                var $1065 = $1068;
                break;
            case 'List.nil':
                var $1070 = _body$2;
                var $1065 = $1070;
                break;
        };
        return $1065;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1072 = self.idx;
                var $1073 = self.code;
                var $1074 = self.err;
                var $1075 = Parser$Reply$error$($1072, $1073, $1074);
                var $1071 = $1075;
                break;
            case 'Parser.Reply.value':
                var $1076 = self.idx;
                var $1077 = self.code;
                var $1078 = self.val;
                var self = Kind$Parser$text$("(", $1076, $1077);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1080 = self.idx;
                        var $1081 = self.code;
                        var $1082 = self.err;
                        var $1083 = Parser$Reply$error$($1080, $1081, $1082);
                        var $1079 = $1083;
                        break;
                    case 'Parser.Reply.value':
                        var $1084 = self.idx;
                        var $1085 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $1084, $1085);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1087 = self.idx;
                                var $1088 = self.code;
                                var $1089 = self.err;
                                var $1090 = Parser$Reply$error$($1087, $1088, $1089);
                                var $1086 = $1090;
                                break;
                            case 'Parser.Reply.value':
                                var $1091 = self.idx;
                                var $1092 = self.code;
                                var $1093 = self.val;
                                var self = Kind$Parser$term$($1091, $1092);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1095 = self.idx;
                                        var $1096 = self.code;
                                        var $1097 = self.err;
                                        var $1098 = Parser$Reply$error$($1095, $1096, $1097);
                                        var $1094 = $1098;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1099 = self.idx;
                                        var $1100 = self.code;
                                        var $1101 = self.val;
                                        var self = Kind$Parser$stop$($1078, $1099, $1100);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1103 = self.idx;
                                                var $1104 = self.code;
                                                var $1105 = self.err;
                                                var $1106 = Parser$Reply$error$($1103, $1104, $1105);
                                                var $1102 = $1106;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1107 = self.idx;
                                                var $1108 = self.code;
                                                var $1109 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1093, $1101);
                                                var $1110 = Parser$Reply$value$($1107, $1108, Kind$Term$ori$($1109, _expr$18));
                                                var $1102 = $1110;
                                                break;
                                        };
                                        var $1094 = $1102;
                                        break;
                                };
                                var $1086 = $1094;
                                break;
                        };
                        var $1079 = $1086;
                        break;
                };
                var $1071 = $1079;
                break;
        };
        return $1071;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1112 = self.idx;
                var $1113 = self.code;
                var $1114 = self.err;
                var $1115 = Parser$Reply$error$($1112, $1113, $1114);
                var $1111 = $1115;
                break;
            case 'Parser.Reply.value':
                var $1116 = self.idx;
                var $1117 = self.code;
                var $1118 = self.val;
                var self = Kind$Parser$text$("<", $1116, $1117);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1120 = self.idx;
                        var $1121 = self.code;
                        var $1122 = self.err;
                        var $1123 = Parser$Reply$error$($1120, $1121, $1122);
                        var $1119 = $1123;
                        break;
                    case 'Parser.Reply.value':
                        var $1124 = self.idx;
                        var $1125 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $1124, $1125);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1127 = self.idx;
                                var $1128 = self.code;
                                var $1129 = self.err;
                                var $1130 = Parser$Reply$error$($1127, $1128, $1129);
                                var $1126 = $1130;
                                break;
                            case 'Parser.Reply.value':
                                var $1131 = self.idx;
                                var $1132 = self.code;
                                var $1133 = self.val;
                                var self = Kind$Parser$term$($1131, $1132);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1135 = self.idx;
                                        var $1136 = self.code;
                                        var $1137 = self.err;
                                        var $1138 = Parser$Reply$error$($1135, $1136, $1137);
                                        var $1134 = $1138;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1139 = self.idx;
                                        var $1140 = self.code;
                                        var $1141 = self.val;
                                        var self = Kind$Parser$stop$($1118, $1139, $1140);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1143 = self.idx;
                                                var $1144 = self.code;
                                                var $1145 = self.err;
                                                var $1146 = Parser$Reply$error$($1143, $1144, $1145);
                                                var $1142 = $1146;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1147 = self.idx;
                                                var $1148 = self.code;
                                                var $1149 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1133, $1141);
                                                var $1150 = Parser$Reply$value$($1147, $1148, Kind$Term$ori$($1149, _expr$18));
                                                var $1142 = $1150;
                                                break;
                                        };
                                        var $1134 = $1142;
                                        break;
                                };
                                var $1126 = $1134;
                                break;
                        };
                        var $1119 = $1126;
                        break;
                };
                var $1111 = $1119;
                break;
        };
        return $1111;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1152 = self.idx;
                var $1153 = self.code;
                var $1154 = self.err;
                var $1155 = Parser$Reply$error$($1152, $1153, $1154);
                var $1151 = $1155;
                break;
            case 'Parser.Reply.value':
                var $1156 = self.idx;
                var $1157 = self.code;
                var $1158 = self.val;
                var self = Kind$Parser$text$("()", $1156, $1157);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1160 = self.idx;
                        var $1161 = self.code;
                        var $1162 = self.err;
                        var $1163 = Parser$Reply$error$($1160, $1161, $1162);
                        var $1159 = $1163;
                        break;
                    case 'Parser.Reply.value':
                        var $1164 = self.idx;
                        var $1165 = self.code;
                        var self = Kind$Parser$term$($1164, $1165);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1167 = self.idx;
                                var $1168 = self.code;
                                var $1169 = self.err;
                                var $1170 = Parser$Reply$error$($1167, $1168, $1169);
                                var $1166 = $1170;
                                break;
                            case 'Parser.Reply.value':
                                var $1171 = self.idx;
                                var $1172 = self.code;
                                var $1173 = self.val;
                                var self = Kind$Parser$stop$($1158, $1171, $1172);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1175 = self.idx;
                                        var $1176 = self.code;
                                        var $1177 = self.err;
                                        var $1178 = Parser$Reply$error$($1175, $1176, $1177);
                                        var $1174 = $1178;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1179 = self.idx;
                                        var $1180 = self.code;
                                        var $1181 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $1183 = $1173;
                                            return $1183;
                                        }));
                                        var $1182 = Parser$Reply$value$($1179, $1180, Kind$Term$ori$($1181, _expr$15));
                                        var $1174 = $1182;
                                        break;
                                };
                                var $1166 = $1174;
                                break;
                        };
                        var $1159 = $1166;
                        break;
                };
                var $1151 = $1159;
                break;
        };
        return $1151;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1185 = self.idx;
                var $1186 = self.code;
                var $1187 = self.err;
                var $1188 = Parser$Reply$error$($1185, $1186, $1187);
                var $1184 = $1188;
                break;
            case 'Parser.Reply.value':
                var $1189 = self.idx;
                var $1190 = self.code;
                var $1191 = self.val;
                var self = Kind$Parser$text$("(", $1189, $1190);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1193 = self.idx;
                        var $1194 = self.code;
                        var $1195 = self.err;
                        var $1196 = Parser$Reply$error$($1193, $1194, $1195);
                        var $1192 = $1196;
                        break;
                    case 'Parser.Reply.value':
                        var $1197 = self.idx;
                        var $1198 = self.code;
                        var self = Kind$Parser$term$($1197, $1198);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1200 = self.idx;
                                var $1201 = self.code;
                                var $1202 = self.err;
                                var $1203 = Parser$Reply$error$($1200, $1201, $1202);
                                var $1199 = $1203;
                                break;
                            case 'Parser.Reply.value':
                                var $1204 = self.idx;
                                var $1205 = self.code;
                                var $1206 = self.val;
                                var self = Kind$Parser$text$(")", $1204, $1205);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1208 = self.idx;
                                        var $1209 = self.code;
                                        var $1210 = self.err;
                                        var $1211 = Parser$Reply$error$($1208, $1209, $1210);
                                        var $1207 = $1211;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1212 = self.idx;
                                        var $1213 = self.code;
                                        var self = Kind$Parser$stop$($1191, $1212, $1213);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1215 = self.idx;
                                                var $1216 = self.code;
                                                var $1217 = self.err;
                                                var $1218 = Parser$Reply$error$($1215, $1216, $1217);
                                                var $1214 = $1218;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1219 = self.idx;
                                                var $1220 = self.code;
                                                var $1221 = self.val;
                                                var $1222 = Parser$Reply$value$($1219, $1220, Kind$Term$ori$($1221, $1206));
                                                var $1214 = $1222;
                                                break;
                                        };
                                        var $1207 = $1214;
                                        break;
                                };
                                var $1199 = $1207;
                                break;
                        };
                        var $1192 = $1199;
                        break;
                };
                var $1184 = $1192;
                break;
        };
        return $1184;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $1223 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $1223;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1225 = self.idx;
                var $1226 = self.code;
                var $1227 = self.err;
                var $1228 = Parser$Reply$error$($1225, $1226, $1227);
                var $1224 = $1228;
                break;
            case 'Parser.Reply.value':
                var $1229 = self.idx;
                var $1230 = self.code;
                var $1231 = self.val;
                var self = Kind$Parser$text$("let ", $1229, $1230);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1233 = self.idx;
                        var $1234 = self.code;
                        var $1235 = self.err;
                        var $1236 = Parser$Reply$error$($1233, $1234, $1235);
                        var $1232 = $1236;
                        break;
                    case 'Parser.Reply.value':
                        var $1237 = self.idx;
                        var $1238 = self.code;
                        var self = Kind$Parser$name1$($1237, $1238);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1240 = self.idx;
                                var $1241 = self.code;
                                var $1242 = self.err;
                                var $1243 = Parser$Reply$error$($1240, $1241, $1242);
                                var $1239 = $1243;
                                break;
                            case 'Parser.Reply.value':
                                var $1244 = self.idx;
                                var $1245 = self.code;
                                var $1246 = self.val;
                                var self = Kind$Parser$text$("=", $1244, $1245);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1248 = self.idx;
                                        var $1249 = self.code;
                                        var $1250 = self.err;
                                        var $1251 = Parser$Reply$error$($1248, $1249, $1250);
                                        var $1247 = $1251;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1252 = self.idx;
                                        var $1253 = self.code;
                                        var self = Kind$Parser$text$("for ", $1252, $1253);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1255 = self.idx;
                                                var $1256 = self.code;
                                                var $1257 = self.err;
                                                var $1258 = Parser$Reply$error$($1255, $1256, $1257);
                                                var $1254 = $1258;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1259 = self.idx;
                                                var $1260 = self.code;
                                                var self = Kind$Parser$name1$($1259, $1260);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1262 = self.idx;
                                                        var $1263 = self.code;
                                                        var $1264 = self.err;
                                                        var $1265 = Parser$Reply$error$($1262, $1263, $1264);
                                                        var $1261 = $1265;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1266 = self.idx;
                                                        var $1267 = self.code;
                                                        var $1268 = self.val;
                                                        var self = Kind$Parser$text$(":", $1266, $1267);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1270 = self.idx;
                                                                var $1271 = self.code;
                                                                var $1272 = self.err;
                                                                var $1273 = Parser$Reply$error$($1270, $1271, $1272);
                                                                var $1269 = $1273;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1274 = self.idx;
                                                                var $1275 = self.code;
                                                                var self = Kind$Parser$text$("U32", $1274, $1275);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1277 = self.idx;
                                                                        var $1278 = self.code;
                                                                        var $1279 = self.err;
                                                                        var $1280 = Parser$Reply$error$($1277, $1278, $1279);
                                                                        var $1276 = $1280;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1281 = self.idx;
                                                                        var $1282 = self.code;
                                                                        var self = Kind$Parser$text$("from", $1281, $1282);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1284 = self.idx;
                                                                                var $1285 = self.code;
                                                                                var $1286 = self.err;
                                                                                var $1287 = Parser$Reply$error$($1284, $1285, $1286);
                                                                                var $1283 = $1287;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1288 = self.idx;
                                                                                var $1289 = self.code;
                                                                                var self = Kind$Parser$term$($1288, $1289);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1291 = self.idx;
                                                                                        var $1292 = self.code;
                                                                                        var $1293 = self.err;
                                                                                        var $1294 = Parser$Reply$error$($1291, $1292, $1293);
                                                                                        var $1290 = $1294;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1295 = self.idx;
                                                                                        var $1296 = self.code;
                                                                                        var $1297 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $1295, $1296);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1299 = self.idx;
                                                                                                var $1300 = self.code;
                                                                                                var $1301 = self.err;
                                                                                                var $1302 = Parser$Reply$error$($1299, $1300, $1301);
                                                                                                var $1298 = $1302;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1303 = self.idx;
                                                                                                var $1304 = self.code;
                                                                                                var self = Kind$Parser$term$($1303, $1304);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1306 = self.idx;
                                                                                                        var $1307 = self.code;
                                                                                                        var $1308 = self.err;
                                                                                                        var $1309 = Parser$Reply$error$($1306, $1307, $1308);
                                                                                                        var $1305 = $1309;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1310 = self.idx;
                                                                                                        var $1311 = self.code;
                                                                                                        var $1312 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $1310, $1311);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1314 = self.idx;
                                                                                                                var $1315 = self.code;
                                                                                                                var $1316 = self.err;
                                                                                                                var $1317 = Parser$Reply$error$($1314, $1315, $1316);
                                                                                                                var $1313 = $1317;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1318 = self.idx;
                                                                                                                var $1319 = self.code;
                                                                                                                var self = Kind$Parser$term$($1318, $1319);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1321 = self.idx;
                                                                                                                        var $1322 = self.code;
                                                                                                                        var $1323 = self.err;
                                                                                                                        var $1324 = Parser$Reply$error$($1321, $1322, $1323);
                                                                                                                        var $1320 = $1324;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1325 = self.idx;
                                                                                                                        var $1326 = self.code;
                                                                                                                        var $1327 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1325, $1326);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1329 = self.idx;
                                                                                                                                var $1330 = self.code;
                                                                                                                                var $1331 = self.err;
                                                                                                                                var $1332 = Parser$Reply$error$($1329, $1330, $1331);
                                                                                                                                var $1328 = $1332;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1333 = self.idx;
                                                                                                                                var $1334 = self.code;
                                                                                                                                var self = Kind$Parser$term$($1333, $1334);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1336 = self.idx;
                                                                                                                                        var $1337 = self.code;
                                                                                                                                        var $1338 = self.err;
                                                                                                                                        var $1339 = Parser$Reply$error$($1336, $1337, $1338);
                                                                                                                                        var $1335 = $1339;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1340 = self.idx;
                                                                                                                                        var $1341 = self.code;
                                                                                                                                        var $1342 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($1231, $1340, $1341);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $1344 = self.idx;
                                                                                                                                                var $1345 = self.code;
                                                                                                                                                var $1346 = self.err;
                                                                                                                                                var $1347 = Parser$Reply$error$($1344, $1345, $1346);
                                                                                                                                                var $1343 = $1347;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $1348 = self.idx;
                                                                                                                                                var $1349 = self.code;
                                                                                                                                                var $1350 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($1246));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $1297);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $1312);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($1268, (_e$59 => {
                                                                                                                                                    var $1352 = Kind$Term$lam$($1246, (_s$60 => {
                                                                                                                                                        var $1353 = $1327;
                                                                                                                                                        return $1353;
                                                                                                                                                    }));
                                                                                                                                                    return $1352;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($1246, _term$60, (_x$61 => {
                                                                                                                                                    var $1354 = $1342;
                                                                                                                                                    return $1354;
                                                                                                                                                }));
                                                                                                                                                var $1351 = Parser$Reply$value$($1348, $1349, Kind$Term$ori$($1350, _term$61));
                                                                                                                                                var $1343 = $1351;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $1335 = $1343;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1328 = $1335;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1320 = $1328;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1313 = $1320;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1305 = $1313;
                                                                                                        break;
                                                                                                };
                                                                                                var $1298 = $1305;
                                                                                                break;
                                                                                        };
                                                                                        var $1290 = $1298;
                                                                                        break;
                                                                                };
                                                                                var $1283 = $1290;
                                                                                break;
                                                                        };
                                                                        var $1276 = $1283;
                                                                        break;
                                                                };
                                                                var $1269 = $1276;
                                                                break;
                                                        };
                                                        var $1261 = $1269;
                                                        break;
                                                };
                                                var $1254 = $1261;
                                                break;
                                        };
                                        var $1247 = $1254;
                                        break;
                                };
                                var $1239 = $1247;
                                break;
                        };
                        var $1232 = $1239;
                        break;
                };
                var $1224 = $1232;
                break;
        };
        return $1224;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1356 = self.idx;
                var $1357 = self.code;
                var $1358 = self.err;
                var $1359 = Parser$Reply$error$($1356, $1357, $1358);
                var $1355 = $1359;
                break;
            case 'Parser.Reply.value':
                var $1360 = self.idx;
                var $1361 = self.code;
                var $1362 = self.val;
                var self = Kind$Parser$text$("for ", $1360, $1361);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1364 = self.idx;
                        var $1365 = self.code;
                        var $1366 = self.err;
                        var $1367 = Parser$Reply$error$($1364, $1365, $1366);
                        var $1363 = $1367;
                        break;
                    case 'Parser.Reply.value':
                        var $1368 = self.idx;
                        var $1369 = self.code;
                        var self = Kind$Parser$name1$($1368, $1369);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1371 = self.idx;
                                var $1372 = self.code;
                                var $1373 = self.err;
                                var $1374 = Parser$Reply$error$($1371, $1372, $1373);
                                var $1370 = $1374;
                                break;
                            case 'Parser.Reply.value':
                                var $1375 = self.idx;
                                var $1376 = self.code;
                                var $1377 = self.val;
                                var self = Kind$Parser$text$(":", $1375, $1376);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1379 = self.idx;
                                        var $1380 = self.code;
                                        var $1381 = self.err;
                                        var $1382 = Parser$Reply$error$($1379, $1380, $1381);
                                        var $1378 = $1382;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1383 = self.idx;
                                        var $1384 = self.code;
                                        var self = Kind$Parser$text$("U32", $1383, $1384);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1386 = self.idx;
                                                var $1387 = self.code;
                                                var $1388 = self.err;
                                                var $1389 = Parser$Reply$error$($1386, $1387, $1388);
                                                var $1385 = $1389;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1390 = self.idx;
                                                var $1391 = self.code;
                                                var self = Kind$Parser$text$("from", $1390, $1391);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1393 = self.idx;
                                                        var $1394 = self.code;
                                                        var $1395 = self.err;
                                                        var $1396 = Parser$Reply$error$($1393, $1394, $1395);
                                                        var $1392 = $1396;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1397 = self.idx;
                                                        var $1398 = self.code;
                                                        var self = Kind$Parser$term$($1397, $1398);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1400 = self.idx;
                                                                var $1401 = self.code;
                                                                var $1402 = self.err;
                                                                var $1403 = Parser$Reply$error$($1400, $1401, $1402);
                                                                var $1399 = $1403;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1404 = self.idx;
                                                                var $1405 = self.code;
                                                                var $1406 = self.val;
                                                                var self = Kind$Parser$text$("to", $1404, $1405);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1408 = self.idx;
                                                                        var $1409 = self.code;
                                                                        var $1410 = self.err;
                                                                        var $1411 = Parser$Reply$error$($1408, $1409, $1410);
                                                                        var $1407 = $1411;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1412 = self.idx;
                                                                        var $1413 = self.code;
                                                                        var self = Kind$Parser$term$($1412, $1413);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1415 = self.idx;
                                                                                var $1416 = self.code;
                                                                                var $1417 = self.err;
                                                                                var $1418 = Parser$Reply$error$($1415, $1416, $1417);
                                                                                var $1414 = $1418;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1419 = self.idx;
                                                                                var $1420 = self.code;
                                                                                var $1421 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $1419, $1420);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1423 = self.idx;
                                                                                        var $1424 = self.code;
                                                                                        var $1425 = self.err;
                                                                                        var $1426 = Parser$Reply$error$($1423, $1424, $1425);
                                                                                        var $1422 = $1426;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1427 = self.idx;
                                                                                        var $1428 = self.code;
                                                                                        var self = Kind$Parser$name1$($1427, $1428);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1430 = self.idx;
                                                                                                var $1431 = self.code;
                                                                                                var $1432 = self.err;
                                                                                                var $1433 = Parser$Reply$error$($1430, $1431, $1432);
                                                                                                var $1429 = $1433;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1434 = self.idx;
                                                                                                var $1435 = self.code;
                                                                                                var $1436 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $1434, $1435);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1438 = self.idx;
                                                                                                        var $1439 = self.code;
                                                                                                        var $1440 = self.err;
                                                                                                        var $1441 = Parser$Reply$error$($1438, $1439, $1440);
                                                                                                        var $1437 = $1441;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1442 = self.idx;
                                                                                                        var $1443 = self.code;
                                                                                                        var self = Kind$Parser$term$($1442, $1443);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1445 = self.idx;
                                                                                                                var $1446 = self.code;
                                                                                                                var $1447 = self.err;
                                                                                                                var $1448 = Parser$Reply$error$($1445, $1446, $1447);
                                                                                                                var $1444 = $1448;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1449 = self.idx;
                                                                                                                var $1450 = self.code;
                                                                                                                var $1451 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1449, $1450);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1453 = self.idx;
                                                                                                                        var $1454 = self.code;
                                                                                                                        var $1455 = self.err;
                                                                                                                        var $1456 = Parser$Reply$error$($1453, $1454, $1455);
                                                                                                                        var $1452 = $1456;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1457 = self.idx;
                                                                                                                        var $1458 = self.code;
                                                                                                                        var self = Kind$Parser$term$($1457, $1458);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1460 = self.idx;
                                                                                                                                var $1461 = self.code;
                                                                                                                                var $1462 = self.err;
                                                                                                                                var $1463 = Parser$Reply$error$($1460, $1461, $1462);
                                                                                                                                var $1459 = $1463;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1464 = self.idx;
                                                                                                                                var $1465 = self.code;
                                                                                                                                var $1466 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($1362, $1464, $1465);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1468 = self.idx;
                                                                                                                                        var $1469 = self.code;
                                                                                                                                        var $1470 = self.err;
                                                                                                                                        var $1471 = Parser$Reply$error$($1468, $1469, $1470);
                                                                                                                                        var $1467 = $1471;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1472 = self.idx;
                                                                                                                                        var $1473 = self.code;
                                                                                                                                        var $1474 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($1436));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $1406);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $1421);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($1377, (_e$56 => {
                                                                                                                                            var $1476 = Kind$Term$lam$($1436, (_s$57 => {
                                                                                                                                                var $1477 = $1451;
                                                                                                                                                return $1477;
                                                                                                                                            }));
                                                                                                                                            return $1476;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($1436, _term$57, (_x$58 => {
                                                                                                                                            var $1478 = $1466;
                                                                                                                                            return $1478;
                                                                                                                                        }));
                                                                                                                                        var $1475 = Parser$Reply$value$($1472, $1473, Kind$Term$ori$($1474, _term$58));
                                                                                                                                        var $1467 = $1475;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1459 = $1467;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1452 = $1459;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1444 = $1452;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1437 = $1444;
                                                                                                        break;
                                                                                                };
                                                                                                var $1429 = $1437;
                                                                                                break;
                                                                                        };
                                                                                        var $1422 = $1429;
                                                                                        break;
                                                                                };
                                                                                var $1414 = $1422;
                                                                                break;
                                                                        };
                                                                        var $1407 = $1414;
                                                                        break;
                                                                };
                                                                var $1399 = $1407;
                                                                break;
                                                        };
                                                        var $1392 = $1399;
                                                        break;
                                                };
                                                var $1385 = $1392;
                                                break;
                                        };
                                        var $1378 = $1385;
                                        break;
                                };
                                var $1370 = $1378;
                                break;
                        };
                        var $1363 = $1370;
                        break;
                };
                var $1355 = $1363;
                break;
        };
        return $1355;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1480 = self.idx;
                var $1481 = self.code;
                var $1482 = self.err;
                var $1483 = Parser$Reply$error$($1480, $1481, $1482);
                var $1479 = $1483;
                break;
            case 'Parser.Reply.value':
                var $1484 = self.idx;
                var $1485 = self.code;
                var $1486 = self.val;
                var self = Kind$Parser$text$("let ", $1484, $1485);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1488 = self.idx;
                        var $1489 = self.code;
                        var $1490 = self.err;
                        var $1491 = Parser$Reply$error$($1488, $1489, $1490);
                        var $1487 = $1491;
                        break;
                    case 'Parser.Reply.value':
                        var $1492 = self.idx;
                        var $1493 = self.code;
                        var self = Kind$Parser$name1$($1492, $1493);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1495 = self.idx;
                                var $1496 = self.code;
                                var $1497 = self.err;
                                var $1498 = Parser$Reply$error$($1495, $1496, $1497);
                                var $1494 = $1498;
                                break;
                            case 'Parser.Reply.value':
                                var $1499 = self.idx;
                                var $1500 = self.code;
                                var $1501 = self.val;
                                var self = Kind$Parser$text$("=", $1499, $1500);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1503 = self.idx;
                                        var $1504 = self.code;
                                        var $1505 = self.err;
                                        var $1506 = Parser$Reply$error$($1503, $1504, $1505);
                                        var $1502 = $1506;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1507 = self.idx;
                                        var $1508 = self.code;
                                        var self = Kind$Parser$text$("for ", $1507, $1508);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1510 = self.idx;
                                                var $1511 = self.code;
                                                var $1512 = self.err;
                                                var $1513 = Parser$Reply$error$($1510, $1511, $1512);
                                                var $1509 = $1513;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1514 = self.idx;
                                                var $1515 = self.code;
                                                var self = Kind$Parser$name1$($1514, $1515);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1517 = self.idx;
                                                        var $1518 = self.code;
                                                        var $1519 = self.err;
                                                        var $1520 = Parser$Reply$error$($1517, $1518, $1519);
                                                        var $1516 = $1520;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1521 = self.idx;
                                                        var $1522 = self.code;
                                                        var $1523 = self.val;
                                                        var self = Kind$Parser$text$("from", $1521, $1522);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1525 = self.idx;
                                                                var $1526 = self.code;
                                                                var $1527 = self.err;
                                                                var $1528 = Parser$Reply$error$($1525, $1526, $1527);
                                                                var $1524 = $1528;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1529 = self.idx;
                                                                var $1530 = self.code;
                                                                var self = Kind$Parser$term$($1529, $1530);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1532 = self.idx;
                                                                        var $1533 = self.code;
                                                                        var $1534 = self.err;
                                                                        var $1535 = Parser$Reply$error$($1532, $1533, $1534);
                                                                        var $1531 = $1535;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1536 = self.idx;
                                                                        var $1537 = self.code;
                                                                        var $1538 = self.val;
                                                                        var self = Kind$Parser$text$("to", $1536, $1537);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1540 = self.idx;
                                                                                var $1541 = self.code;
                                                                                var $1542 = self.err;
                                                                                var $1543 = Parser$Reply$error$($1540, $1541, $1542);
                                                                                var $1539 = $1543;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1544 = self.idx;
                                                                                var $1545 = self.code;
                                                                                var self = Kind$Parser$term$($1544, $1545);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1547 = self.idx;
                                                                                        var $1548 = self.code;
                                                                                        var $1549 = self.err;
                                                                                        var $1550 = Parser$Reply$error$($1547, $1548, $1549);
                                                                                        var $1546 = $1550;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1551 = self.idx;
                                                                                        var $1552 = self.code;
                                                                                        var $1553 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1551, $1552);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1555 = self.idx;
                                                                                                var $1556 = self.code;
                                                                                                var $1557 = self.err;
                                                                                                var $1558 = Parser$Reply$error$($1555, $1556, $1557);
                                                                                                var $1554 = $1558;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1559 = self.idx;
                                                                                                var $1560 = self.code;
                                                                                                var self = Kind$Parser$term$($1559, $1560);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1562 = self.idx;
                                                                                                        var $1563 = self.code;
                                                                                                        var $1564 = self.err;
                                                                                                        var $1565 = Parser$Reply$error$($1562, $1563, $1564);
                                                                                                        var $1561 = $1565;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1566 = self.idx;
                                                                                                        var $1567 = self.code;
                                                                                                        var $1568 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1566, $1567);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1570 = self.idx;
                                                                                                                var $1571 = self.code;
                                                                                                                var $1572 = self.err;
                                                                                                                var $1573 = Parser$Reply$error$($1570, $1571, $1572);
                                                                                                                var $1569 = $1573;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1574 = self.idx;
                                                                                                                var $1575 = self.code;
                                                                                                                var self = Kind$Parser$term$($1574, $1575);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1577 = self.idx;
                                                                                                                        var $1578 = self.code;
                                                                                                                        var $1579 = self.err;
                                                                                                                        var $1580 = Parser$Reply$error$($1577, $1578, $1579);
                                                                                                                        var $1576 = $1580;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1581 = self.idx;
                                                                                                                        var $1582 = self.code;
                                                                                                                        var $1583 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1486, $1581, $1582);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1585 = self.idx;
                                                                                                                                var $1586 = self.code;
                                                                                                                                var $1587 = self.err;
                                                                                                                                var $1588 = Parser$Reply$error$($1585, $1586, $1587);
                                                                                                                                var $1584 = $1588;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1589 = self.idx;
                                                                                                                                var $1590 = self.code;
                                                                                                                                var $1591 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($1501));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1538);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1553);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($1523, (_e$53 => {
                                                                                                                                    var $1593 = Kind$Term$lam$($1501, (_s$54 => {
                                                                                                                                        var $1594 = $1568;
                                                                                                                                        return $1594;
                                                                                                                                    }));
                                                                                                                                    return $1593;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($1501, _term$54, (_x$55 => {
                                                                                                                                    var $1595 = $1583;
                                                                                                                                    return $1595;
                                                                                                                                }));
                                                                                                                                var $1592 = Parser$Reply$value$($1589, $1590, Kind$Term$ori$($1591, _term$55));
                                                                                                                                var $1584 = $1592;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1576 = $1584;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1569 = $1576;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1561 = $1569;
                                                                                                        break;
                                                                                                };
                                                                                                var $1554 = $1561;
                                                                                                break;
                                                                                        };
                                                                                        var $1546 = $1554;
                                                                                        break;
                                                                                };
                                                                                var $1539 = $1546;
                                                                                break;
                                                                        };
                                                                        var $1531 = $1539;
                                                                        break;
                                                                };
                                                                var $1524 = $1531;
                                                                break;
                                                        };
                                                        var $1516 = $1524;
                                                        break;
                                                };
                                                var $1509 = $1516;
                                                break;
                                        };
                                        var $1502 = $1509;
                                        break;
                                };
                                var $1494 = $1502;
                                break;
                        };
                        var $1487 = $1494;
                        break;
                };
                var $1479 = $1487;
                break;
        };
        return $1479;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1597 = self.idx;
                var $1598 = self.code;
                var $1599 = self.err;
                var $1600 = Parser$Reply$error$($1597, $1598, $1599);
                var $1596 = $1600;
                break;
            case 'Parser.Reply.value':
                var $1601 = self.idx;
                var $1602 = self.code;
                var $1603 = self.val;
                var self = Kind$Parser$text$("for ", $1601, $1602);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1605 = self.idx;
                        var $1606 = self.code;
                        var $1607 = self.err;
                        var $1608 = Parser$Reply$error$($1605, $1606, $1607);
                        var $1604 = $1608;
                        break;
                    case 'Parser.Reply.value':
                        var $1609 = self.idx;
                        var $1610 = self.code;
                        var self = Kind$Parser$name1$($1609, $1610);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1612 = self.idx;
                                var $1613 = self.code;
                                var $1614 = self.err;
                                var $1615 = Parser$Reply$error$($1612, $1613, $1614);
                                var $1611 = $1615;
                                break;
                            case 'Parser.Reply.value':
                                var $1616 = self.idx;
                                var $1617 = self.code;
                                var $1618 = self.val;
                                var self = Kind$Parser$text$("from", $1616, $1617);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1620 = self.idx;
                                        var $1621 = self.code;
                                        var $1622 = self.err;
                                        var $1623 = Parser$Reply$error$($1620, $1621, $1622);
                                        var $1619 = $1623;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1624 = self.idx;
                                        var $1625 = self.code;
                                        var self = Kind$Parser$term$($1624, $1625);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1627 = self.idx;
                                                var $1628 = self.code;
                                                var $1629 = self.err;
                                                var $1630 = Parser$Reply$error$($1627, $1628, $1629);
                                                var $1626 = $1630;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1631 = self.idx;
                                                var $1632 = self.code;
                                                var $1633 = self.val;
                                                var self = Kind$Parser$text$("to", $1631, $1632);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1635 = self.idx;
                                                        var $1636 = self.code;
                                                        var $1637 = self.err;
                                                        var $1638 = Parser$Reply$error$($1635, $1636, $1637);
                                                        var $1634 = $1638;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1639 = self.idx;
                                                        var $1640 = self.code;
                                                        var self = Kind$Parser$term$($1639, $1640);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1642 = self.idx;
                                                                var $1643 = self.code;
                                                                var $1644 = self.err;
                                                                var $1645 = Parser$Reply$error$($1642, $1643, $1644);
                                                                var $1641 = $1645;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1646 = self.idx;
                                                                var $1647 = self.code;
                                                                var $1648 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1646, $1647);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1650 = self.idx;
                                                                        var $1651 = self.code;
                                                                        var $1652 = self.err;
                                                                        var $1653 = Parser$Reply$error$($1650, $1651, $1652);
                                                                        var $1649 = $1653;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1654 = self.idx;
                                                                        var $1655 = self.code;
                                                                        var self = Kind$Parser$name1$($1654, $1655);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1657 = self.idx;
                                                                                var $1658 = self.code;
                                                                                var $1659 = self.err;
                                                                                var $1660 = Parser$Reply$error$($1657, $1658, $1659);
                                                                                var $1656 = $1660;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1661 = self.idx;
                                                                                var $1662 = self.code;
                                                                                var $1663 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1661, $1662);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1665 = self.idx;
                                                                                        var $1666 = self.code;
                                                                                        var $1667 = self.err;
                                                                                        var $1668 = Parser$Reply$error$($1665, $1666, $1667);
                                                                                        var $1664 = $1668;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1669 = self.idx;
                                                                                        var $1670 = self.code;
                                                                                        var self = Kind$Parser$term$($1669, $1670);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1672 = self.idx;
                                                                                                var $1673 = self.code;
                                                                                                var $1674 = self.err;
                                                                                                var $1675 = Parser$Reply$error$($1672, $1673, $1674);
                                                                                                var $1671 = $1675;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1676 = self.idx;
                                                                                                var $1677 = self.code;
                                                                                                var $1678 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1676, $1677);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1680 = self.idx;
                                                                                                        var $1681 = self.code;
                                                                                                        var $1682 = self.err;
                                                                                                        var $1683 = Parser$Reply$error$($1680, $1681, $1682);
                                                                                                        var $1679 = $1683;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1684 = self.idx;
                                                                                                        var $1685 = self.code;
                                                                                                        var self = Kind$Parser$term$($1684, $1685);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1687 = self.idx;
                                                                                                                var $1688 = self.code;
                                                                                                                var $1689 = self.err;
                                                                                                                var $1690 = Parser$Reply$error$($1687, $1688, $1689);
                                                                                                                var $1686 = $1690;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1691 = self.idx;
                                                                                                                var $1692 = self.code;
                                                                                                                var $1693 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1603, $1691, $1692);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1695 = self.idx;
                                                                                                                        var $1696 = self.code;
                                                                                                                        var $1697 = self.err;
                                                                                                                        var $1698 = Parser$Reply$error$($1695, $1696, $1697);
                                                                                                                        var $1694 = $1698;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1699 = self.idx;
                                                                                                                        var $1700 = self.code;
                                                                                                                        var $1701 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1663));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1633);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1648);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1618, (_e$50 => {
                                                                                                                            var $1703 = Kind$Term$lam$($1663, (_s$51 => {
                                                                                                                                var $1704 = $1678;
                                                                                                                                return $1704;
                                                                                                                            }));
                                                                                                                            return $1703;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1663, _term$51, (_x$52 => {
                                                                                                                            var $1705 = $1693;
                                                                                                                            return $1705;
                                                                                                                        }));
                                                                                                                        var $1702 = Parser$Reply$value$($1699, $1700, Kind$Term$ori$($1701, _term$52));
                                                                                                                        var $1694 = $1702;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1686 = $1694;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1679 = $1686;
                                                                                                        break;
                                                                                                };
                                                                                                var $1671 = $1679;
                                                                                                break;
                                                                                        };
                                                                                        var $1664 = $1671;
                                                                                        break;
                                                                                };
                                                                                var $1656 = $1664;
                                                                                break;
                                                                        };
                                                                        var $1649 = $1656;
                                                                        break;
                                                                };
                                                                var $1641 = $1649;
                                                                break;
                                                        };
                                                        var $1634 = $1641;
                                                        break;
                                                };
                                                var $1626 = $1634;
                                                break;
                                        };
                                        var $1619 = $1626;
                                        break;
                                };
                                var $1611 = $1619;
                                break;
                        };
                        var $1604 = $1611;
                        break;
                };
                var $1596 = $1604;
                break;
        };
        return $1596;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1707 = self.idx;
                var $1708 = self.code;
                var $1709 = self.err;
                var $1710 = Parser$Reply$error$($1707, $1708, $1709);
                var $1706 = $1710;
                break;
            case 'Parser.Reply.value':
                var $1711 = self.idx;
                var $1712 = self.code;
                var $1713 = self.val;
                var self = Kind$Parser$text$("let ", $1711, $1712);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1715 = self.idx;
                        var $1716 = self.code;
                        var $1717 = self.err;
                        var $1718 = Parser$Reply$error$($1715, $1716, $1717);
                        var $1714 = $1718;
                        break;
                    case 'Parser.Reply.value':
                        var $1719 = self.idx;
                        var $1720 = self.code;
                        var self = Kind$Parser$name1$($1719, $1720);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1722 = self.idx;
                                var $1723 = self.code;
                                var $1724 = self.err;
                                var $1725 = Parser$Reply$error$($1722, $1723, $1724);
                                var $1721 = $1725;
                                break;
                            case 'Parser.Reply.value':
                                var $1726 = self.idx;
                                var $1727 = self.code;
                                var $1728 = self.val;
                                var self = Kind$Parser$text$("=", $1726, $1727);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1730 = self.idx;
                                        var $1731 = self.code;
                                        var $1732 = self.err;
                                        var $1733 = Parser$Reply$error$($1730, $1731, $1732);
                                        var $1729 = $1733;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1734 = self.idx;
                                        var $1735 = self.code;
                                        var self = Kind$Parser$text$("for ", $1734, $1735);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1737 = self.idx;
                                                var $1738 = self.code;
                                                var $1739 = self.err;
                                                var $1740 = Parser$Reply$error$($1737, $1738, $1739);
                                                var $1736 = $1740;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1741 = self.idx;
                                                var $1742 = self.code;
                                                var self = Kind$Parser$name1$($1741, $1742);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1744 = self.idx;
                                                        var $1745 = self.code;
                                                        var $1746 = self.err;
                                                        var $1747 = Parser$Reply$error$($1744, $1745, $1746);
                                                        var $1743 = $1747;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1748 = self.idx;
                                                        var $1749 = self.code;
                                                        var $1750 = self.val;
                                                        var self = Kind$Parser$text$("in", $1748, $1749);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1752 = self.idx;
                                                                var $1753 = self.code;
                                                                var $1754 = self.err;
                                                                var $1755 = Parser$Reply$error$($1752, $1753, $1754);
                                                                var $1751 = $1755;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1756 = self.idx;
                                                                var $1757 = self.code;
                                                                var self = Kind$Parser$term$($1756, $1757);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1759 = self.idx;
                                                                        var $1760 = self.code;
                                                                        var $1761 = self.err;
                                                                        var $1762 = Parser$Reply$error$($1759, $1760, $1761);
                                                                        var $1758 = $1762;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1763 = self.idx;
                                                                        var $1764 = self.code;
                                                                        var $1765 = self.val;
                                                                        var self = Kind$Parser$text$(":", $1763, $1764);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1767 = self.idx;
                                                                                var $1768 = self.code;
                                                                                var $1769 = self.err;
                                                                                var $1770 = Parser$Reply$error$($1767, $1768, $1769);
                                                                                var $1766 = $1770;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1771 = self.idx;
                                                                                var $1772 = self.code;
                                                                                var self = Kind$Parser$term$($1771, $1772);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1774 = self.idx;
                                                                                        var $1775 = self.code;
                                                                                        var $1776 = self.err;
                                                                                        var $1777 = Parser$Reply$error$($1774, $1775, $1776);
                                                                                        var $1773 = $1777;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1778 = self.idx;
                                                                                        var $1779 = self.code;
                                                                                        var $1780 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1778, $1779);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1782 = self.idx;
                                                                                                var $1783 = self.code;
                                                                                                var $1784 = self.err;
                                                                                                var $1785 = Parser$Reply$error$($1782, $1783, $1784);
                                                                                                var $1781 = $1785;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1786 = self.idx;
                                                                                                var $1787 = self.code;
                                                                                                var self = Kind$Parser$term$($1786, $1787);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1789 = self.idx;
                                                                                                        var $1790 = self.code;
                                                                                                        var $1791 = self.err;
                                                                                                        var $1792 = Parser$Reply$error$($1789, $1790, $1791);
                                                                                                        var $1788 = $1792;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1793 = self.idx;
                                                                                                        var $1794 = self.code;
                                                                                                        var $1795 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1713, $1793, $1794);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1797 = self.idx;
                                                                                                                var $1798 = self.code;
                                                                                                                var $1799 = self.err;
                                                                                                                var $1800 = Parser$Reply$error$($1797, $1798, $1799);
                                                                                                                var $1796 = $1800;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1801 = self.idx;
                                                                                                                var $1802 = self.code;
                                                                                                                var $1803 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $1765);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($1728));
                                                                                                                var _lamb$47 = Kind$Term$lam$($1750, (_i$47 => {
                                                                                                                    var $1805 = Kind$Term$lam$($1728, (_x$48 => {
                                                                                                                        var $1806 = $1780;
                                                                                                                        return $1806;
                                                                                                                    }));
                                                                                                                    return $1805;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($1728, _term$48, (_x$49 => {
                                                                                                                    var $1807 = $1795;
                                                                                                                    return $1807;
                                                                                                                }));
                                                                                                                var $1804 = Parser$Reply$value$($1801, $1802, Kind$Term$ori$($1803, _term$49));
                                                                                                                var $1796 = $1804;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1788 = $1796;
                                                                                                        break;
                                                                                                };
                                                                                                var $1781 = $1788;
                                                                                                break;
                                                                                        };
                                                                                        var $1773 = $1781;
                                                                                        break;
                                                                                };
                                                                                var $1766 = $1773;
                                                                                break;
                                                                        };
                                                                        var $1758 = $1766;
                                                                        break;
                                                                };
                                                                var $1751 = $1758;
                                                                break;
                                                        };
                                                        var $1743 = $1751;
                                                        break;
                                                };
                                                var $1736 = $1743;
                                                break;
                                        };
                                        var $1729 = $1736;
                                        break;
                                };
                                var $1721 = $1729;
                                break;
                        };
                        var $1714 = $1721;
                        break;
                };
                var $1706 = $1714;
                break;
        };
        return $1706;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1809 = self.idx;
                var $1810 = self.code;
                var $1811 = self.err;
                var $1812 = Parser$Reply$error$($1809, $1810, $1811);
                var $1808 = $1812;
                break;
            case 'Parser.Reply.value':
                var $1813 = self.idx;
                var $1814 = self.code;
                var $1815 = self.val;
                var self = Kind$Parser$text$("for ", $1813, $1814);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1817 = self.idx;
                        var $1818 = self.code;
                        var $1819 = self.err;
                        var $1820 = Parser$Reply$error$($1817, $1818, $1819);
                        var $1816 = $1820;
                        break;
                    case 'Parser.Reply.value':
                        var $1821 = self.idx;
                        var $1822 = self.code;
                        var self = Kind$Parser$name1$($1821, $1822);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1824 = self.idx;
                                var $1825 = self.code;
                                var $1826 = self.err;
                                var $1827 = Parser$Reply$error$($1824, $1825, $1826);
                                var $1823 = $1827;
                                break;
                            case 'Parser.Reply.value':
                                var $1828 = self.idx;
                                var $1829 = self.code;
                                var $1830 = self.val;
                                var self = Kind$Parser$text$("in", $1828, $1829);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1832 = self.idx;
                                        var $1833 = self.code;
                                        var $1834 = self.err;
                                        var $1835 = Parser$Reply$error$($1832, $1833, $1834);
                                        var $1831 = $1835;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1836 = self.idx;
                                        var $1837 = self.code;
                                        var self = Kind$Parser$term$($1836, $1837);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1839 = self.idx;
                                                var $1840 = self.code;
                                                var $1841 = self.err;
                                                var $1842 = Parser$Reply$error$($1839, $1840, $1841);
                                                var $1838 = $1842;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1843 = self.idx;
                                                var $1844 = self.code;
                                                var $1845 = self.val;
                                                var self = Kind$Parser$text$("with ", $1843, $1844);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1847 = self.idx;
                                                        var $1848 = self.code;
                                                        var $1849 = self.err;
                                                        var $1850 = Parser$Reply$error$($1847, $1848, $1849);
                                                        var $1846 = $1850;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1851 = self.idx;
                                                        var $1852 = self.code;
                                                        var self = Kind$Parser$name1$($1851, $1852);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1854 = self.idx;
                                                                var $1855 = self.code;
                                                                var $1856 = self.err;
                                                                var $1857 = Parser$Reply$error$($1854, $1855, $1856);
                                                                var $1853 = $1857;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1858 = self.idx;
                                                                var $1859 = self.code;
                                                                var $1860 = self.val;
                                                                var self = Kind$Parser$text$(":", $1858, $1859);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1862 = self.idx;
                                                                        var $1863 = self.code;
                                                                        var $1864 = self.err;
                                                                        var $1865 = Parser$Reply$error$($1862, $1863, $1864);
                                                                        var $1861 = $1865;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1866 = self.idx;
                                                                        var $1867 = self.code;
                                                                        var self = Kind$Parser$term$($1866, $1867);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1869 = self.idx;
                                                                                var $1870 = self.code;
                                                                                var $1871 = self.err;
                                                                                var $1872 = Parser$Reply$error$($1869, $1870, $1871);
                                                                                var $1868 = $1872;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1873 = self.idx;
                                                                                var $1874 = self.code;
                                                                                var $1875 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1873, $1874);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1877 = self.idx;
                                                                                        var $1878 = self.code;
                                                                                        var $1879 = self.err;
                                                                                        var $1880 = Parser$Reply$error$($1877, $1878, $1879);
                                                                                        var $1876 = $1880;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1881 = self.idx;
                                                                                        var $1882 = self.code;
                                                                                        var self = Kind$Parser$term$($1881, $1882);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1884 = self.idx;
                                                                                                var $1885 = self.code;
                                                                                                var $1886 = self.err;
                                                                                                var $1887 = Parser$Reply$error$($1884, $1885, $1886);
                                                                                                var $1883 = $1887;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1888 = self.idx;
                                                                                                var $1889 = self.code;
                                                                                                var $1890 = self.val;
                                                                                                var self = Kind$Parser$stop$($1815, $1888, $1889);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1892 = self.idx;
                                                                                                        var $1893 = self.code;
                                                                                                        var $1894 = self.err;
                                                                                                        var $1895 = Parser$Reply$error$($1892, $1893, $1894);
                                                                                                        var $1891 = $1895;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1896 = self.idx;
                                                                                                        var $1897 = self.code;
                                                                                                        var $1898 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $1845);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($1860));
                                                                                                        var _lamb$44 = Kind$Term$lam$($1830, (_i$44 => {
                                                                                                            var $1900 = Kind$Term$lam$($1860, (_x$45 => {
                                                                                                                var $1901 = $1875;
                                                                                                                return $1901;
                                                                                                            }));
                                                                                                            return $1900;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($1860, _term$45, (_x$46 => {
                                                                                                            var $1902 = $1890;
                                                                                                            return $1902;
                                                                                                        }));
                                                                                                        var $1899 = Parser$Reply$value$($1896, $1897, Kind$Term$ori$($1898, _term$46));
                                                                                                        var $1891 = $1899;
                                                                                                        break;
                                                                                                };
                                                                                                var $1883 = $1891;
                                                                                                break;
                                                                                        };
                                                                                        var $1876 = $1883;
                                                                                        break;
                                                                                };
                                                                                var $1868 = $1876;
                                                                                break;
                                                                        };
                                                                        var $1861 = $1868;
                                                                        break;
                                                                };
                                                                var $1853 = $1861;
                                                                break;
                                                        };
                                                        var $1846 = $1853;
                                                        break;
                                                };
                                                var $1838 = $1846;
                                                break;
                                        };
                                        var $1831 = $1838;
                                        break;
                                };
                                var $1823 = $1831;
                                break;
                        };
                        var $1816 = $1823;
                        break;
                };
                var $1808 = $1816;
                break;
        };
        return $1808;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1904 = self.idx;
                var $1905 = self.code;
                var $1906 = self.err;
                var $1907 = Parser$Reply$error$($1904, $1905, $1906);
                var $1903 = $1907;
                break;
            case 'Parser.Reply.value':
                var $1908 = self.idx;
                var $1909 = self.code;
                var $1910 = self.val;
                var self = Kind$Parser$text$("let ", $1908, $1909);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1912 = self.idx;
                        var $1913 = self.code;
                        var $1914 = self.err;
                        var $1915 = Parser$Reply$error$($1912, $1913, $1914);
                        var $1911 = $1915;
                        break;
                    case 'Parser.Reply.value':
                        var $1916 = self.idx;
                        var $1917 = self.code;
                        var self = Kind$Parser$name1$($1916, $1917);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1919 = self.idx;
                                var $1920 = self.code;
                                var $1921 = self.err;
                                var $1922 = Parser$Reply$error$($1919, $1920, $1921);
                                var $1918 = $1922;
                                break;
                            case 'Parser.Reply.value':
                                var $1923 = self.idx;
                                var $1924 = self.code;
                                var $1925 = self.val;
                                var self = Kind$Parser$text$("=", $1923, $1924);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1927 = self.idx;
                                        var $1928 = self.code;
                                        var $1929 = self.err;
                                        var $1930 = Parser$Reply$error$($1927, $1928, $1929);
                                        var $1926 = $1930;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1931 = self.idx;
                                        var $1932 = self.code;
                                        var self = Kind$Parser$text$("while ", $1931, $1932);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1934 = self.idx;
                                                var $1935 = self.code;
                                                var $1936 = self.err;
                                                var $1937 = Parser$Reply$error$($1934, $1935, $1936);
                                                var $1933 = $1937;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1938 = self.idx;
                                                var $1939 = self.code;
                                                var self = Kind$Parser$term$($1938, $1939);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1941 = self.idx;
                                                        var $1942 = self.code;
                                                        var $1943 = self.err;
                                                        var $1944 = Parser$Reply$error$($1941, $1942, $1943);
                                                        var $1940 = $1944;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1945 = self.idx;
                                                        var $1946 = self.code;
                                                        var $1947 = self.val;
                                                        var self = Kind$Parser$text$(":", $1945, $1946);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1949 = self.idx;
                                                                var $1950 = self.code;
                                                                var $1951 = self.err;
                                                                var $1952 = Parser$Reply$error$($1949, $1950, $1951);
                                                                var $1948 = $1952;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1953 = self.idx;
                                                                var $1954 = self.code;
                                                                var self = Kind$Parser$term$($1953, $1954);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1956 = self.idx;
                                                                        var $1957 = self.code;
                                                                        var $1958 = self.err;
                                                                        var $1959 = Parser$Reply$error$($1956, $1957, $1958);
                                                                        var $1955 = $1959;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1960 = self.idx;
                                                                        var $1961 = self.code;
                                                                        var $1962 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1960, $1961);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1964 = self.idx;
                                                                                var $1965 = self.code;
                                                                                var $1966 = self.err;
                                                                                var $1967 = Parser$Reply$error$($1964, $1965, $1966);
                                                                                var $1963 = $1967;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1968 = self.idx;
                                                                                var $1969 = self.code;
                                                                                var self = Kind$Parser$term$($1968, $1969);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1971 = self.idx;
                                                                                        var $1972 = self.code;
                                                                                        var $1973 = self.err;
                                                                                        var $1974 = Parser$Reply$error$($1971, $1972, $1973);
                                                                                        var $1970 = $1974;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1975 = self.idx;
                                                                                        var $1976 = self.code;
                                                                                        var $1977 = self.val;
                                                                                        var self = Kind$Parser$stop$($1910, $1975, $1976);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1979 = self.idx;
                                                                                                var $1980 = self.code;
                                                                                                var $1981 = self.err;
                                                                                                var $1982 = Parser$Reply$error$($1979, $1980, $1981);
                                                                                                var $1978 = $1982;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1983 = self.idx;
                                                                                                var $1984 = self.code;
                                                                                                var $1985 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($1925));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($1925, (_s$39 => {
                                                                                                    var $1987 = $1947;
                                                                                                    return $1987;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($1925, (_s$40 => {
                                                                                                    var $1988 = $1962;
                                                                                                    return $1988;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($1925, _term$40, (_x$41 => {
                                                                                                    var $1989 = $1977;
                                                                                                    return $1989;
                                                                                                }));
                                                                                                var $1986 = Parser$Reply$value$($1983, $1984, Kind$Term$ori$($1985, _term$41));
                                                                                                var $1978 = $1986;
                                                                                                break;
                                                                                        };
                                                                                        var $1970 = $1978;
                                                                                        break;
                                                                                };
                                                                                var $1963 = $1970;
                                                                                break;
                                                                        };
                                                                        var $1955 = $1963;
                                                                        break;
                                                                };
                                                                var $1948 = $1955;
                                                                break;
                                                        };
                                                        var $1940 = $1948;
                                                        break;
                                                };
                                                var $1933 = $1940;
                                                break;
                                        };
                                        var $1926 = $1933;
                                        break;
                                };
                                var $1918 = $1926;
                                break;
                        };
                        var $1911 = $1918;
                        break;
                };
                var $1903 = $1911;
                break;
        };
        return $1903;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1991 = self.idx;
                var $1992 = self.code;
                var $1993 = self.err;
                var $1994 = Parser$Reply$error$($1991, $1992, $1993);
                var $1990 = $1994;
                break;
            case 'Parser.Reply.value':
                var $1995 = self.idx;
                var $1996 = self.code;
                var $1997 = self.val;
                var self = Kind$Parser$text$("while ", $1995, $1996);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1999 = self.idx;
                        var $2000 = self.code;
                        var $2001 = self.err;
                        var $2002 = Parser$Reply$error$($1999, $2000, $2001);
                        var $1998 = $2002;
                        break;
                    case 'Parser.Reply.value':
                        var $2003 = self.idx;
                        var $2004 = self.code;
                        var self = Kind$Parser$term$($2003, $2004);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2006 = self.idx;
                                var $2007 = self.code;
                                var $2008 = self.err;
                                var $2009 = Parser$Reply$error$($2006, $2007, $2008);
                                var $2005 = $2009;
                                break;
                            case 'Parser.Reply.value':
                                var $2010 = self.idx;
                                var $2011 = self.code;
                                var $2012 = self.val;
                                var self = Kind$Parser$text$("with ", $2010, $2011);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2014 = self.idx;
                                        var $2015 = self.code;
                                        var $2016 = self.err;
                                        var $2017 = Parser$Reply$error$($2014, $2015, $2016);
                                        var $2013 = $2017;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2018 = self.idx;
                                        var $2019 = self.code;
                                        var self = Kind$Parser$name1$($2018, $2019);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2021 = self.idx;
                                                var $2022 = self.code;
                                                var $2023 = self.err;
                                                var $2024 = Parser$Reply$error$($2021, $2022, $2023);
                                                var $2020 = $2024;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2025 = self.idx;
                                                var $2026 = self.code;
                                                var $2027 = self.val;
                                                var self = Kind$Parser$text$(":", $2025, $2026);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2029 = self.idx;
                                                        var $2030 = self.code;
                                                        var $2031 = self.err;
                                                        var $2032 = Parser$Reply$error$($2029, $2030, $2031);
                                                        var $2028 = $2032;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2033 = self.idx;
                                                        var $2034 = self.code;
                                                        var self = Kind$Parser$term$($2033, $2034);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2036 = self.idx;
                                                                var $2037 = self.code;
                                                                var $2038 = self.err;
                                                                var $2039 = Parser$Reply$error$($2036, $2037, $2038);
                                                                var $2035 = $2039;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2040 = self.idx;
                                                                var $2041 = self.code;
                                                                var $2042 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2040, $2041);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2044 = self.idx;
                                                                        var $2045 = self.code;
                                                                        var $2046 = self.err;
                                                                        var $2047 = Parser$Reply$error$($2044, $2045, $2046);
                                                                        var $2043 = $2047;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2048 = self.idx;
                                                                        var $2049 = self.code;
                                                                        var self = Kind$Parser$term$($2048, $2049);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2051 = self.idx;
                                                                                var $2052 = self.code;
                                                                                var $2053 = self.err;
                                                                                var $2054 = Parser$Reply$error$($2051, $2052, $2053);
                                                                                var $2050 = $2054;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2055 = self.idx;
                                                                                var $2056 = self.code;
                                                                                var $2057 = self.val;
                                                                                var self = Kind$Parser$stop$($1997, $2055, $2056);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2059 = self.idx;
                                                                                        var $2060 = self.code;
                                                                                        var $2061 = self.err;
                                                                                        var $2062 = Parser$Reply$error$($2059, $2060, $2061);
                                                                                        var $2058 = $2062;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2063 = self.idx;
                                                                                        var $2064 = self.code;
                                                                                        var $2065 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($2027));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($2027, (_s$36 => {
                                                                                            var $2067 = $2012;
                                                                                            return $2067;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($2027, (_s$37 => {
                                                                                            var $2068 = $2042;
                                                                                            return $2068;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($2027, _term$37, (_x$38 => {
                                                                                            var $2069 = $2057;
                                                                                            return $2069;
                                                                                        }));
                                                                                        var $2066 = Parser$Reply$value$($2063, $2064, Kind$Term$ori$($2065, _term$38));
                                                                                        var $2058 = $2066;
                                                                                        break;
                                                                                };
                                                                                var $2050 = $2058;
                                                                                break;
                                                                        };
                                                                        var $2043 = $2050;
                                                                        break;
                                                                };
                                                                var $2035 = $2043;
                                                                break;
                                                        };
                                                        var $2028 = $2035;
                                                        break;
                                                };
                                                var $2020 = $2028;
                                                break;
                                        };
                                        var $2013 = $2020;
                                        break;
                                };
                                var $2005 = $2013;
                                break;
                        };
                        var $1998 = $2005;
                        break;
                };
                var $1990 = $1998;
                break;
        };
        return $1990;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2071 = self.idx;
                var $2072 = self.code;
                var $2073 = self.err;
                var $2074 = Parser$Reply$error$($2071, $2072, $2073);
                var $2070 = $2074;
                break;
            case 'Parser.Reply.value':
                var $2075 = self.idx;
                var $2076 = self.code;
                var $2077 = self.val;
                var self = Kind$Parser$text$("let ", $2075, $2076);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2079 = self.idx;
                        var $2080 = self.code;
                        var $2081 = self.err;
                        var $2082 = Parser$Reply$error$($2079, $2080, $2081);
                        var $2078 = $2082;
                        break;
                    case 'Parser.Reply.value':
                        var $2083 = self.idx;
                        var $2084 = self.code;
                        var self = Kind$Parser$name$($2083, $2084);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2086 = self.idx;
                                var $2087 = self.code;
                                var $2088 = self.err;
                                var $2089 = Parser$Reply$error$($2086, $2087, $2088);
                                var $2085 = $2089;
                                break;
                            case 'Parser.Reply.value':
                                var $2090 = self.idx;
                                var $2091 = self.code;
                                var $2092 = self.val;
                                var self = Kind$Parser$text$("=", $2090, $2091);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2094 = self.idx;
                                        var $2095 = self.code;
                                        var $2096 = self.err;
                                        var $2097 = Parser$Reply$error$($2094, $2095, $2096);
                                        var $2093 = $2097;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2098 = self.idx;
                                        var $2099 = self.code;
                                        var self = Kind$Parser$term$($2098, $2099);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2101 = self.idx;
                                                var $2102 = self.code;
                                                var $2103 = self.err;
                                                var $2104 = Parser$Reply$error$($2101, $2102, $2103);
                                                var $2100 = $2104;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2105 = self.idx;
                                                var $2106 = self.code;
                                                var $2107 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2105, $2106);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2109 = self.idx;
                                                        var $2110 = self.code;
                                                        var $2111 = self.err;
                                                        var $2112 = Parser$Reply$error$($2109, $2110, $2111);
                                                        var $2108 = $2112;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2113 = self.idx;
                                                        var $2114 = self.code;
                                                        var self = Kind$Parser$term$($2113, $2114);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2116 = self.idx;
                                                                var $2117 = self.code;
                                                                var $2118 = self.err;
                                                                var $2119 = Parser$Reply$error$($2116, $2117, $2118);
                                                                var $2115 = $2119;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2120 = self.idx;
                                                                var $2121 = self.code;
                                                                var $2122 = self.val;
                                                                var self = Kind$Parser$stop$($2077, $2120, $2121);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2124 = self.idx;
                                                                        var $2125 = self.code;
                                                                        var $2126 = self.err;
                                                                        var $2127 = Parser$Reply$error$($2124, $2125, $2126);
                                                                        var $2123 = $2127;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2128 = self.idx;
                                                                        var $2129 = self.code;
                                                                        var $2130 = self.val;
                                                                        var $2131 = Parser$Reply$value$($2128, $2129, Kind$Term$ori$($2130, Kind$Term$let$($2092, $2107, (_x$27 => {
                                                                            var $2132 = $2122;
                                                                            return $2132;
                                                                        }))));
                                                                        var $2123 = $2131;
                                                                        break;
                                                                };
                                                                var $2115 = $2123;
                                                                break;
                                                        };
                                                        var $2108 = $2115;
                                                        break;
                                                };
                                                var $2100 = $2108;
                                                break;
                                        };
                                        var $2093 = $2100;
                                        break;
                                };
                                var $2085 = $2093;
                                break;
                        };
                        var $2078 = $2085;
                        break;
                };
                var $2070 = $2078;
                break;
        };
        return $2070;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2134 = self.idx;
                var $2135 = self.code;
                var $2136 = self.err;
                var $2137 = Parser$Reply$error$($2134, $2135, $2136);
                var $2133 = $2137;
                break;
            case 'Parser.Reply.value':
                var $2138 = self.idx;
                var $2139 = self.code;
                var $2140 = self.val;
                var self = Kind$Parser$name$($2138, $2139);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2142 = self.idx;
                        var $2143 = self.code;
                        var $2144 = self.err;
                        var $2145 = Parser$Reply$error$($2142, $2143, $2144);
                        var $2141 = $2145;
                        break;
                    case 'Parser.Reply.value':
                        var $2146 = self.idx;
                        var $2147 = self.code;
                        var $2148 = self.val;
                        var self = Kind$Parser$text$("= ", $2146, $2147);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2150 = self.idx;
                                var $2151 = self.code;
                                var $2152 = self.err;
                                var $2153 = Parser$Reply$error$($2150, $2151, $2152);
                                var $2149 = $2153;
                                break;
                            case 'Parser.Reply.value':
                                var $2154 = self.idx;
                                var $2155 = self.code;
                                var self = Kind$Parser$term$($2154, $2155);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2157 = self.idx;
                                        var $2158 = self.code;
                                        var $2159 = self.err;
                                        var $2160 = Parser$Reply$error$($2157, $2158, $2159);
                                        var $2156 = $2160;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2161 = self.idx;
                                        var $2162 = self.code;
                                        var $2163 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2161, $2162);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2165 = self.idx;
                                                var $2166 = self.code;
                                                var $2167 = self.err;
                                                var $2168 = Parser$Reply$error$($2165, $2166, $2167);
                                                var $2164 = $2168;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2169 = self.idx;
                                                var $2170 = self.code;
                                                var self = Kind$Parser$term$($2169, $2170);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2172 = self.idx;
                                                        var $2173 = self.code;
                                                        var $2174 = self.err;
                                                        var $2175 = Parser$Reply$error$($2172, $2173, $2174);
                                                        var $2171 = $2175;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2176 = self.idx;
                                                        var $2177 = self.code;
                                                        var $2178 = self.val;
                                                        var self = Kind$Parser$stop$($2140, $2176, $2177);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2180 = self.idx;
                                                                var $2181 = self.code;
                                                                var $2182 = self.err;
                                                                var $2183 = Parser$Reply$error$($2180, $2181, $2182);
                                                                var $2179 = $2183;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2184 = self.idx;
                                                                var $2185 = self.code;
                                                                var $2186 = self.val;
                                                                var $2187 = Parser$Reply$value$($2184, $2185, Kind$Term$ori$($2186, Kind$Term$let$($2148, $2163, (_x$24 => {
                                                                    var $2188 = $2178;
                                                                    return $2188;
                                                                }))));
                                                                var $2179 = $2187;
                                                                break;
                                                        };
                                                        var $2171 = $2179;
                                                        break;
                                                };
                                                var $2164 = $2171;
                                                break;
                                        };
                                        var $2156 = $2164;
                                        break;
                                };
                                var $2149 = $2156;
                                break;
                        };
                        var $2141 = $2149;
                        break;
                };
                var $2133 = $2141;
                break;
        };
        return $2133;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2190 = self.idx;
                var $2191 = self.code;
                var $2192 = self.err;
                var $2193 = Parser$Reply$error$($2190, $2191, $2192);
                var $2189 = $2193;
                break;
            case 'Parser.Reply.value':
                var $2194 = self.idx;
                var $2195 = self.code;
                var $2196 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $2194, $2195);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2198 = self.idx;
                        var $2199 = self.code;
                        var $2200 = self.err;
                        var $2201 = Parser$Reply$error$($2198, $2199, $2200);
                        var $2197 = $2201;
                        break;
                    case 'Parser.Reply.value':
                        var $2202 = self.idx;
                        var $2203 = self.code;
                        var self = Kind$Parser$text$("{", $2202, $2203);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2205 = self.idx;
                                var $2206 = self.code;
                                var $2207 = self.err;
                                var $2208 = Parser$Reply$error$($2205, $2206, $2207);
                                var $2204 = $2208;
                                break;
                            case 'Parser.Reply.value':
                                var $2209 = self.idx;
                                var $2210 = self.code;
                                var self = Kind$Parser$name$($2209, $2210);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2212 = self.idx;
                                        var $2213 = self.code;
                                        var $2214 = self.err;
                                        var $2215 = Parser$Reply$error$($2212, $2213, $2214);
                                        var $2211 = $2215;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2216 = self.idx;
                                        var $2217 = self.code;
                                        var $2218 = self.val;
                                        var self = Kind$Parser$text$(",", $2216, $2217);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2220 = self.idx;
                                                var $2221 = self.code;
                                                var $2222 = self.err;
                                                var $2223 = Parser$Reply$error$($2220, $2221, $2222);
                                                var $2219 = $2223;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2224 = self.idx;
                                                var $2225 = self.code;
                                                var self = Kind$Parser$name$($2224, $2225);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2227 = self.idx;
                                                        var $2228 = self.code;
                                                        var $2229 = self.err;
                                                        var $2230 = Parser$Reply$error$($2227, $2228, $2229);
                                                        var $2226 = $2230;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2231 = self.idx;
                                                        var $2232 = self.code;
                                                        var $2233 = self.val;
                                                        var self = Kind$Parser$text$("}", $2231, $2232);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2235 = self.idx;
                                                                var $2236 = self.code;
                                                                var $2237 = self.err;
                                                                var $2238 = Parser$Reply$error$($2235, $2236, $2237);
                                                                var $2234 = $2238;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2239 = self.idx;
                                                                var $2240 = self.code;
                                                                var self = Kind$Parser$text$("=", $2239, $2240);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2242 = self.idx;
                                                                        var $2243 = self.code;
                                                                        var $2244 = self.err;
                                                                        var $2245 = Parser$Reply$error$($2242, $2243, $2244);
                                                                        var $2241 = $2245;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2246 = self.idx;
                                                                        var $2247 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $2246, $2247);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2249 = self.idx;
                                                                                var $2250 = self.code;
                                                                                var $2251 = self.err;
                                                                                var $2252 = Parser$Reply$error$($2249, $2250, $2251);
                                                                                var $2248 = $2252;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2253 = self.idx;
                                                                                var $2254 = self.code;
                                                                                var self = Kind$Parser$term$($2253, $2254);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2256 = self.idx;
                                                                                        var $2257 = self.code;
                                                                                        var $2258 = self.err;
                                                                                        var $2259 = Parser$Reply$error$($2256, $2257, $2258);
                                                                                        var $2255 = $2259;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2260 = self.idx;
                                                                                        var $2261 = self.code;
                                                                                        var $2262 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $2260, $2261);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2264 = self.idx;
                                                                                                var $2265 = self.code;
                                                                                                var $2266 = self.err;
                                                                                                var $2267 = Parser$Reply$error$($2264, $2265, $2266);
                                                                                                var $2263 = $2267;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2268 = self.idx;
                                                                                                var $2269 = self.code;
                                                                                                var self = Kind$Parser$term$($2268, $2269);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2271 = self.idx;
                                                                                                        var $2272 = self.code;
                                                                                                        var $2273 = self.err;
                                                                                                        var $2274 = Parser$Reply$error$($2271, $2272, $2273);
                                                                                                        var $2270 = $2274;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2275 = self.idx;
                                                                                                        var $2276 = self.code;
                                                                                                        var $2277 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2275, $2276);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2279 = self.idx;
                                                                                                                var $2280 = self.code;
                                                                                                                var $2281 = self.err;
                                                                                                                var $2282 = Parser$Reply$error$($2279, $2280, $2281);
                                                                                                                var $2278 = $2282;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2283 = self.idx;
                                                                                                                var $2284 = self.code;
                                                                                                                var self = Kind$Parser$term$($2283, $2284);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2286 = self.idx;
                                                                                                                        var $2287 = self.code;
                                                                                                                        var $2288 = self.err;
                                                                                                                        var $2289 = Parser$Reply$error$($2286, $2287, $2288);
                                                                                                                        var $2285 = $2289;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2290 = self.idx;
                                                                                                                        var $2291 = self.code;
                                                                                                                        var $2292 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($2196, $2290, $2291);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $2294 = self.idx;
                                                                                                                                var $2295 = self.code;
                                                                                                                                var $2296 = self.err;
                                                                                                                                var $2297 = Parser$Reply$error$($2294, $2295, $2296);
                                                                                                                                var $2293 = $2297;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $2298 = self.idx;
                                                                                                                                var $2299 = self.code;
                                                                                                                                var $2300 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("x", (_x$48 => {
                                                                                                                                    var $2302 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $2302;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($2218));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($2233));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $2303 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($2218, (_x$58 => {
                                                                                                                                        var $2304 = Kind$Term$lam$($2233, (_y$59 => {
                                                                                                                                            var $2305 = $2262;
                                                                                                                                            return $2305;
                                                                                                                                        }));
                                                                                                                                        return $2304;
                                                                                                                                    })));
                                                                                                                                    return $2303;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $2306 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($2218, (_x$59 => {
                                                                                                                                        var $2307 = Kind$Term$lam$($2233, (_y$60 => {
                                                                                                                                            var $2308 = $2277;
                                                                                                                                            return $2308;
                                                                                                                                        }));
                                                                                                                                        return $2307;
                                                                                                                                    })));
                                                                                                                                    return $2306;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($2218, (_x$59 => {
                                                                                                                                    var $2309 = Kind$Term$lam$($2233, (_y$60 => {
                                                                                                                                        var $2310 = $2292;
                                                                                                                                        return $2310;
                                                                                                                                    }));
                                                                                                                                    return $2309;
                                                                                                                                })));
                                                                                                                                var $2301 = Parser$Reply$value$($2298, $2299, Kind$Term$ori$($2300, _term$59));
                                                                                                                                var $2293 = $2301;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $2285 = $2293;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2278 = $2285;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2270 = $2278;
                                                                                                        break;
                                                                                                };
                                                                                                var $2263 = $2270;
                                                                                                break;
                                                                                        };
                                                                                        var $2255 = $2263;
                                                                                        break;
                                                                                };
                                                                                var $2248 = $2255;
                                                                                break;
                                                                        };
                                                                        var $2241 = $2248;
                                                                        break;
                                                                };
                                                                var $2234 = $2241;
                                                                break;
                                                        };
                                                        var $2226 = $2234;
                                                        break;
                                                };
                                                var $2219 = $2226;
                                                break;
                                        };
                                        var $2211 = $2219;
                                        break;
                                };
                                var $2204 = $2211;
                                break;
                        };
                        var $2197 = $2204;
                        break;
                };
                var $2189 = $2197;
                break;
        };
        return $2189;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2312 = self.idx;
                var $2313 = self.code;
                var $2314 = self.err;
                var $2315 = Parser$Reply$error$($2312, $2313, $2314);
                var $2311 = $2315;
                break;
            case 'Parser.Reply.value':
                var $2316 = self.idx;
                var $2317 = self.code;
                var $2318 = self.val;
                var self = Kind$Parser$text$("while ", $2316, $2317);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2320 = self.idx;
                        var $2321 = self.code;
                        var $2322 = self.err;
                        var $2323 = Parser$Reply$error$($2320, $2321, $2322);
                        var $2319 = $2323;
                        break;
                    case 'Parser.Reply.value':
                        var $2324 = self.idx;
                        var $2325 = self.code;
                        var self = Kind$Parser$term$($2324, $2325);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2327 = self.idx;
                                var $2328 = self.code;
                                var $2329 = self.err;
                                var $2330 = Parser$Reply$error$($2327, $2328, $2329);
                                var $2326 = $2330;
                                break;
                            case 'Parser.Reply.value':
                                var $2331 = self.idx;
                                var $2332 = self.code;
                                var $2333 = self.val;
                                var self = Kind$Parser$text$("with ", $2331, $2332);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2335 = self.idx;
                                        var $2336 = self.code;
                                        var $2337 = self.err;
                                        var $2338 = Parser$Reply$error$($2335, $2336, $2337);
                                        var $2334 = $2338;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2339 = self.idx;
                                        var $2340 = self.code;
                                        var self = Kind$Parser$text$("{", $2339, $2340);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2342 = self.idx;
                                                var $2343 = self.code;
                                                var $2344 = self.err;
                                                var $2345 = Parser$Reply$error$($2342, $2343, $2344);
                                                var $2341 = $2345;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2346 = self.idx;
                                                var $2347 = self.code;
                                                var self = Kind$Parser$name$($2346, $2347);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2349 = self.idx;
                                                        var $2350 = self.code;
                                                        var $2351 = self.err;
                                                        var $2352 = Parser$Reply$error$($2349, $2350, $2351);
                                                        var $2348 = $2352;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2353 = self.idx;
                                                        var $2354 = self.code;
                                                        var $2355 = self.val;
                                                        var self = Kind$Parser$text$(",", $2353, $2354);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2357 = self.idx;
                                                                var $2358 = self.code;
                                                                var $2359 = self.err;
                                                                var $2360 = Parser$Reply$error$($2357, $2358, $2359);
                                                                var $2356 = $2360;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2361 = self.idx;
                                                                var $2362 = self.code;
                                                                var self = Kind$Parser$name$($2361, $2362);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2364 = self.idx;
                                                                        var $2365 = self.code;
                                                                        var $2366 = self.err;
                                                                        var $2367 = Parser$Reply$error$($2364, $2365, $2366);
                                                                        var $2363 = $2367;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2368 = self.idx;
                                                                        var $2369 = self.code;
                                                                        var $2370 = self.val;
                                                                        var self = Kind$Parser$text$("}", $2368, $2369);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2372 = self.idx;
                                                                                var $2373 = self.code;
                                                                                var $2374 = self.err;
                                                                                var $2375 = Parser$Reply$error$($2372, $2373, $2374);
                                                                                var $2371 = $2375;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2376 = self.idx;
                                                                                var $2377 = self.code;
                                                                                var self = Kind$Parser$text$(":", $2376, $2377);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2379 = self.idx;
                                                                                        var $2380 = self.code;
                                                                                        var $2381 = self.err;
                                                                                        var $2382 = Parser$Reply$error$($2379, $2380, $2381);
                                                                                        var $2378 = $2382;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2383 = self.idx;
                                                                                        var $2384 = self.code;
                                                                                        var self = Kind$Parser$term$($2383, $2384);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2386 = self.idx;
                                                                                                var $2387 = self.code;
                                                                                                var $2388 = self.err;
                                                                                                var $2389 = Parser$Reply$error$($2386, $2387, $2388);
                                                                                                var $2385 = $2389;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2390 = self.idx;
                                                                                                var $2391 = self.code;
                                                                                                var $2392 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2390, $2391);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2394 = self.idx;
                                                                                                        var $2395 = self.code;
                                                                                                        var $2396 = self.err;
                                                                                                        var $2397 = Parser$Reply$error$($2394, $2395, $2396);
                                                                                                        var $2393 = $2397;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2398 = self.idx;
                                                                                                        var $2399 = self.code;
                                                                                                        var self = Kind$Parser$term$($2398, $2399);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2401 = self.idx;
                                                                                                                var $2402 = self.code;
                                                                                                                var $2403 = self.err;
                                                                                                                var $2404 = Parser$Reply$error$($2401, $2402, $2403);
                                                                                                                var $2400 = $2404;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2405 = self.idx;
                                                                                                                var $2406 = self.code;
                                                                                                                var $2407 = self.val;
                                                                                                                var self = Kind$Parser$stop$($2318, $2405, $2406);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2409 = self.idx;
                                                                                                                        var $2410 = self.code;
                                                                                                                        var $2411 = self.err;
                                                                                                                        var $2412 = Parser$Reply$error$($2409, $2410, $2411);
                                                                                                                        var $2408 = $2412;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2413 = self.idx;
                                                                                                                        var $2414 = self.code;
                                                                                                                        var $2415 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("x", (_x$45 => {
                                                                                                                            var $2417 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $2417;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($2355));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($2370));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $2418 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($2355, (_x$55 => {
                                                                                                                                var $2419 = Kind$Term$lam$($2370, (_y$56 => {
                                                                                                                                    var $2420 = $2333;
                                                                                                                                    return $2420;
                                                                                                                                }));
                                                                                                                                return $2419;
                                                                                                                            })));
                                                                                                                            return $2418;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $2421 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($2355, (_x$56 => {
                                                                                                                                var $2422 = Kind$Term$lam$($2370, (_y$57 => {
                                                                                                                                    var $2423 = $2392;
                                                                                                                                    return $2423;
                                                                                                                                }));
                                                                                                                                return $2422;
                                                                                                                            })));
                                                                                                                            return $2421;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($2355, (_x$56 => {
                                                                                                                            var $2424 = Kind$Term$lam$($2370, (_y$57 => {
                                                                                                                                var $2425 = $2407;
                                                                                                                                return $2425;
                                                                                                                            }));
                                                                                                                            return $2424;
                                                                                                                        })));
                                                                                                                        var $2416 = Parser$Reply$value$($2413, $2414, Kind$Term$ori$($2415, _term$56));
                                                                                                                        var $2408 = $2416;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2400 = $2408;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2393 = $2400;
                                                                                                        break;
                                                                                                };
                                                                                                var $2385 = $2393;
                                                                                                break;
                                                                                        };
                                                                                        var $2378 = $2385;
                                                                                        break;
                                                                                };
                                                                                var $2371 = $2378;
                                                                                break;
                                                                        };
                                                                        var $2363 = $2371;
                                                                        break;
                                                                };
                                                                var $2356 = $2363;
                                                                break;
                                                        };
                                                        var $2348 = $2356;
                                                        break;
                                                };
                                                var $2341 = $2348;
                                                break;
                                        };
                                        var $2334 = $2341;
                                        break;
                                };
                                var $2326 = $2334;
                                break;
                        };
                        var $2319 = $2326;
                        break;
                };
                var $2311 = $2319;
                break;
        };
        return $2311;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2427 = self.idx;
                var $2428 = self.code;
                var $2429 = self.err;
                var $2430 = Parser$Reply$error$($2427, $2428, $2429);
                var $2426 = $2430;
                break;
            case 'Parser.Reply.value':
                var $2431 = self.idx;
                var $2432 = self.code;
                var $2433 = self.val;
                var self = Kind$Parser$text$("let ", $2431, $2432);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2435 = self.idx;
                        var $2436 = self.code;
                        var $2437 = self.err;
                        var $2438 = Parser$Reply$error$($2435, $2436, $2437);
                        var $2434 = $2438;
                        break;
                    case 'Parser.Reply.value':
                        var $2439 = self.idx;
                        var $2440 = self.code;
                        var self = Kind$Parser$text$("{", $2439, $2440);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2442 = self.idx;
                                var $2443 = self.code;
                                var $2444 = self.err;
                                var $2445 = Parser$Reply$error$($2442, $2443, $2444);
                                var $2441 = $2445;
                                break;
                            case 'Parser.Reply.value':
                                var $2446 = self.idx;
                                var $2447 = self.code;
                                var self = Kind$Parser$name$($2446, $2447);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2449 = self.idx;
                                        var $2450 = self.code;
                                        var $2451 = self.err;
                                        var $2452 = Parser$Reply$error$($2449, $2450, $2451);
                                        var $2448 = $2452;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2453 = self.idx;
                                        var $2454 = self.code;
                                        var $2455 = self.val;
                                        var self = Kind$Parser$text$(",", $2453, $2454);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2457 = self.idx;
                                                var $2458 = self.code;
                                                var $2459 = self.err;
                                                var $2460 = Parser$Reply$error$($2457, $2458, $2459);
                                                var $2456 = $2460;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2461 = self.idx;
                                                var $2462 = self.code;
                                                var self = Kind$Parser$name$($2461, $2462);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2464 = self.idx;
                                                        var $2465 = self.code;
                                                        var $2466 = self.err;
                                                        var $2467 = Parser$Reply$error$($2464, $2465, $2466);
                                                        var $2463 = $2467;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2468 = self.idx;
                                                        var $2469 = self.code;
                                                        var $2470 = self.val;
                                                        var self = Kind$Parser$text$("}", $2468, $2469);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2472 = self.idx;
                                                                var $2473 = self.code;
                                                                var $2474 = self.err;
                                                                var $2475 = Parser$Reply$error$($2472, $2473, $2474);
                                                                var $2471 = $2475;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2476 = self.idx;
                                                                var $2477 = self.code;
                                                                var self = Kind$Parser$text$("=", $2476, $2477);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2479 = self.idx;
                                                                        var $2480 = self.code;
                                                                        var $2481 = self.err;
                                                                        var $2482 = Parser$Reply$error$($2479, $2480, $2481);
                                                                        var $2478 = $2482;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2483 = self.idx;
                                                                        var $2484 = self.code;
                                                                        var self = Kind$Parser$term$($2483, $2484);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2486 = self.idx;
                                                                                var $2487 = self.code;
                                                                                var $2488 = self.err;
                                                                                var $2489 = Parser$Reply$error$($2486, $2487, $2488);
                                                                                var $2485 = $2489;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2490 = self.idx;
                                                                                var $2491 = self.code;
                                                                                var $2492 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2490, $2491);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2494 = self.idx;
                                                                                        var $2495 = self.code;
                                                                                        var $2496 = self.err;
                                                                                        var $2497 = Parser$Reply$error$($2494, $2495, $2496);
                                                                                        var $2493 = $2497;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2498 = self.idx;
                                                                                        var $2499 = self.code;
                                                                                        var self = Kind$Parser$term$($2498, $2499);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2501 = self.idx;
                                                                                                var $2502 = self.code;
                                                                                                var $2503 = self.err;
                                                                                                var $2504 = Parser$Reply$error$($2501, $2502, $2503);
                                                                                                var $2500 = $2504;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2505 = self.idx;
                                                                                                var $2506 = self.code;
                                                                                                var $2507 = self.val;
                                                                                                var self = Kind$Parser$stop$($2433, $2505, $2506);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2509 = self.idx;
                                                                                                        var $2510 = self.code;
                                                                                                        var $2511 = self.err;
                                                                                                        var $2512 = Parser$Reply$error$($2509, $2510, $2511);
                                                                                                        var $2508 = $2512;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2513 = self.idx;
                                                                                                        var $2514 = self.code;
                                                                                                        var $2515 = self.val;
                                                                                                        var _term$39 = $2492;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("x", (_x$40 => {
                                                                                                            var $2517 = Kind$Term$hol$(Bits$e);
                                                                                                            return $2517;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($2455, (_x$41 => {
                                                                                                            var $2518 = Kind$Term$lam$($2470, (_y$42 => {
                                                                                                                var $2519 = $2507;
                                                                                                                return $2519;
                                                                                                            }));
                                                                                                            return $2518;
                                                                                                        })));
                                                                                                        var $2516 = Parser$Reply$value$($2513, $2514, Kind$Term$ori$($2515, _term$41));
                                                                                                        var $2508 = $2516;
                                                                                                        break;
                                                                                                };
                                                                                                var $2500 = $2508;
                                                                                                break;
                                                                                        };
                                                                                        var $2493 = $2500;
                                                                                        break;
                                                                                };
                                                                                var $2485 = $2493;
                                                                                break;
                                                                        };
                                                                        var $2478 = $2485;
                                                                        break;
                                                                };
                                                                var $2471 = $2478;
                                                                break;
                                                        };
                                                        var $2463 = $2471;
                                                        break;
                                                };
                                                var $2456 = $2463;
                                                break;
                                        };
                                        var $2448 = $2456;
                                        break;
                                };
                                var $2441 = $2448;
                                break;
                        };
                        var $2434 = $2441;
                        break;
                };
                var $2426 = $2434;
                break;
        };
        return $2426;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2521 = self.idx;
                var $2522 = self.code;
                var $2523 = self.err;
                var $2524 = Parser$Reply$error$($2521, $2522, $2523);
                var $2520 = $2524;
                break;
            case 'Parser.Reply.value':
                var $2525 = self.idx;
                var $2526 = self.code;
                var $2527 = self.val;
                var self = Kind$Parser$text$("{", $2525, $2526);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2529 = self.idx;
                        var $2530 = self.code;
                        var $2531 = self.err;
                        var $2532 = Parser$Reply$error$($2529, $2530, $2531);
                        var $2528 = $2532;
                        break;
                    case 'Parser.Reply.value':
                        var $2533 = self.idx;
                        var $2534 = self.code;
                        var self = Kind$Parser$name$($2533, $2534);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2536 = self.idx;
                                var $2537 = self.code;
                                var $2538 = self.err;
                                var $2539 = Parser$Reply$error$($2536, $2537, $2538);
                                var $2535 = $2539;
                                break;
                            case 'Parser.Reply.value':
                                var $2540 = self.idx;
                                var $2541 = self.code;
                                var $2542 = self.val;
                                var self = Kind$Parser$text$(",", $2540, $2541);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2544 = self.idx;
                                        var $2545 = self.code;
                                        var $2546 = self.err;
                                        var $2547 = Parser$Reply$error$($2544, $2545, $2546);
                                        var $2543 = $2547;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2548 = self.idx;
                                        var $2549 = self.code;
                                        var self = Kind$Parser$name$($2548, $2549);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2551 = self.idx;
                                                var $2552 = self.code;
                                                var $2553 = self.err;
                                                var $2554 = Parser$Reply$error$($2551, $2552, $2553);
                                                var $2550 = $2554;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2555 = self.idx;
                                                var $2556 = self.code;
                                                var $2557 = self.val;
                                                var self = Kind$Parser$text$("}", $2555, $2556);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2559 = self.idx;
                                                        var $2560 = self.code;
                                                        var $2561 = self.err;
                                                        var $2562 = Parser$Reply$error$($2559, $2560, $2561);
                                                        var $2558 = $2562;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2563 = self.idx;
                                                        var $2564 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2563, $2564);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2566 = self.idx;
                                                                var $2567 = self.code;
                                                                var $2568 = self.err;
                                                                var $2569 = Parser$Reply$error$($2566, $2567, $2568);
                                                                var $2565 = $2569;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2570 = self.idx;
                                                                var $2571 = self.code;
                                                                var self = Kind$Parser$term$($2570, $2571);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2573 = self.idx;
                                                                        var $2574 = self.code;
                                                                        var $2575 = self.err;
                                                                        var $2576 = Parser$Reply$error$($2573, $2574, $2575);
                                                                        var $2572 = $2576;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2577 = self.idx;
                                                                        var $2578 = self.code;
                                                                        var $2579 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2577, $2578);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2581 = self.idx;
                                                                                var $2582 = self.code;
                                                                                var $2583 = self.err;
                                                                                var $2584 = Parser$Reply$error$($2581, $2582, $2583);
                                                                                var $2580 = $2584;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2585 = self.idx;
                                                                                var $2586 = self.code;
                                                                                var self = Kind$Parser$term$($2585, $2586);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2588 = self.idx;
                                                                                        var $2589 = self.code;
                                                                                        var $2590 = self.err;
                                                                                        var $2591 = Parser$Reply$error$($2588, $2589, $2590);
                                                                                        var $2587 = $2591;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2592 = self.idx;
                                                                                        var $2593 = self.code;
                                                                                        var $2594 = self.val;
                                                                                        var self = Kind$Parser$stop$($2527, $2592, $2593);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2596 = self.idx;
                                                                                                var $2597 = self.code;
                                                                                                var $2598 = self.err;
                                                                                                var $2599 = Parser$Reply$error$($2596, $2597, $2598);
                                                                                                var $2595 = $2599;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2600 = self.idx;
                                                                                                var $2601 = self.code;
                                                                                                var $2602 = self.val;
                                                                                                var _term$36 = $2579;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("x", (_x$37 => {
                                                                                                    var $2604 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2604;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2542, (_x$38 => {
                                                                                                    var $2605 = Kind$Term$lam$($2557, (_y$39 => {
                                                                                                        var $2606 = $2594;
                                                                                                        return $2606;
                                                                                                    }));
                                                                                                    return $2605;
                                                                                                })));
                                                                                                var $2603 = Parser$Reply$value$($2600, $2601, Kind$Term$ori$($2602, _term$38));
                                                                                                var $2595 = $2603;
                                                                                                break;
                                                                                        };
                                                                                        var $2587 = $2595;
                                                                                        break;
                                                                                };
                                                                                var $2580 = $2587;
                                                                                break;
                                                                        };
                                                                        var $2572 = $2580;
                                                                        break;
                                                                };
                                                                var $2565 = $2572;
                                                                break;
                                                        };
                                                        var $2558 = $2565;
                                                        break;
                                                };
                                                var $2550 = $2558;
                                                break;
                                        };
                                        var $2543 = $2550;
                                        break;
                                };
                                var $2535 = $2543;
                                break;
                        };
                        var $2528 = $2535;
                        break;
                };
                var $2520 = $2528;
                break;
        };
        return $2520;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2608 = self.idx;
                var $2609 = self.code;
                var $2610 = self.err;
                var $2611 = Parser$Reply$error$($2608, $2609, $2610);
                var $2607 = $2611;
                break;
            case 'Parser.Reply.value':
                var $2612 = self.idx;
                var $2613 = self.code;
                var $2614 = self.val;
                var self = Kind$Parser$text$("def ", $2612, $2613);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2616 = self.idx;
                        var $2617 = self.code;
                        var $2618 = self.err;
                        var $2619 = Parser$Reply$error$($2616, $2617, $2618);
                        var $2615 = $2619;
                        break;
                    case 'Parser.Reply.value':
                        var $2620 = self.idx;
                        var $2621 = self.code;
                        var self = Kind$Parser$name$($2620, $2621);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2623 = self.idx;
                                var $2624 = self.code;
                                var $2625 = self.err;
                                var $2626 = Parser$Reply$error$($2623, $2624, $2625);
                                var $2622 = $2626;
                                break;
                            case 'Parser.Reply.value':
                                var $2627 = self.idx;
                                var $2628 = self.code;
                                var $2629 = self.val;
                                var self = Kind$Parser$text$("=", $2627, $2628);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2631 = self.idx;
                                        var $2632 = self.code;
                                        var $2633 = self.err;
                                        var $2634 = Parser$Reply$error$($2631, $2632, $2633);
                                        var $2630 = $2634;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2635 = self.idx;
                                        var $2636 = self.code;
                                        var self = Kind$Parser$term$($2635, $2636);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2638 = self.idx;
                                                var $2639 = self.code;
                                                var $2640 = self.err;
                                                var $2641 = Parser$Reply$error$($2638, $2639, $2640);
                                                var $2637 = $2641;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2642 = self.idx;
                                                var $2643 = self.code;
                                                var $2644 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2642, $2643);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2646 = self.idx;
                                                        var $2647 = self.code;
                                                        var $2648 = self.err;
                                                        var $2649 = Parser$Reply$error$($2646, $2647, $2648);
                                                        var $2645 = $2649;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2650 = self.idx;
                                                        var $2651 = self.code;
                                                        var self = Kind$Parser$term$($2650, $2651);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2653 = self.idx;
                                                                var $2654 = self.code;
                                                                var $2655 = self.err;
                                                                var $2656 = Parser$Reply$error$($2653, $2654, $2655);
                                                                var $2652 = $2656;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2657 = self.idx;
                                                                var $2658 = self.code;
                                                                var $2659 = self.val;
                                                                var self = Kind$Parser$stop$($2614, $2657, $2658);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2661 = self.idx;
                                                                        var $2662 = self.code;
                                                                        var $2663 = self.err;
                                                                        var $2664 = Parser$Reply$error$($2661, $2662, $2663);
                                                                        var $2660 = $2664;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2665 = self.idx;
                                                                        var $2666 = self.code;
                                                                        var $2667 = self.val;
                                                                        var $2668 = Parser$Reply$value$($2665, $2666, Kind$Term$ori$($2667, Kind$Term$def$($2629, $2644, (_x$27 => {
                                                                            var $2669 = $2659;
                                                                            return $2669;
                                                                        }))));
                                                                        var $2660 = $2668;
                                                                        break;
                                                                };
                                                                var $2652 = $2660;
                                                                break;
                                                        };
                                                        var $2645 = $2652;
                                                        break;
                                                };
                                                var $2637 = $2645;
                                                break;
                                        };
                                        var $2630 = $2637;
                                        break;
                                };
                                var $2622 = $2630;
                                break;
                        };
                        var $2615 = $2622;
                        break;
                };
                var $2607 = $2615;
                break;
        };
        return $2607;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2671 = self.idx;
                var $2672 = self.code;
                var $2673 = self.err;
                var $2674 = Parser$Reply$error$($2671, $2672, $2673);
                var $2670 = $2674;
                break;
            case 'Parser.Reply.value':
                var $2675 = self.idx;
                var $2676 = self.code;
                var $2677 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2675, $2676);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2679 = self.idx;
                        var $2680 = self.code;
                        var $2681 = self.err;
                        var $2682 = Parser$Reply$error$($2679, $2680, $2681);
                        var $2678 = $2682;
                        break;
                    case 'Parser.Reply.value':
                        var $2683 = self.idx;
                        var $2684 = self.code;
                        var self = Kind$Parser$name1$($2683, $2684);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2686 = self.idx;
                                var $2687 = self.code;
                                var $2688 = self.err;
                                var $2689 = Parser$Reply$error$($2686, $2687, $2688);
                                var $2685 = $2689;
                                break;
                            case 'Parser.Reply.value':
                                var $2690 = self.idx;
                                var $2691 = self.code;
                                var $2692 = self.val;
                                var self = Kind$Parser$text$("in", $2690, $2691);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2694 = self.idx;
                                        var $2695 = self.code;
                                        var $2696 = self.err;
                                        var $2697 = Parser$Reply$error$($2694, $2695, $2696);
                                        var $2693 = $2697;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2698 = self.idx;
                                        var $2699 = self.code;
                                        var self = Kind$Parser$term$($2698, $2699);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2701 = self.idx;
                                                var $2702 = self.code;
                                                var $2703 = self.err;
                                                var $2704 = Parser$Reply$error$($2701, $2702, $2703);
                                                var $2700 = $2704;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2705 = self.idx;
                                                var $2706 = self.code;
                                                var $2707 = self.val;
                                                var self = Kind$Parser$text$("with", $2705, $2706);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2709 = self.idx;
                                                        var $2710 = self.code;
                                                        var $2711 = self.err;
                                                        var $2712 = Parser$Reply$error$($2709, $2710, $2711);
                                                        var $2708 = $2712;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2713 = self.idx;
                                                        var $2714 = self.code;
                                                        var self = Kind$Parser$term$($2713, $2714);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2716 = self.idx;
                                                                var $2717 = self.code;
                                                                var $2718 = self.err;
                                                                var $2719 = Parser$Reply$error$($2716, $2717, $2718);
                                                                var $2715 = $2719;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2720 = self.idx;
                                                                var $2721 = self.code;
                                                                var $2722 = self.val;
                                                                var self = Kind$Parser$term$($2720, $2721);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2724 = self.idx;
                                                                        var $2725 = self.code;
                                                                        var $2726 = self.err;
                                                                        var $2727 = Parser$Reply$error$($2724, $2725, $2726);
                                                                        var $2723 = $2727;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2728 = self.idx;
                                                                        var $2729 = self.code;
                                                                        var $2730 = self.val;
                                                                        var self = Kind$Parser$stop$($2677, $2728, $2729);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2732 = self.idx;
                                                                                var $2733 = self.code;
                                                                                var $2734 = self.err;
                                                                                var $2735 = Parser$Reply$error$($2732, $2733, $2734);
                                                                                var $2731 = $2735;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2736 = self.idx;
                                                                                var $2737 = self.code;
                                                                                var $2738 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2692, (_s$30 => {
                                                                                    var $2740 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $2741 = $2707;
                                                                                        return $2741;
                                                                                    }));
                                                                                    return $2740;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $2722);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $2730);
                                                                                var $2739 = Parser$Reply$value$($2736, $2737, Kind$Term$ori$($2738, _term$37));
                                                                                var $2731 = $2739;
                                                                                break;
                                                                        };
                                                                        var $2723 = $2731;
                                                                        break;
                                                                };
                                                                var $2715 = $2723;
                                                                break;
                                                        };
                                                        var $2708 = $2715;
                                                        break;
                                                };
                                                var $2700 = $2708;
                                                break;
                                        };
                                        var $2693 = $2700;
                                        break;
                                };
                                var $2685 = $2693;
                                break;
                        };
                        var $2678 = $2685;
                        break;
                };
                var $2670 = $2678;
                break;
        };
        return $2670;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2743 = self.idx;
                var $2744 = self.code;
                var $2745 = self.err;
                var $2746 = Parser$Reply$error$($2743, $2744, $2745);
                var $2742 = $2746;
                break;
            case 'Parser.Reply.value':
                var $2747 = self.idx;
                var $2748 = self.code;
                var $2749 = self.val;
                var self = Kind$Parser$text$("if ", $2747, $2748);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2751 = self.idx;
                        var $2752 = self.code;
                        var $2753 = self.err;
                        var $2754 = Parser$Reply$error$($2751, $2752, $2753);
                        var $2750 = $2754;
                        break;
                    case 'Parser.Reply.value':
                        var $2755 = self.idx;
                        var $2756 = self.code;
                        var self = Kind$Parser$term$($2755, $2756);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2758 = self.idx;
                                var $2759 = self.code;
                                var $2760 = self.err;
                                var $2761 = Parser$Reply$error$($2758, $2759, $2760);
                                var $2757 = $2761;
                                break;
                            case 'Parser.Reply.value':
                                var $2762 = self.idx;
                                var $2763 = self.code;
                                var $2764 = self.val;
                                var self = Kind$Parser$text$("then", $2762, $2763);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2766 = self.idx;
                                        var $2767 = self.code;
                                        var $2768 = self.err;
                                        var $2769 = Parser$Reply$error$($2766, $2767, $2768);
                                        var $2765 = $2769;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2770 = self.idx;
                                        var $2771 = self.code;
                                        var self = Kind$Parser$term$($2770, $2771);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2773 = self.idx;
                                                var $2774 = self.code;
                                                var $2775 = self.err;
                                                var $2776 = Parser$Reply$error$($2773, $2774, $2775);
                                                var $2772 = $2776;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2777 = self.idx;
                                                var $2778 = self.code;
                                                var $2779 = self.val;
                                                var self = Kind$Parser$text$("else", $2777, $2778);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2781 = self.idx;
                                                        var $2782 = self.code;
                                                        var $2783 = self.err;
                                                        var $2784 = Parser$Reply$error$($2781, $2782, $2783);
                                                        var $2780 = $2784;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2785 = self.idx;
                                                        var $2786 = self.code;
                                                        var self = Kind$Parser$term$($2785, $2786);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2788 = self.idx;
                                                                var $2789 = self.code;
                                                                var $2790 = self.err;
                                                                var $2791 = Parser$Reply$error$($2788, $2789, $2790);
                                                                var $2787 = $2791;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2792 = self.idx;
                                                                var $2793 = self.code;
                                                                var $2794 = self.val;
                                                                var self = Kind$Parser$stop$($2749, $2792, $2793);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2796 = self.idx;
                                                                        var $2797 = self.code;
                                                                        var $2798 = self.err;
                                                                        var $2799 = Parser$Reply$error$($2796, $2797, $2798);
                                                                        var $2795 = $2799;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2800 = self.idx;
                                                                        var $2801 = self.code;
                                                                        var $2802 = self.val;
                                                                        var _term$27 = $2764;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $2804 = Kind$Term$hol$(Bits$e);
                                                                            return $2804;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $2779);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2794);
                                                                        var $2803 = Parser$Reply$value$($2800, $2801, Kind$Term$ori$($2802, _term$30));
                                                                        var $2795 = $2803;
                                                                        break;
                                                                };
                                                                var $2787 = $2795;
                                                                break;
                                                        };
                                                        var $2780 = $2787;
                                                        break;
                                                };
                                                var $2772 = $2780;
                                                break;
                                        };
                                        var $2765 = $2772;
                                        break;
                                };
                                var $2757 = $2765;
                                break;
                        };
                        var $2750 = $2757;
                        break;
                };
                var $2742 = $2750;
                break;
        };
        return $2742;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $2806 = self.fst;
                var $2807 = self.snd;
                var $2808 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($2806, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2810 = self.idx;
                            var $2811 = self.code;
                            var $2812 = self.err;
                            var $2813 = Parser$Reply$error$($2810, $2811, $2812);
                            var $2809 = $2813;
                            break;
                        case 'Parser.Reply.value':
                            var $2814 = self.idx;
                            var $2815 = self.code;
                            var $2816 = Parser$Reply$value$($2814, $2815, $2807);
                            var $2809 = $2816;
                            break;
                    };
                    return $2809;
                });
                var $2805 = $2808;
                break;
        };
        return $2805;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2818 = self.idx;
                var $2819 = self.code;
                var $2820 = self.err;
                var $2821 = Parser$Reply$error$($2818, $2819, $2820);
                var $2817 = $2821;
                break;
            case 'Parser.Reply.value':
                var $2822 = self.idx;
                var $2823 = self.code;
                var $2824 = self.val;
                var self = Kind$Parser$text$("\'", $2822, $2823);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2826 = self.idx;
                        var $2827 = self.code;
                        var $2828 = self.err;
                        var $2829 = Parser$Reply$error$($2826, $2827, $2828);
                        var $2825 = $2829;
                        break;
                    case 'Parser.Reply.value':
                        var $2830 = self.idx;
                        var $2831 = self.code;
                        var self = Kind$Parser$char$single($2830)($2831);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2833 = self.idx;
                                var $2834 = self.code;
                                var $2835 = self.err;
                                var $2836 = Parser$Reply$error$($2833, $2834, $2835);
                                var $2832 = $2836;
                                break;
                            case 'Parser.Reply.value':
                                var $2837 = self.idx;
                                var $2838 = self.code;
                                var $2839 = self.val;
                                var self = Parser$text$("\'", $2837, $2838);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2841 = self.idx;
                                        var $2842 = self.code;
                                        var $2843 = self.err;
                                        var $2844 = Parser$Reply$error$($2841, $2842, $2843);
                                        var $2840 = $2844;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2845 = self.idx;
                                        var $2846 = self.code;
                                        var self = Kind$Parser$stop$($2824, $2845, $2846);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2848 = self.idx;
                                                var $2849 = self.code;
                                                var $2850 = self.err;
                                                var $2851 = Parser$Reply$error$($2848, $2849, $2850);
                                                var $2847 = $2851;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2852 = self.idx;
                                                var $2853 = self.code;
                                                var $2854 = self.val;
                                                var $2855 = Parser$Reply$value$($2852, $2853, Kind$Term$ori$($2854, Kind$Term$chr$($2839)));
                                                var $2847 = $2855;
                                                break;
                                        };
                                        var $2840 = $2847;
                                        break;
                                };
                                var $2832 = $2840;
                                break;
                        };
                        var $2825 = $2832;
                        break;
                };
                var $2817 = $2825;
                break;
        };
        return $2817;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $2856 = _res$2;
                    return $2856;
                } else {
                    var $2857 = self.charCodeAt(0);
                    var $2858 = self.slice(1);
                    var $2859 = String$reverse$go$($2858, String$cons$($2857, _res$2));
                    return $2859;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $2860 = String$reverse$go$(_xs$1, String$nil);
        return $2860;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_str$1, _idx$2, _code$3) {
        var Kind$Parser$string$go$ = (_str$1, _idx$2, _code$3) => ({
            ctr: 'TCO',
            arg: [_str$1, _idx$2, _code$3]
        });
        var Kind$Parser$string$go = _str$1 => _idx$2 => _code$3 => Kind$Parser$string$go$(_str$1, _idx$2, _code$3);
        var arg = [_str$1, _idx$2, _code$3];
        while (true) {
            let [_str$1, _idx$2, _code$3] = arg;
            var R = (() => {
                var self = _code$3;
                if (self.length === 0) {
                    var $2861 = Parser$Reply$error$(_idx$2, _code$3, "Non-terminating string.");
                    return $2861;
                } else {
                    var $2862 = self.charCodeAt(0);
                    var $2863 = self.slice(1);
                    var self = ($2862 === 34);
                    if (self) {
                        var $2865 = Parser$Reply$value$(Nat$succ$(_idx$2), $2863, String$reverse$(_str$1));
                        var $2864 = $2865;
                    } else {
                        var self = Kind$Parser$char$single(_idx$2)(_code$3);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2867 = self.idx;
                                var $2868 = self.code;
                                var $2869 = self.err;
                                var $2870 = Parser$Reply$error$($2867, $2868, $2869);
                                var $2866 = $2870;
                                break;
                            case 'Parser.Reply.value':
                                var $2871 = self.idx;
                                var $2872 = self.code;
                                var $2873 = self.val;
                                var $2874 = Kind$Parser$string$go$(String$cons$($2873, _str$1), $2871, $2872);
                                var $2866 = $2874;
                                break;
                        };
                        var $2864 = $2866;
                    };
                    return $2864;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => Kind$Parser$string$go$(x0, x1, x2);

    function Kind$Parser$string$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2876 = self.idx;
                var $2877 = self.code;
                var $2878 = self.err;
                var $2879 = Parser$Reply$error$($2876, $2877, $2878);
                var $2875 = $2879;
                break;
            case 'Parser.Reply.value':
                var $2880 = self.idx;
                var $2881 = self.code;
                var $2882 = self.val;
                var self = Kind$Parser$text$(String$cons$(34, String$nil), $2880, $2881);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2884 = self.idx;
                        var $2885 = self.code;
                        var $2886 = self.err;
                        var $2887 = Parser$Reply$error$($2884, $2885, $2886);
                        var $2883 = $2887;
                        break;
                    case 'Parser.Reply.value':
                        var $2888 = self.idx;
                        var $2889 = self.code;
                        var self = Kind$Parser$string$go$("", $2888, $2889);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2891 = self.idx;
                                var $2892 = self.code;
                                var $2893 = self.err;
                                var $2894 = Parser$Reply$error$($2891, $2892, $2893);
                                var $2890 = $2894;
                                break;
                            case 'Parser.Reply.value':
                                var $2895 = self.idx;
                                var $2896 = self.code;
                                var $2897 = self.val;
                                var self = Kind$Parser$stop$($2882, $2895, $2896);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2899 = self.idx;
                                        var $2900 = self.code;
                                        var $2901 = self.err;
                                        var $2902 = Parser$Reply$error$($2899, $2900, $2901);
                                        var $2898 = $2902;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2903 = self.idx;
                                        var $2904 = self.code;
                                        var $2905 = self.val;
                                        var $2906 = Parser$Reply$value$($2903, $2904, Kind$Term$ori$($2905, Kind$Term$str$($2897)));
                                        var $2898 = $2906;
                                        break;
                                };
                                var $2890 = $2898;
                                break;
                        };
                        var $2883 = $2890;
                        break;
                };
                var $2875 = $2883;
                break;
        };
        return $2875;
    };
    const Kind$Parser$string = x0 => x1 => Kind$Parser$string$(x0, x1);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2908 = self.idx;
                var $2909 = self.code;
                var $2910 = self.err;
                var $2911 = Parser$Reply$error$($2908, $2909, $2910);
                var $2907 = $2911;
                break;
            case 'Parser.Reply.value':
                var $2912 = self.idx;
                var $2913 = self.code;
                var $2914 = self.val;
                var self = Kind$Parser$text$("{", $2912, $2913);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2916 = self.idx;
                        var $2917 = self.code;
                        var $2918 = self.err;
                        var $2919 = Parser$Reply$error$($2916, $2917, $2918);
                        var $2915 = $2919;
                        break;
                    case 'Parser.Reply.value':
                        var $2920 = self.idx;
                        var $2921 = self.code;
                        var self = Kind$Parser$term$($2920, $2921);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2923 = self.idx;
                                var $2924 = self.code;
                                var $2925 = self.err;
                                var $2926 = Parser$Reply$error$($2923, $2924, $2925);
                                var $2922 = $2926;
                                break;
                            case 'Parser.Reply.value':
                                var $2927 = self.idx;
                                var $2928 = self.code;
                                var $2929 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $2927, $2928);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2931 = self.idx;
                                        var $2932 = self.code;
                                        var $2933 = self.err;
                                        var $2934 = Parser$Reply$error$($2931, $2932, $2933);
                                        var $2930 = $2934;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2935 = self.idx;
                                        var $2936 = self.code;
                                        var self = Kind$Parser$term$($2935, $2936);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2938 = self.idx;
                                                var $2939 = self.code;
                                                var $2940 = self.err;
                                                var $2941 = Parser$Reply$error$($2938, $2939, $2940);
                                                var $2937 = $2941;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2942 = self.idx;
                                                var $2943 = self.code;
                                                var $2944 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $2942, $2943);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2946 = self.idx;
                                                        var $2947 = self.code;
                                                        var $2948 = self.err;
                                                        var $2949 = Parser$Reply$error$($2946, $2947, $2948);
                                                        var $2945 = $2949;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2950 = self.idx;
                                                        var $2951 = self.code;
                                                        var self = Kind$Parser$text$("}", $2950, $2951);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2953 = self.idx;
                                                                var $2954 = self.code;
                                                                var $2955 = self.err;
                                                                var $2956 = Parser$Reply$error$($2953, $2954, $2955);
                                                                var $2952 = $2956;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2957 = self.idx;
                                                                var $2958 = self.code;
                                                                var self = Kind$Parser$stop$($2914, $2957, $2958);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2960 = self.idx;
                                                                        var $2961 = self.code;
                                                                        var $2962 = self.err;
                                                                        var $2963 = Parser$Reply$error$($2960, $2961, $2962);
                                                                        var $2959 = $2963;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2964 = self.idx;
                                                                        var $2965 = self.code;
                                                                        var $2966 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2929);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $2944);
                                                                        var $2967 = Parser$Reply$value$($2964, $2965, Kind$Term$ori$($2966, _term$31));
                                                                        var $2959 = $2967;
                                                                        break;
                                                                };
                                                                var $2952 = $2959;
                                                                break;
                                                        };
                                                        var $2945 = $2952;
                                                        break;
                                                };
                                                var $2937 = $2945;
                                                break;
                                        };
                                        var $2930 = $2937;
                                        break;
                                };
                                var $2922 = $2930;
                                break;
                        };
                        var $2915 = $2922;
                        break;
                };
                var $2907 = $2915;
                break;
        };
        return $2907;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2969 = self.idx;
                var $2970 = self.code;
                var $2971 = self.err;
                var $2972 = Parser$Reply$error$($2969, $2970, $2971);
                var $2968 = $2972;
                break;
            case 'Parser.Reply.value':
                var $2973 = self.idx;
                var $2974 = self.code;
                var $2975 = self.val;
                var self = Kind$Parser$text$("[", $2973, $2974);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2977 = self.idx;
                        var $2978 = self.code;
                        var $2979 = self.err;
                        var $2980 = Parser$Reply$error$($2977, $2978, $2979);
                        var $2976 = $2980;
                        break;
                    case 'Parser.Reply.value':
                        var $2981 = self.idx;
                        var $2982 = self.code;
                        var self = Kind$Parser$name1$($2981, $2982);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2984 = self.idx;
                                var $2985 = self.code;
                                var $2986 = self.err;
                                var $2987 = Parser$Reply$error$($2984, $2985, $2986);
                                var $2983 = $2987;
                                break;
                            case 'Parser.Reply.value':
                                var $2988 = self.idx;
                                var $2989 = self.code;
                                var $2990 = self.val;
                                var self = Kind$Parser$text$(":", $2988, $2989);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2992 = self.idx;
                                        var $2993 = self.code;
                                        var $2994 = self.err;
                                        var $2995 = Parser$Reply$error$($2992, $2993, $2994);
                                        var $2991 = $2995;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2996 = self.idx;
                                        var $2997 = self.code;
                                        var self = Kind$Parser$term$($2996, $2997);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2999 = self.idx;
                                                var $3000 = self.code;
                                                var $3001 = self.err;
                                                var $3002 = Parser$Reply$error$($2999, $3000, $3001);
                                                var $2998 = $3002;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3003 = self.idx;
                                                var $3004 = self.code;
                                                var $3005 = self.val;
                                                var self = Kind$Parser$text$("]", $3003, $3004);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3007 = self.idx;
                                                        var $3008 = self.code;
                                                        var $3009 = self.err;
                                                        var $3010 = Parser$Reply$error$($3007, $3008, $3009);
                                                        var $3006 = $3010;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3011 = self.idx;
                                                        var $3012 = self.code;
                                                        var self = Kind$Parser$term$($3011, $3012);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3014 = self.idx;
                                                                var $3015 = self.code;
                                                                var $3016 = self.err;
                                                                var $3017 = Parser$Reply$error$($3014, $3015, $3016);
                                                                var $3013 = $3017;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3018 = self.idx;
                                                                var $3019 = self.code;
                                                                var $3020 = self.val;
                                                                var self = Kind$Parser$stop$($2975, $3018, $3019);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3022 = self.idx;
                                                                        var $3023 = self.code;
                                                                        var $3024 = self.err;
                                                                        var $3025 = Parser$Reply$error$($3022, $3023, $3024);
                                                                        var $3021 = $3025;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3026 = self.idx;
                                                                        var $3027 = self.code;
                                                                        var $3028 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $3005);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($2990, (_x$29 => {
                                                                            var $3030 = $3020;
                                                                            return $3030;
                                                                        })));
                                                                        var $3029 = Parser$Reply$value$($3026, $3027, Kind$Term$ori$($3028, _term$29));
                                                                        var $3021 = $3029;
                                                                        break;
                                                                };
                                                                var $3013 = $3021;
                                                                break;
                                                        };
                                                        var $3006 = $3013;
                                                        break;
                                                };
                                                var $2998 = $3006;
                                                break;
                                        };
                                        var $2991 = $2998;
                                        break;
                                };
                                var $2983 = $2991;
                                break;
                        };
                        var $2976 = $2983;
                        break;
                };
                var $2968 = $2976;
                break;
        };
        return $2968;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3032 = self.idx;
                var $3033 = self.code;
                var $3034 = self.err;
                var $3035 = Parser$Reply$error$($3032, $3033, $3034);
                var $3031 = $3035;
                break;
            case 'Parser.Reply.value':
                var $3036 = self.idx;
                var $3037 = self.code;
                var $3038 = self.val;
                var self = Kind$Parser$text$("some(", $3036, $3037);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3040 = self.idx;
                        var $3041 = self.code;
                        var $3042 = self.err;
                        var $3043 = Parser$Reply$error$($3040, $3041, $3042);
                        var $3039 = $3043;
                        break;
                    case 'Parser.Reply.value':
                        var $3044 = self.idx;
                        var $3045 = self.code;
                        var self = Kind$Parser$term$($3044, $3045);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3047 = self.idx;
                                var $3048 = self.code;
                                var $3049 = self.err;
                                var $3050 = Parser$Reply$error$($3047, $3048, $3049);
                                var $3046 = $3050;
                                break;
                            case 'Parser.Reply.value':
                                var $3051 = self.idx;
                                var $3052 = self.code;
                                var $3053 = self.val;
                                var self = Kind$Parser$text$(")", $3051, $3052);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3055 = self.idx;
                                        var $3056 = self.code;
                                        var $3057 = self.err;
                                        var $3058 = Parser$Reply$error$($3055, $3056, $3057);
                                        var $3054 = $3058;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3059 = self.idx;
                                        var $3060 = self.code;
                                        var self = Kind$Parser$stop$($3038, $3059, $3060);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3062 = self.idx;
                                                var $3063 = self.code;
                                                var $3064 = self.err;
                                                var $3065 = Parser$Reply$error$($3062, $3063, $3064);
                                                var $3061 = $3065;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3066 = self.idx;
                                                var $3067 = self.code;
                                                var $3068 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $3053);
                                                var $3069 = Parser$Reply$value$($3066, $3067, Kind$Term$ori$($3068, _term$20));
                                                var $3061 = $3069;
                                                break;
                                        };
                                        var $3054 = $3061;
                                        break;
                                };
                                var $3046 = $3054;
                                break;
                        };
                        var $3039 = $3046;
                        break;
                };
                var $3031 = $3039;
                break;
        };
        return $3031;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$not$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3071 = self.idx;
                var $3072 = self.code;
                var $3073 = self.err;
                var $3074 = Parser$Reply$error$($3071, $3072, $3073);
                var $3070 = $3074;
                break;
            case 'Parser.Reply.value':
                var $3075 = self.idx;
                var $3076 = self.code;
                var $3077 = self.val;
                var self = Kind$Parser$text$("not(", $3075, $3076);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3079 = self.idx;
                        var $3080 = self.code;
                        var $3081 = self.err;
                        var $3082 = Parser$Reply$error$($3079, $3080, $3081);
                        var $3078 = $3082;
                        break;
                    case 'Parser.Reply.value':
                        var $3083 = self.idx;
                        var $3084 = self.code;
                        var self = Kind$Parser$term$($3083, $3084);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3086 = self.idx;
                                var $3087 = self.code;
                                var $3088 = self.err;
                                var $3089 = Parser$Reply$error$($3086, $3087, $3088);
                                var $3085 = $3089;
                                break;
                            case 'Parser.Reply.value':
                                var $3090 = self.idx;
                                var $3091 = self.code;
                                var $3092 = self.val;
                                var self = Kind$Parser$text$(")", $3090, $3091);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3094 = self.idx;
                                        var $3095 = self.code;
                                        var $3096 = self.err;
                                        var $3097 = Parser$Reply$error$($3094, $3095, $3096);
                                        var $3093 = $3097;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3098 = self.idx;
                                        var $3099 = self.code;
                                        var self = Kind$Parser$stop$($3077, $3098, $3099);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3101 = self.idx;
                                                var $3102 = self.code;
                                                var $3103 = self.err;
                                                var $3104 = Parser$Reply$error$($3101, $3102, $3103);
                                                var $3100 = $3104;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3105 = self.idx;
                                                var $3106 = self.code;
                                                var $3107 = self.val;
                                                var _term$18 = Kind$Term$ref$("Bool.not");
                                                var _term$19 = Kind$Term$app$(_term$18, $3092);
                                                var $3108 = Parser$Reply$value$($3105, $3106, Kind$Term$ori$($3107, _term$19));
                                                var $3100 = $3108;
                                                break;
                                        };
                                        var $3093 = $3100;
                                        break;
                                };
                                var $3085 = $3093;
                                break;
                        };
                        var $3078 = $3085;
                        break;
                };
                var $3070 = $3078;
                break;
        };
        return $3070;
    };
    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);

    function Kind$Parser$left$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3110 = self.idx;
                var $3111 = self.code;
                var $3112 = self.err;
                var $3113 = Parser$Reply$error$($3110, $3111, $3112);
                var $3109 = $3113;
                break;
            case 'Parser.Reply.value':
                var $3114 = self.idx;
                var $3115 = self.code;
                var $3116 = self.val;
                var self = Kind$Parser$text$("left(", $3114, $3115);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3118 = self.idx;
                        var $3119 = self.code;
                        var $3120 = self.err;
                        var $3121 = Parser$Reply$error$($3118, $3119, $3120);
                        var $3117 = $3121;
                        break;
                    case 'Parser.Reply.value':
                        var $3122 = self.idx;
                        var $3123 = self.code;
                        var self = Kind$Parser$term$($3122, $3123);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3125 = self.idx;
                                var $3126 = self.code;
                                var $3127 = self.err;
                                var $3128 = Parser$Reply$error$($3125, $3126, $3127);
                                var $3124 = $3128;
                                break;
                            case 'Parser.Reply.value':
                                var $3129 = self.idx;
                                var $3130 = self.code;
                                var $3131 = self.val;
                                var self = Kind$Parser$text$(")", $3129, $3130);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3133 = self.idx;
                                        var $3134 = self.code;
                                        var $3135 = self.err;
                                        var $3136 = Parser$Reply$error$($3133, $3134, $3135);
                                        var $3132 = $3136;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3137 = self.idx;
                                        var $3138 = self.code;
                                        var self = Kind$Parser$stop$($3116, $3137, $3138);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3140 = self.idx;
                                                var $3141 = self.code;
                                                var $3142 = self.err;
                                                var $3143 = Parser$Reply$error$($3140, $3141, $3142);
                                                var $3139 = $3143;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3144 = self.idx;
                                                var $3145 = self.code;
                                                var $3146 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.left");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3131);
                                                var $3147 = Parser$Reply$value$($3144, $3145, Kind$Term$ori$($3146, _term$21));
                                                var $3139 = $3147;
                                                break;
                                        };
                                        var $3132 = $3139;
                                        break;
                                };
                                var $3124 = $3132;
                                break;
                        };
                        var $3117 = $3124;
                        break;
                };
                var $3109 = $3117;
                break;
        };
        return $3109;
    };
    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);

    function Kind$Parser$right$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3149 = self.idx;
                var $3150 = self.code;
                var $3151 = self.err;
                var $3152 = Parser$Reply$error$($3149, $3150, $3151);
                var $3148 = $3152;
                break;
            case 'Parser.Reply.value':
                var $3153 = self.idx;
                var $3154 = self.code;
                var $3155 = self.val;
                var self = Kind$Parser$text$("right(", $3153, $3154);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3157 = self.idx;
                        var $3158 = self.code;
                        var $3159 = self.err;
                        var $3160 = Parser$Reply$error$($3157, $3158, $3159);
                        var $3156 = $3160;
                        break;
                    case 'Parser.Reply.value':
                        var $3161 = self.idx;
                        var $3162 = self.code;
                        var self = Kind$Parser$term$($3161, $3162);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3164 = self.idx;
                                var $3165 = self.code;
                                var $3166 = self.err;
                                var $3167 = Parser$Reply$error$($3164, $3165, $3166);
                                var $3163 = $3167;
                                break;
                            case 'Parser.Reply.value':
                                var $3168 = self.idx;
                                var $3169 = self.code;
                                var $3170 = self.val;
                                var self = Kind$Parser$text$(")", $3168, $3169);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3172 = self.idx;
                                        var $3173 = self.code;
                                        var $3174 = self.err;
                                        var $3175 = Parser$Reply$error$($3172, $3173, $3174);
                                        var $3171 = $3175;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3176 = self.idx;
                                        var $3177 = self.code;
                                        var self = Kind$Parser$stop$($3155, $3176, $3177);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3179 = self.idx;
                                                var $3180 = self.code;
                                                var $3181 = self.err;
                                                var $3182 = Parser$Reply$error$($3179, $3180, $3181);
                                                var $3178 = $3182;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3183 = self.idx;
                                                var $3184 = self.code;
                                                var $3185 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.right");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3170);
                                                var $3186 = Parser$Reply$value$($3183, $3184, Kind$Term$ori$($3185, _term$21));
                                                var $3178 = $3186;
                                                break;
                                        };
                                        var $3171 = $3178;
                                        break;
                                };
                                var $3163 = $3171;
                                break;
                        };
                        var $3156 = $3163;
                        break;
                };
                var $3148 = $3156;
                break;
        };
        return $3148;
    };
    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3188 = self.idx;
                var $3189 = self.code;
                var $3190 = self.err;
                var $3191 = Parser$Reply$error$($3188, $3189, $3190);
                var $3187 = $3191;
                break;
            case 'Parser.Reply.value':
                var $3192 = self.idx;
                var $3193 = self.code;
                var $3194 = self.val;
                var self = Kind$Parser$text$("apply(", $3192, $3193);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3196 = self.idx;
                        var $3197 = self.code;
                        var $3198 = self.err;
                        var $3199 = Parser$Reply$error$($3196, $3197, $3198);
                        var $3195 = $3199;
                        break;
                    case 'Parser.Reply.value':
                        var $3200 = self.idx;
                        var $3201 = self.code;
                        var self = Kind$Parser$term$($3200, $3201);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3203 = self.idx;
                                var $3204 = self.code;
                                var $3205 = self.err;
                                var $3206 = Parser$Reply$error$($3203, $3204, $3205);
                                var $3202 = $3206;
                                break;
                            case 'Parser.Reply.value':
                                var $3207 = self.idx;
                                var $3208 = self.code;
                                var $3209 = self.val;
                                var self = Kind$Parser$text$(",", $3207, $3208);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3211 = self.idx;
                                        var $3212 = self.code;
                                        var $3213 = self.err;
                                        var $3214 = Parser$Reply$error$($3211, $3212, $3213);
                                        var $3210 = $3214;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3215 = self.idx;
                                        var $3216 = self.code;
                                        var self = Kind$Parser$term$($3215, $3216);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3218 = self.idx;
                                                var $3219 = self.code;
                                                var $3220 = self.err;
                                                var $3221 = Parser$Reply$error$($3218, $3219, $3220);
                                                var $3217 = $3221;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3222 = self.idx;
                                                var $3223 = self.code;
                                                var $3224 = self.val;
                                                var self = Kind$Parser$text$(")", $3222, $3223);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3226 = self.idx;
                                                        var $3227 = self.code;
                                                        var $3228 = self.err;
                                                        var $3229 = Parser$Reply$error$($3226, $3227, $3228);
                                                        var $3225 = $3229;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3230 = self.idx;
                                                        var $3231 = self.code;
                                                        var self = Kind$Parser$stop$($3194, $3230, $3231);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3233 = self.idx;
                                                                var $3234 = self.code;
                                                                var $3235 = self.err;
                                                                var $3236 = Parser$Reply$error$($3233, $3234, $3235);
                                                                var $3232 = $3236;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3237 = self.idx;
                                                                var $3238 = self.code;
                                                                var $3239 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3209);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3224);
                                                                var $3240 = Parser$Reply$value$($3237, $3238, Kind$Term$ori$($3239, _term$30));
                                                                var $3232 = $3240;
                                                                break;
                                                        };
                                                        var $3225 = $3232;
                                                        break;
                                                };
                                                var $3217 = $3225;
                                                break;
                                        };
                                        var $3210 = $3217;
                                        break;
                                };
                                var $3202 = $3210;
                                break;
                        };
                        var $3195 = $3202;
                        break;
                };
                var $3187 = $3195;
                break;
        };
        return $3187;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3242 = self.idx;
                var $3243 = self.code;
                var $3244 = self.err;
                var $3245 = Parser$Reply$error$($3242, $3243, $3244);
                var $3241 = $3245;
                break;
            case 'Parser.Reply.value':
                var $3246 = self.idx;
                var $3247 = self.code;
                var $3248 = self.val;
                var self = Kind$Parser$text$("chain(", $3246, $3247);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3250 = self.idx;
                        var $3251 = self.code;
                        var $3252 = self.err;
                        var $3253 = Parser$Reply$error$($3250, $3251, $3252);
                        var $3249 = $3253;
                        break;
                    case 'Parser.Reply.value':
                        var $3254 = self.idx;
                        var $3255 = self.code;
                        var self = Kind$Parser$term$($3254, $3255);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3257 = self.idx;
                                var $3258 = self.code;
                                var $3259 = self.err;
                                var $3260 = Parser$Reply$error$($3257, $3258, $3259);
                                var $3256 = $3260;
                                break;
                            case 'Parser.Reply.value':
                                var $3261 = self.idx;
                                var $3262 = self.code;
                                var $3263 = self.val;
                                var self = Kind$Parser$text$(",", $3261, $3262);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3265 = self.idx;
                                        var $3266 = self.code;
                                        var $3267 = self.err;
                                        var $3268 = Parser$Reply$error$($3265, $3266, $3267);
                                        var $3264 = $3268;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3269 = self.idx;
                                        var $3270 = self.code;
                                        var self = Kind$Parser$term$($3269, $3270);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3272 = self.idx;
                                                var $3273 = self.code;
                                                var $3274 = self.err;
                                                var $3275 = Parser$Reply$error$($3272, $3273, $3274);
                                                var $3271 = $3275;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3276 = self.idx;
                                                var $3277 = self.code;
                                                var $3278 = self.val;
                                                var self = Kind$Parser$text$(")", $3276, $3277);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3280 = self.idx;
                                                        var $3281 = self.code;
                                                        var $3282 = self.err;
                                                        var $3283 = Parser$Reply$error$($3280, $3281, $3282);
                                                        var $3279 = $3283;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3284 = self.idx;
                                                        var $3285 = self.code;
                                                        var self = Kind$Parser$stop$($3248, $3284, $3285);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3287 = self.idx;
                                                                var $3288 = self.code;
                                                                var $3289 = self.err;
                                                                var $3290 = Parser$Reply$error$($3287, $3288, $3289);
                                                                var $3286 = $3290;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3291 = self.idx;
                                                                var $3292 = self.code;
                                                                var $3293 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3263);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3278);
                                                                var $3294 = Parser$Reply$value$($3291, $3292, Kind$Term$ori$($3293, _term$30));
                                                                var $3286 = $3294;
                                                                break;
                                                        };
                                                        var $3279 = $3286;
                                                        break;
                                                };
                                                var $3271 = $3279;
                                                break;
                                        };
                                        var $3264 = $3271;
                                        break;
                                };
                                var $3256 = $3264;
                                break;
                        };
                        var $3249 = $3256;
                        break;
                };
                var $3241 = $3249;
                break;
        };
        return $3241;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3296 = self.idx;
                var $3297 = self.code;
                var $3298 = self.err;
                var $3299 = Parser$Reply$error$($3296, $3297, $3298);
                var $3295 = $3299;
                break;
            case 'Parser.Reply.value':
                var $3300 = self.idx;
                var $3301 = self.code;
                var $3302 = self.val;
                var self = Kind$Parser$text$("mirror(", $3300, $3301);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3304 = self.idx;
                        var $3305 = self.code;
                        var $3306 = self.err;
                        var $3307 = Parser$Reply$error$($3304, $3305, $3306);
                        var $3303 = $3307;
                        break;
                    case 'Parser.Reply.value':
                        var $3308 = self.idx;
                        var $3309 = self.code;
                        var self = Kind$Parser$term$($3308, $3309);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3311 = self.idx;
                                var $3312 = self.code;
                                var $3313 = self.err;
                                var $3314 = Parser$Reply$error$($3311, $3312, $3313);
                                var $3310 = $3314;
                                break;
                            case 'Parser.Reply.value':
                                var $3315 = self.idx;
                                var $3316 = self.code;
                                var $3317 = self.val;
                                var self = Kind$Parser$text$(")", $3315, $3316);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3319 = self.idx;
                                        var $3320 = self.code;
                                        var $3321 = self.err;
                                        var $3322 = Parser$Reply$error$($3319, $3320, $3321);
                                        var $3318 = $3322;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3323 = self.idx;
                                        var $3324 = self.code;
                                        var self = Kind$Parser$stop$($3302, $3323, $3324);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3326 = self.idx;
                                                var $3327 = self.code;
                                                var $3328 = self.err;
                                                var $3329 = Parser$Reply$error$($3326, $3327, $3328);
                                                var $3325 = $3329;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3330 = self.idx;
                                                var $3331 = self.code;
                                                var $3332 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $3317);
                                                var $3333 = Parser$Reply$value$($3330, $3331, Kind$Term$ori$($3332, _term$22));
                                                var $3325 = $3333;
                                                break;
                                        };
                                        var $3318 = $3325;
                                        break;
                                };
                                var $3310 = $3318;
                                break;
                        };
                        var $3303 = $3310;
                        break;
                };
                var $3295 = $3303;
                break;
        };
        return $3295;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $3334 = _str$1;
        return $3334;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3336 = self.idx;
                var $3337 = self.code;
                var $3338 = self.err;
                var $3339 = Parser$Reply$error$($3336, $3337, $3338);
                var $3335 = $3339;
                break;
            case 'Parser.Reply.value':
                var $3340 = self.idx;
                var $3341 = self.code;
                var $3342 = self.val;
                var self = Kind$Parser$text$("[", $3340, $3341);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3344 = self.idx;
                        var $3345 = self.code;
                        var $3346 = self.err;
                        var $3347 = Parser$Reply$error$($3344, $3345, $3346);
                        var $3343 = $3347;
                        break;
                    case 'Parser.Reply.value':
                        var $3348 = self.idx;
                        var $3349 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($3348)($3349);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3351 = self.idx;
                                var $3352 = self.code;
                                var $3353 = self.err;
                                var $3354 = Parser$Reply$error$($3351, $3352, $3353);
                                var $3350 = $3354;
                                break;
                            case 'Parser.Reply.value':
                                var $3355 = self.idx;
                                var $3356 = self.code;
                                var $3357 = self.val;
                                var self = Kind$Parser$stop$($3342, $3355, $3356);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3359 = self.idx;
                                        var $3360 = self.code;
                                        var $3361 = self.err;
                                        var $3362 = Parser$Reply$error$($3359, $3360, $3361);
                                        var $3358 = $3362;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3363 = self.idx;
                                        var $3364 = self.code;
                                        var $3365 = self.val;
                                        var $3366 = Parser$Reply$value$($3363, $3364, List$fold$($3357, Kind$Term$ori$($3365, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $3367 = Kind$Term$ori$($3365, _term$20);
                                            return $3367;
                                        })));
                                        var $3358 = $3366;
                                        break;
                                };
                                var $3350 = $3358;
                                break;
                        };
                        var $3343 = $3350;
                        break;
                };
                var $3335 = $3343;
                break;
        };
        return $3335;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3369 = self.idx;
                var $3370 = self.code;
                var $3371 = self.err;
                var $3372 = Parser$Reply$error$($3369, $3370, $3371);
                var $3368 = $3372;
                break;
            case 'Parser.Reply.value':
                var $3373 = self.idx;
                var $3374 = self.code;
                var $3375 = self.val;
                var self = Kind$Parser$text$("{", $3373, $3374);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3377 = self.idx;
                        var $3378 = self.code;
                        var $3379 = self.err;
                        var $3380 = Parser$Reply$error$($3377, $3378, $3379);
                        var $3376 = $3380;
                        break;
                    case 'Parser.Reply.value':
                        var $3381 = self.idx;
                        var $3382 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3385 = self.idx;
                                    var $3386 = self.code;
                                    var $3387 = self.err;
                                    var $3388 = Parser$Reply$error$($3385, $3386, $3387);
                                    var $3384 = $3388;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3389 = self.idx;
                                    var $3390 = self.code;
                                    var $3391 = self.val;
                                    var self = Kind$Parser$text$(":", $3389, $3390);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3393 = self.idx;
                                            var $3394 = self.code;
                                            var $3395 = self.err;
                                            var $3396 = Parser$Reply$error$($3393, $3394, $3395);
                                            var $3392 = $3396;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3397 = self.idx;
                                            var $3398 = self.code;
                                            var self = Kind$Parser$term$($3397, $3398);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3400 = self.idx;
                                                    var $3401 = self.code;
                                                    var $3402 = self.err;
                                                    var $3403 = Parser$Reply$error$($3400, $3401, $3402);
                                                    var $3399 = $3403;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3404 = self.idx;
                                                    var $3405 = self.code;
                                                    var $3406 = self.val;
                                                    var $3407 = Parser$Reply$value$($3404, $3405, Pair$new$($3391, $3406));
                                                    var $3399 = $3407;
                                                    break;
                                            };
                                            var $3392 = $3399;
                                            break;
                                    };
                                    var $3384 = $3392;
                                    break;
                            };
                            return $3384;
                        })))($3381)($3382);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3408 = self.idx;
                                var $3409 = self.code;
                                var $3410 = self.err;
                                var $3411 = Parser$Reply$error$($3408, $3409, $3410);
                                var $3383 = $3411;
                                break;
                            case 'Parser.Reply.value':
                                var $3412 = self.idx;
                                var $3413 = self.code;
                                var $3414 = self.val;
                                var self = Kind$Parser$stop$($3375, $3412, $3413);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3416 = self.idx;
                                        var $3417 = self.code;
                                        var $3418 = self.err;
                                        var $3419 = Parser$Reply$error$($3416, $3417, $3418);
                                        var $3415 = $3419;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3420 = self.idx;
                                        var $3421 = self.code;
                                        var $3422 = self.val;
                                        var _list$15 = List$fold$($3414, Kind$Term$ori$($3422, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $3425 = self.fst;
                                                    var $3426 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $3425);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $3426);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $3427 = Kind$Term$ori$($3422, _term$27);
                                                    var $3424 = $3427;
                                                    break;
                                            };
                                            return $3424;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $3423 = Parser$Reply$value$($3420, $3421, Kind$Term$ori$($3422, _term$18));
                                        var $3415 = $3423;
                                        break;
                                };
                                var $3383 = $3415;
                                break;
                        };
                        var $3376 = $3383;
                        break;
                };
                var $3368 = $3376;
                break;
        };
        return $3368;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3429 = self.idx;
                var $3430 = self.code;
                var $3431 = self.err;
                var $3432 = Parser$Reply$error$($3429, $3430, $3431);
                var $3428 = $3432;
                break;
            case 'Parser.Reply.value':
                var $3433 = self.idx;
                var $3434 = self.code;
                var $3435 = self.val;
                var self = Kind$Parser$text$("log(", $3433, $3434);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3437 = self.idx;
                        var $3438 = self.code;
                        var $3439 = self.err;
                        var $3440 = Parser$Reply$error$($3437, $3438, $3439);
                        var $3436 = $3440;
                        break;
                    case 'Parser.Reply.value':
                        var $3441 = self.idx;
                        var $3442 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($3441)($3442);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3444 = self.idx;
                                var $3445 = self.code;
                                var $3446 = self.err;
                                var $3447 = Parser$Reply$error$($3444, $3445, $3446);
                                var $3443 = $3447;
                                break;
                            case 'Parser.Reply.value':
                                var $3448 = self.idx;
                                var $3449 = self.code;
                                var $3450 = self.val;
                                var self = Kind$Parser$term$($3448, $3449);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3452 = self.idx;
                                        var $3453 = self.code;
                                        var $3454 = self.err;
                                        var $3455 = Parser$Reply$error$($3452, $3453, $3454);
                                        var $3451 = $3455;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3456 = self.idx;
                                        var $3457 = self.code;
                                        var $3458 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($3450, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $3460 = _arg$21;
                                            return $3460;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("x", (_x$19 => {
                                            var $3461 = $3458;
                                            return $3461;
                                        })));
                                        var self = Kind$Parser$stop$($3435, $3456, $3457);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3462 = self.idx;
                                                var $3463 = self.code;
                                                var $3464 = self.err;
                                                var $3465 = Parser$Reply$error$($3462, $3463, $3464);
                                                var $3459 = $3465;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3466 = self.idx;
                                                var $3467 = self.code;
                                                var $3468 = self.val;
                                                var $3469 = Parser$Reply$value$($3466, $3467, Kind$Term$ori$($3468, _term$19));
                                                var $3459 = $3469;
                                                break;
                                        };
                                        var $3451 = $3459;
                                        break;
                                };
                                var $3443 = $3451;
                                break;
                        };
                        var $3436 = $3443;
                        break;
                };
                var $3428 = $3436;
                break;
        };
        return $3428;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $3470 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3472 = self.idx;
                    var $3473 = self.code;
                    var $3474 = self.err;
                    var $3475 = Parser$Reply$error$($3472, $3473, $3474);
                    var $3471 = $3475;
                    break;
                case 'Parser.Reply.value':
                    var $3476 = self.idx;
                    var $3477 = self.code;
                    var $3478 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($3476)($3477);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3480 = self.idx;
                            var $3481 = self.code;
                            var $3482 = self.err;
                            var $3483 = Parser$Reply$error$($3480, $3481, $3482);
                            var $3479 = $3483;
                            break;
                        case 'Parser.Reply.value':
                            var $3484 = self.idx;
                            var $3485 = self.code;
                            var self = Kind$Parser$name1$($3484, $3485);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3487 = self.idx;
                                    var $3488 = self.code;
                                    var $3489 = self.err;
                                    var $3490 = Parser$Reply$error$($3487, $3488, $3489);
                                    var $3486 = $3490;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3491 = self.idx;
                                    var $3492 = self.code;
                                    var $3493 = self.val;
                                    var self = Kind$Parser$text$("=", $3491, $3492);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3495 = self.idx;
                                            var $3496 = self.code;
                                            var $3497 = self.err;
                                            var $3498 = Parser$Reply$error$($3495, $3496, $3497);
                                            var $3494 = $3498;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3499 = self.idx;
                                            var $3500 = self.code;
                                            var self = Kind$Parser$term$($3499, $3500);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3502 = self.idx;
                                                    var $3503 = self.code;
                                                    var $3504 = self.err;
                                                    var $3505 = Parser$Reply$error$($3502, $3503, $3504);
                                                    var $3501 = $3505;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3506 = self.idx;
                                                    var $3507 = self.code;
                                                    var $3508 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3506, $3507);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3510 = self.idx;
                                                            var $3511 = self.code;
                                                            var $3512 = self.err;
                                                            var $3513 = Parser$Reply$error$($3510, $3511, $3512);
                                                            var $3509 = $3513;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3514 = self.idx;
                                                            var $3515 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3514)($3515);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3517 = self.idx;
                                                                    var $3518 = self.code;
                                                                    var $3519 = self.err;
                                                                    var $3520 = Parser$Reply$error$($3517, $3518, $3519);
                                                                    var $3516 = $3520;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3521 = self.idx;
                                                                    var $3522 = self.code;
                                                                    var $3523 = self.val;
                                                                    var self = Kind$Parser$stop$($3478, $3521, $3522);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3525 = self.idx;
                                                                            var $3526 = self.code;
                                                                            var $3527 = self.err;
                                                                            var $3528 = Parser$Reply$error$($3525, $3526, $3527);
                                                                            var $3524 = $3528;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3529 = self.idx;
                                                                            var $3530 = self.code;
                                                                            var $3531 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $3508);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($3493, (_x$33 => {
                                                                                var $3533 = $3523;
                                                                                return $3533;
                                                                            })));
                                                                            var $3532 = Parser$Reply$value$($3529, $3530, Kind$Term$ori$($3531, _term$33));
                                                                            var $3524 = $3532;
                                                                            break;
                                                                    };
                                                                    var $3516 = $3524;
                                                                    break;
                                                            };
                                                            var $3509 = $3516;
                                                            break;
                                                    };
                                                    var $3501 = $3509;
                                                    break;
                                            };
                                            var $3494 = $3501;
                                            break;
                                    };
                                    var $3486 = $3494;
                                    break;
                            };
                            var $3479 = $3486;
                            break;
                    };
                    var $3471 = $3479;
                    break;
            };
            return $3471;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3535 = self.idx;
                    var $3536 = self.code;
                    var $3537 = self.err;
                    var $3538 = Parser$Reply$error$($3535, $3536, $3537);
                    var $3534 = $3538;
                    break;
                case 'Parser.Reply.value':
                    var $3539 = self.idx;
                    var $3540 = self.code;
                    var $3541 = self.val;
                    var self = Kind$Parser$text$("let ", $3539, $3540);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3543 = self.idx;
                            var $3544 = self.code;
                            var $3545 = self.err;
                            var $3546 = Parser$Reply$error$($3543, $3544, $3545);
                            var $3542 = $3546;
                            break;
                        case 'Parser.Reply.value':
                            var $3547 = self.idx;
                            var $3548 = self.code;
                            var self = Kind$Parser$name1$($3547, $3548);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3550 = self.idx;
                                    var $3551 = self.code;
                                    var $3552 = self.err;
                                    var $3553 = Parser$Reply$error$($3550, $3551, $3552);
                                    var $3549 = $3553;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3554 = self.idx;
                                    var $3555 = self.code;
                                    var $3556 = self.val;
                                    var self = Kind$Parser$text$("=", $3554, $3555);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3558 = self.idx;
                                            var $3559 = self.code;
                                            var $3560 = self.err;
                                            var $3561 = Parser$Reply$error$($3558, $3559, $3560);
                                            var $3557 = $3561;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3562 = self.idx;
                                            var $3563 = self.code;
                                            var self = Kind$Parser$term$($3562, $3563);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3565 = self.idx;
                                                    var $3566 = self.code;
                                                    var $3567 = self.err;
                                                    var $3568 = Parser$Reply$error$($3565, $3566, $3567);
                                                    var $3564 = $3568;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3569 = self.idx;
                                                    var $3570 = self.code;
                                                    var $3571 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3569, $3570);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3573 = self.idx;
                                                            var $3574 = self.code;
                                                            var $3575 = self.err;
                                                            var $3576 = Parser$Reply$error$($3573, $3574, $3575);
                                                            var $3572 = $3576;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3577 = self.idx;
                                                            var $3578 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3577)($3578);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3580 = self.idx;
                                                                    var $3581 = self.code;
                                                                    var $3582 = self.err;
                                                                    var $3583 = Parser$Reply$error$($3580, $3581, $3582);
                                                                    var $3579 = $3583;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3584 = self.idx;
                                                                    var $3585 = self.code;
                                                                    var $3586 = self.val;
                                                                    var self = Kind$Parser$stop$($3541, $3584, $3585);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3588 = self.idx;
                                                                            var $3589 = self.code;
                                                                            var $3590 = self.err;
                                                                            var $3591 = Parser$Reply$error$($3588, $3589, $3590);
                                                                            var $3587 = $3591;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3592 = self.idx;
                                                                            var $3593 = self.code;
                                                                            var $3594 = self.val;
                                                                            var $3595 = Parser$Reply$value$($3592, $3593, Kind$Term$ori$($3594, Kind$Term$let$($3556, $3571, (_x$28 => {
                                                                                var $3596 = $3586;
                                                                                return $3596;
                                                                            }))));
                                                                            var $3587 = $3595;
                                                                            break;
                                                                    };
                                                                    var $3579 = $3587;
                                                                    break;
                                                            };
                                                            var $3572 = $3579;
                                                            break;
                                                    };
                                                    var $3564 = $3572;
                                                    break;
                                            };
                                            var $3557 = $3564;
                                            break;
                                    };
                                    var $3549 = $3557;
                                    break;
                            };
                            var $3542 = $3549;
                            break;
                    };
                    var $3534 = $3542;
                    break;
            };
            return $3534;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3598 = self.idx;
                    var $3599 = self.code;
                    var $3600 = self.err;
                    var $3601 = Parser$Reply$error$($3598, $3599, $3600);
                    var $3597 = $3601;
                    break;
                case 'Parser.Reply.value':
                    var $3602 = self.idx;
                    var $3603 = self.code;
                    var $3604 = self.val;
                    var self = Kind$Parser$text$("return ", $3602, $3603);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3606 = self.idx;
                            var $3607 = self.code;
                            var $3608 = self.err;
                            var $3609 = Parser$Reply$error$($3606, $3607, $3608);
                            var $3605 = $3609;
                            break;
                        case 'Parser.Reply.value':
                            var $3610 = self.idx;
                            var $3611 = self.code;
                            var self = Kind$Parser$term$($3610, $3611);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3613 = self.idx;
                                    var $3614 = self.code;
                                    var $3615 = self.err;
                                    var $3616 = Parser$Reply$error$($3613, $3614, $3615);
                                    var $3612 = $3616;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3617 = self.idx;
                                    var $3618 = self.code;
                                    var $3619 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3617, $3618);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3621 = self.idx;
                                            var $3622 = self.code;
                                            var $3623 = self.err;
                                            var $3624 = Parser$Reply$error$($3621, $3622, $3623);
                                            var $3620 = $3624;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3625 = self.idx;
                                            var $3626 = self.code;
                                            var self = Kind$Parser$stop$($3604, $3625, $3626);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3628 = self.idx;
                                                    var $3629 = self.code;
                                                    var $3630 = self.err;
                                                    var $3631 = Parser$Reply$error$($3628, $3629, $3630);
                                                    var $3627 = $3631;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3632 = self.idx;
                                                    var $3633 = self.code;
                                                    var $3634 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $3619);
                                                    var $3635 = Parser$Reply$value$($3632, $3633, Kind$Term$ori$($3634, _term$22));
                                                    var $3627 = $3635;
                                                    break;
                                            };
                                            var $3620 = $3627;
                                            break;
                                    };
                                    var $3612 = $3620;
                                    break;
                            };
                            var $3605 = $3612;
                            break;
                    };
                    var $3597 = $3605;
                    break;
            };
            return $3597;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3637 = self.idx;
                    var $3638 = self.code;
                    var $3639 = self.err;
                    var $3640 = Parser$Reply$error$($3637, $3638, $3639);
                    var $3636 = $3640;
                    break;
                case 'Parser.Reply.value':
                    var $3641 = self.idx;
                    var $3642 = self.code;
                    var $3643 = self.val;
                    var self = Kind$Parser$term$($3641, $3642);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3645 = self.idx;
                            var $3646 = self.code;
                            var $3647 = self.err;
                            var $3648 = Parser$Reply$error$($3645, $3646, $3647);
                            var $3644 = $3648;
                            break;
                        case 'Parser.Reply.value':
                            var $3649 = self.idx;
                            var $3650 = self.code;
                            var $3651 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $3649, $3650);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3653 = self.idx;
                                    var $3654 = self.code;
                                    var $3655 = self.err;
                                    var $3656 = Parser$Reply$error$($3653, $3654, $3655);
                                    var $3652 = $3656;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3657 = self.idx;
                                    var $3658 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3657)($3658);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3660 = self.idx;
                                            var $3661 = self.code;
                                            var $3662 = self.err;
                                            var $3663 = Parser$Reply$error$($3660, $3661, $3662);
                                            var $3659 = $3663;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3664 = self.idx;
                                            var $3665 = self.code;
                                            var $3666 = self.val;
                                            var self = Kind$Parser$stop$($3643, $3664, $3665);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3668 = self.idx;
                                                    var $3669 = self.code;
                                                    var $3670 = self.err;
                                                    var $3671 = Parser$Reply$error$($3668, $3669, $3670);
                                                    var $3667 = $3671;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3672 = self.idx;
                                                    var $3673 = self.code;
                                                    var $3674 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $3651);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3676 = $3666;
                                                        return $3676;
                                                    })));
                                                    var $3675 = Parser$Reply$value$($3672, $3673, Kind$Term$ori$($3674, _term$24));
                                                    var $3667 = $3675;
                                                    break;
                                            };
                                            var $3659 = $3667;
                                            break;
                                    };
                                    var $3652 = $3659;
                                    break;
                            };
                            var $3644 = $3652;
                            break;
                    };
                    var $3636 = $3644;
                    break;
            };
            return $3636;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3678 = self.idx;
                    var $3679 = self.code;
                    var $3680 = self.err;
                    var $3681 = Parser$Reply$error$($3678, $3679, $3680);
                    var $3677 = $3681;
                    break;
                case 'Parser.Reply.value':
                    var $3682 = self.idx;
                    var $3683 = self.code;
                    var $3684 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3682, $3683);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3686 = self.idx;
                            var $3687 = self.code;
                            var $3688 = self.err;
                            var $3689 = Parser$Reply$error$($3686, $3687, $3688);
                            var $3685 = $3689;
                            break;
                        case 'Parser.Reply.value':
                            var $3690 = self.idx;
                            var $3691 = self.code;
                            var $3692 = Parser$Reply$value$($3690, $3691, $3684);
                            var $3685 = $3692;
                            break;
                    };
                    var $3677 = $3685;
                    break;
            };
            return $3677;
        }), List$nil))))));
        return $3470;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3694 = self.idx;
                var $3695 = self.code;
                var $3696 = self.err;
                var $3697 = Parser$Reply$error$($3694, $3695, $3696);
                var $3693 = $3697;
                break;
            case 'Parser.Reply.value':
                var $3698 = self.idx;
                var $3699 = self.code;
                var self = Kind$Parser$name1$($3698, $3699);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3701 = self.idx;
                        var $3702 = self.code;
                        var $3703 = self.err;
                        var $3704 = Parser$Reply$error$($3701, $3702, $3703);
                        var $3700 = $3704;
                        break;
                    case 'Parser.Reply.value':
                        var $3705 = self.idx;
                        var $3706 = self.code;
                        var $3707 = self.val;
                        var self = Parser$text$(" {", $3705, $3706);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3709 = self.idx;
                                var $3710 = self.code;
                                var $3711 = self.err;
                                var $3712 = Parser$Reply$error$($3709, $3710, $3711);
                                var $3708 = $3712;
                                break;
                            case 'Parser.Reply.value':
                                var $3713 = self.idx;
                                var $3714 = self.code;
                                var self = Kind$Parser$do$statements$($3707)($3713)($3714);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3716 = self.idx;
                                        var $3717 = self.code;
                                        var $3718 = self.err;
                                        var $3719 = Parser$Reply$error$($3716, $3717, $3718);
                                        var $3715 = $3719;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3720 = self.idx;
                                        var $3721 = self.code;
                                        var $3722 = self.val;
                                        var self = Kind$Parser$text$("}", $3720, $3721);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3724 = self.idx;
                                                var $3725 = self.code;
                                                var $3726 = self.err;
                                                var $3727 = Parser$Reply$error$($3724, $3725, $3726);
                                                var $3723 = $3727;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3728 = self.idx;
                                                var $3729 = self.code;
                                                var $3730 = Parser$Reply$value$($3728, $3729, $3722);
                                                var $3723 = $3730;
                                                break;
                                        };
                                        var $3715 = $3723;
                                        break;
                                };
                                var $3708 = $3715;
                                break;
                        };
                        var $3700 = $3708;
                        break;
                };
                var $3693 = $3700;
                break;
        };
        return $3693;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3732 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $3731 = $3732;
                break;
            case 'Parser.Reply.value':
                var $3733 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $3731 = $3733;
                break;
        };
        return $3731;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3734 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3734;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3736 = self.idx;
                var $3737 = self.code;
                var $3738 = self.err;
                var $3739 = Parser$Reply$error$($3736, $3737, $3738);
                var $3735 = $3739;
                break;
            case 'Parser.Reply.value':
                var $3740 = self.idx;
                var $3741 = self.code;
                var $3742 = self.val;
                var self = $3742;
                if (self) {
                    var $3744 = Parser$fail("Avoided.");
                    var $3743 = $3744;
                } else {
                    var $3745 = _parse$3;
                    var $3743 = $3745;
                };
                var $3743 = $3743($3740)($3741);
                var $3735 = $3743;
                break;
        };
        return $3735;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $3747 = self.value;
                var $3748 = $3747;
                var $3746 = $3748;
                break;
            case 'Maybe.none':
                var $3749 = _a$3;
                var $3746 = $3749;
                break;
        };
        return $3746;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $3751 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $3750 = $3751;
        } else {
            var $3752 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($3752);
            var $3753 = Kind$Term$app$(_func$3, _argm$4);
            var $3750 = $3753;
        };
        return $3750;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3755 = self.slice(0, -1);
                var $3756 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($3755));
                var $3754 = $3756;
                break;
            case 'i':
                var $3757 = self.slice(0, -1);
                var $3758 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($3757));
                var $3754 = $3758;
                break;
            case 'e':
                var $3759 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $3754 = $3759;
                break;
        };
        return $3754;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $3760 = _term$6;
        return $3760;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $3762 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $3761 = $3762;
        } else {
            var $3763 = self.charCodeAt(0);
            var $3764 = self.slice(1);
            var _char$4 = Kind$Term$chr$($3763);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($3764));
            var $3765 = _term$7;
            var $3761 = $3765;
        };
        return $3761;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $3767 = self.name;
                var self = Kind$Map$get$($3767, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $3769 = self.value;
                        var self = $3769;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $3771 = self.term;
                                var $3772 = Kind$Term$reduce$($3771, _defs$2);
                                var $3770 = $3772;
                                break;
                        };
                        var $3768 = $3770;
                        break;
                    case 'Maybe.none':
                        var $3773 = Kind$Term$ref$($3767);
                        var $3768 = $3773;
                        break;
                };
                var $3766 = $3768;
                break;
            case 'Kind.Term.app':
                var $3774 = self.func;
                var $3775 = self.argm;
                var _func$5 = Kind$Term$reduce$($3774, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $3777 = self.body;
                        var $3778 = Kind$Term$reduce$($3777($3775), _defs$2);
                        var $3776 = $3778;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $3779 = _term$1;
                        var $3776 = $3779;
                        break;
                };
                var $3766 = $3776;
                break;
            case 'Kind.Term.let':
                var $3780 = self.expr;
                var $3781 = self.body;
                var $3782 = Kind$Term$reduce$($3781($3780), _defs$2);
                var $3766 = $3782;
                break;
            case 'Kind.Term.def':
                var $3783 = self.expr;
                var $3784 = self.body;
                var $3785 = Kind$Term$reduce$($3784($3783), _defs$2);
                var $3766 = $3785;
                break;
            case 'Kind.Term.ann':
                var $3786 = self.term;
                var $3787 = Kind$Term$reduce$($3786, _defs$2);
                var $3766 = $3787;
                break;
            case 'Kind.Term.nat':
                var $3788 = self.natx;
                var $3789 = Kind$Term$reduce$(Kind$Term$unroll_nat$($3788), _defs$2);
                var $3766 = $3789;
                break;
            case 'Kind.Term.chr':
                var $3790 = self.chrx;
                var $3791 = Kind$Term$reduce$(Kind$Term$unroll_chr$($3790), _defs$2);
                var $3766 = $3791;
                break;
            case 'Kind.Term.str':
                var $3792 = self.strx;
                var $3793 = Kind$Term$reduce$(Kind$Term$unroll_str$($3792), _defs$2);
                var $3766 = $3793;
                break;
            case 'Kind.Term.ori':
                var $3794 = self.expr;
                var $3795 = Kind$Term$reduce$($3794, _defs$2);
                var $3766 = $3795;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $3796 = _term$1;
                var $3766 = $3796;
                break;
        };
        return $3766;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $3798 = self.name;
                var $3799 = $3798;
                var $3797 = $3799;
                break;
            case 'Kind.Term.ref':
                var $3800 = self.name;
                var $3801 = $3800;
                var $3797 = $3801;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $3802 = "self";
                var $3797 = $3802;
                break;
        };
        return $3797;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $3803 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3803;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3805 = self.idx;
                var $3806 = self.code;
                var $3807 = self.err;
                var $3808 = Parser$Reply$error$($3805, $3806, $3807);
                var $3804 = $3808;
                break;
            case 'Parser.Reply.value':
                var $3809 = self.idx;
                var $3810 = self.code;
                var $3811 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3813 = self.idx;
                            var $3814 = self.code;
                            var $3815 = self.err;
                            var $3816 = Parser$Reply$error$($3813, $3814, $3815);
                            var $3812 = $3816;
                            break;
                        case 'Parser.Reply.value':
                            var $3817 = self.idx;
                            var $3818 = self.code;
                            var $3819 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3822 = self.idx;
                                        var $3823 = self.code;
                                        var $3824 = self.err;
                                        var $3825 = Parser$Reply$error$($3822, $3823, $3824);
                                        var $3821 = $3825;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3826 = self.idx;
                                        var $3827 = self.code;
                                        var self = Kind$Parser$term$($3826, $3827);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3829 = self.idx;
                                                var $3830 = self.code;
                                                var $3831 = self.err;
                                                var $3832 = Parser$Reply$error$($3829, $3830, $3831);
                                                var $3828 = $3832;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3833 = self.idx;
                                                var $3834 = self.code;
                                                var $3835 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3833, $3834);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3837 = self.idx;
                                                        var $3838 = self.code;
                                                        var $3839 = self.err;
                                                        var $3840 = Parser$Reply$error$($3837, $3838, $3839);
                                                        var $3836 = $3840;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3841 = self.idx;
                                                        var $3842 = self.code;
                                                        var $3843 = Parser$Reply$value$($3841, $3842, $3835);
                                                        var $3836 = $3843;
                                                        break;
                                                };
                                                var $3828 = $3836;
                                                break;
                                        };
                                        var $3821 = $3828;
                                        break;
                                };
                                return $3821;
                            }), $3817, $3818);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3844 = self.idx;
                                    var $3845 = self.code;
                                    var $3846 = self.err;
                                    var $3847 = Parser$Reply$error$($3844, $3845, $3846);
                                    var $3820 = $3847;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3848 = self.idx;
                                    var $3849 = self.code;
                                    var $3850 = self.val;
                                    var $3851 = Parser$Reply$value$($3848, $3849, Kind$Ann$new$($3819, Kind$Term$ref$($3819), $3850));
                                    var $3820 = $3851;
                                    break;
                            };
                            var $3812 = $3820;
                            break;
                    };
                    return $3812;
                }))($3809)($3810);
                var $3804 = $3811;
                break;
        };
        return $3804;
    }), List$cons$((_idx$1 => _code$2 => {
        var $3852 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $3852;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3854 = self.idx;
                var $3855 = self.code;
                var $3856 = self.err;
                var $3857 = Parser$Reply$error$($3854, $3855, $3856);
                var $3853 = $3857;
                break;
            case 'Parser.Reply.value':
                var $3858 = self.idx;
                var $3859 = self.code;
                var $3860 = self.val;
                var self = Kind$Parser$term$($3858, $3859);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3862 = self.idx;
                        var $3863 = self.code;
                        var $3864 = self.err;
                        var $3865 = Parser$Reply$error$($3862, $3863, $3864);
                        var $3861 = $3865;
                        break;
                    case 'Parser.Reply.value':
                        var $3866 = self.idx;
                        var $3867 = self.code;
                        var $3868 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $3866, $3867);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3870 = self.idx;
                                var $3871 = self.code;
                                var $3872 = self.err;
                                var $3873 = Parser$Reply$error$($3870, $3871, $3872);
                                var $3869 = $3873;
                                break;
                            case 'Parser.Reply.value':
                                var $3874 = self.idx;
                                var $3875 = self.code;
                                var $3876 = Parser$Reply$value$($3874, $3875, Pair$new$($3860, $3868));
                                var $3869 = $3876;
                                break;
                        };
                        var $3861 = $3869;
                        break;
                };
                var $3853 = $3861;
                break;
        };
        return $3853;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $3878 = self.head;
                var $3879 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $3879);
                var self = $3878;
                switch (self._) {
                    case 'Pair.new':
                        var $3881 = self.fst;
                        var $3882 = self.snd;
                        var self = $3881;
                        switch (self._) {
                            case 'List.cons':
                                var $3884 = self.head;
                                var $3885 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($3884, _map$5), List$nil);
                                var $3886 = Kind$Map$set$($3884, List$cons$(Pair$new$($3885, $3882), _rest$10), _map$5);
                                var $3883 = $3886;
                                break;
                            case 'List.nil':
                                var $3887 = _map$5;
                                var $3883 = $3887;
                                break;
                        };
                        var $3880 = $3883;
                        break;
                };
                var $3877 = $3880;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $3889 = self.value;
                        var $3890 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $3889), List$nil), Kind$Map$new);
                        var $3888 = $3890;
                        break;
                    case 'Maybe.none':
                        var $3891 = Kind$Map$new;
                        var $3888 = $3891;
                        break;
                };
                var $3877 = $3888;
                break;
        };
        return $3877;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $3893 = self.val;
                var $3894 = self.lft;
                var $3895 = self.rgt;
                var self = $3893;
                switch (self._) {
                    case 'Maybe.some':
                        var $3897 = self.value;
                        var $3898 = Maybe$some$(_fn$3($3897));
                        var _val$8 = $3898;
                        break;
                    case 'Maybe.none':
                        var $3899 = Maybe$none;
                        var _val$8 = $3899;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $3894);
                var _rgt$10 = BitsMap$map$(_fn$3, $3895);
                var $3896 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $3892 = $3896;
                break;
            case 'BitsMap.new':
                var $3900 = BitsMap$new;
                var $3892 = $3900;
                break;
        };
        return $3892;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $3901 = BitsMap$map$(_fn$3, _map$4);
        return $3901;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $3902 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $3902;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $3904 = self.head;
                var $3905 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($3904);
                var _expr$11 = Pair$snd$($3904);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $3907 = Kind$Parser$case$build$($3905, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $3907;
                }), _group$9);
                var $3906 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $3903 = $3906;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $3909 = self.head;
                        var $3910 = Pair$snd$($3909);
                        var $3908 = $3910;
                        break;
                    case 'List.nil':
                        var $3911 = ((console.log(("MISSING CASE" + String$nil)), (_x$7 => {
                            var $3912 = Kind$Term$ref$("missing_case");
                            return $3912;
                        })()));
                        var $3908 = $3911;
                        break;
                };
                var $3903 = $3908;
                break;
        };
        return $3903;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3914 = self.idx;
                var $3915 = self.code;
                var $3916 = self.err;
                var $3917 = Parser$Reply$error$($3914, $3915, $3916);
                var $3913 = $3917;
                break;
            case 'Parser.Reply.value':
                var $3918 = self.idx;
                var $3919 = self.code;
                var $3920 = self.val;
                var self = Kind$Parser$text$("case ", $3918, $3919);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3922 = self.idx;
                        var $3923 = self.code;
                        var $3924 = self.err;
                        var $3925 = Parser$Reply$error$($3922, $3923, $3924);
                        var $3921 = $3925;
                        break;
                    case 'Parser.Reply.value':
                        var $3926 = self.idx;
                        var $3927 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3930 = self.idx;
                                    var $3931 = self.code;
                                    var $3932 = self.err;
                                    var $3933 = Parser$Reply$error$($3930, $3931, $3932);
                                    var $3929 = $3933;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3934 = self.idx;
                                    var $3935 = self.code;
                                    var $3936 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3939 = self.idx;
                                                var $3940 = self.code;
                                                var $3941 = self.err;
                                                var $3942 = Parser$Reply$error$($3939, $3940, $3941);
                                                var $3938 = $3942;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3943 = self.idx;
                                                var $3944 = self.code;
                                                var self = Kind$Parser$name1$($3943, $3944);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3946 = self.idx;
                                                        var $3947 = self.code;
                                                        var $3948 = self.err;
                                                        var $3949 = Parser$Reply$error$($3946, $3947, $3948);
                                                        var $3945 = $3949;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3950 = self.idx;
                                                        var $3951 = self.code;
                                                        var $3952 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $3950, $3951);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3954 = self.idx;
                                                                var $3955 = self.code;
                                                                var $3956 = self.err;
                                                                var $3957 = Parser$Reply$error$($3954, $3955, $3956);
                                                                var $3953 = $3957;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3958 = self.idx;
                                                                var $3959 = self.code;
                                                                var $3960 = Parser$Reply$value$($3958, $3959, $3952);
                                                                var $3953 = $3960;
                                                                break;
                                                        };
                                                        var $3945 = $3953;
                                                        break;
                                                };
                                                var $3938 = $3945;
                                                break;
                                        };
                                        return $3938;
                                    }), $3934, $3935);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3961 = self.idx;
                                            var $3962 = self.code;
                                            var $3963 = self.err;
                                            var $3964 = Parser$Reply$error$($3961, $3962, $3963);
                                            var $3937 = $3964;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3965 = self.idx;
                                            var $3966 = self.code;
                                            var $3967 = self.val;
                                            var _name$17 = Maybe$default$($3967, Kind$Term$extract_name$($3936));
                                            var $3968 = Parser$Reply$value$($3965, $3966, Pair$new$(_name$17, $3936));
                                            var $3937 = $3968;
                                            break;
                                    };
                                    var $3929 = $3937;
                                    break;
                            };
                            return $3929;
                        }), $3926, $3927);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3969 = self.idx;
                                var $3970 = self.code;
                                var $3971 = self.err;
                                var $3972 = Parser$Reply$error$($3969, $3970, $3971);
                                var $3928 = $3972;
                                break;
                            case 'Parser.Reply.value':
                                var $3973 = self.idx;
                                var $3974 = self.code;
                                var $3975 = self.val;
                                var self = Kind$Parser$case$with($3973)($3974);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3977 = self.idx;
                                        var $3978 = self.code;
                                        var $3979 = self.err;
                                        var $3980 = Parser$Reply$error$($3977, $3978, $3979);
                                        var $3976 = $3980;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3981 = self.idx;
                                        var $3982 = self.code;
                                        var $3983 = self.val;
                                        var self = Kind$Parser$text$("{", $3981, $3982);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3985 = self.idx;
                                                var $3986 = self.code;
                                                var $3987 = self.err;
                                                var $3988 = Parser$Reply$error$($3985, $3986, $3987);
                                                var $3984 = $3988;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3989 = self.idx;
                                                var $3990 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($3989)($3990);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3992 = self.idx;
                                                        var $3993 = self.code;
                                                        var $3994 = self.err;
                                                        var $3995 = Parser$Reply$error$($3992, $3993, $3994);
                                                        var $3991 = $3995;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3996 = self.idx;
                                                        var $3997 = self.code;
                                                        var $3998 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $3996, $3997);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4000 = self.idx;
                                                                var $4001 = self.code;
                                                                var $4002 = self.err;
                                                                var $4003 = Parser$Reply$error$($4000, $4001, $4002);
                                                                var $3999 = $4003;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4004 = self.idx;
                                                                var $4005 = self.code;
                                                                var $4006 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $4009 = self.idx;
                                                                            var $4010 = self.code;
                                                                            var $4011 = self.err;
                                                                            var $4012 = Parser$Reply$error$($4009, $4010, $4011);
                                                                            var $4008 = $4012;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $4013 = self.idx;
                                                                            var $4014 = self.code;
                                                                            var self = Kind$Parser$term$($4013, $4014);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4016 = self.idx;
                                                                                    var $4017 = self.code;
                                                                                    var $4018 = self.err;
                                                                                    var $4019 = Parser$Reply$error$($4016, $4017, $4018);
                                                                                    var $4015 = $4019;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4020 = self.idx;
                                                                                    var $4021 = self.code;
                                                                                    var $4022 = self.val;
                                                                                    var $4023 = Parser$Reply$value$($4020, $4021, $4022);
                                                                                    var $4015 = $4023;
                                                                                    break;
                                                                            };
                                                                            var $4008 = $4015;
                                                                            break;
                                                                    };
                                                                    return $4008;
                                                                }), $4004, $4005);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4024 = self.idx;
                                                                        var $4025 = self.code;
                                                                        var $4026 = self.err;
                                                                        var $4027 = Parser$Reply$error$($4024, $4025, $4026);
                                                                        var $4007 = $4027;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4028 = self.idx;
                                                                        var $4029 = self.code;
                                                                        var $4030 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4033 = self.idx;
                                                                                    var $4034 = self.code;
                                                                                    var $4035 = self.err;
                                                                                    var $4036 = Parser$Reply$error$($4033, $4034, $4035);
                                                                                    var $4032 = $4036;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4037 = self.idx;
                                                                                    var $4038 = self.code;
                                                                                    var $4039 = Kind$Parser$term$($4037, $4038);
                                                                                    var $4032 = $4039;
                                                                                    break;
                                                                            };
                                                                            return $4032;
                                                                        }), $4028, $4029);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $4040 = self.idx;
                                                                                var $4041 = self.code;
                                                                                var $4042 = self.err;
                                                                                var $4043 = Parser$Reply$error$($4040, $4041, $4042);
                                                                                var $4031 = $4043;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $4044 = self.idx;
                                                                                var $4045 = self.code;
                                                                                var $4046 = self.val;
                                                                                var self = $4046;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $4048 = self.value;
                                                                                        var $4049 = Maybe$some$($4048);
                                                                                        var _moti$30 = $4049;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $4006;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $4051 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $4050 = $4051;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $4052 = Maybe$none;
                                                                                                var $4050 = $4052;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $4050;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($3920, $4044, $4045);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $4053 = self.idx;
                                                                                        var $4054 = self.code;
                                                                                        var $4055 = self.err;
                                                                                        var $4056 = Parser$Reply$error$($4053, $4054, $4055);
                                                                                        var $4047 = $4056;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $4057 = self.idx;
                                                                                        var $4058 = self.code;
                                                                                        var $4059 = self.val;
                                                                                        var $4060 = Parser$Reply$value$($4057, $4058, Kind$Parser$case$build$($3975, $3983, $3998, $4030, _moti$30, $4059));
                                                                                        var $4047 = $4060;
                                                                                        break;
                                                                                };
                                                                                var $4031 = $4047;
                                                                                break;
                                                                        };
                                                                        var $4007 = $4031;
                                                                        break;
                                                                };
                                                                var $3999 = $4007;
                                                                break;
                                                        };
                                                        var $3991 = $3999;
                                                        break;
                                                };
                                                var $3984 = $3991;
                                                break;
                                        };
                                        var $3976 = $3984;
                                        break;
                                };
                                var $3928 = $3976;
                                break;
                        };
                        var $3921 = $3928;
                        break;
                };
                var $3913 = $3921;
                break;
        };
        return $3913;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4062 = self.idx;
                var $4063 = self.code;
                var $4064 = self.err;
                var $4065 = Parser$Reply$error$($4062, $4063, $4064);
                var $4061 = $4065;
                break;
            case 'Parser.Reply.value':
                var $4066 = self.idx;
                var $4067 = self.code;
                var $4068 = self.val;
                var self = Kind$Parser$text$("open ", $4066, $4067);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4070 = self.idx;
                        var $4071 = self.code;
                        var $4072 = self.err;
                        var $4073 = Parser$Reply$error$($4070, $4071, $4072);
                        var $4069 = $4073;
                        break;
                    case 'Parser.Reply.value':
                        var $4074 = self.idx;
                        var $4075 = self.code;
                        var self = Kind$Parser$spaces($4074)($4075);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4077 = self.idx;
                                var $4078 = self.code;
                                var $4079 = self.err;
                                var $4080 = Parser$Reply$error$($4077, $4078, $4079);
                                var $4076 = $4080;
                                break;
                            case 'Parser.Reply.value':
                                var $4081 = self.idx;
                                var $4082 = self.code;
                                var self = Kind$Parser$term$($4081, $4082);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4084 = self.idx;
                                        var $4085 = self.code;
                                        var $4086 = self.err;
                                        var $4087 = Parser$Reply$error$($4084, $4085, $4086);
                                        var $4083 = $4087;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4088 = self.idx;
                                        var $4089 = self.code;
                                        var $4090 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4093 = self.idx;
                                                    var $4094 = self.code;
                                                    var $4095 = self.err;
                                                    var $4096 = Parser$Reply$error$($4093, $4094, $4095);
                                                    var $4092 = $4096;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4097 = self.idx;
                                                    var $4098 = self.code;
                                                    var $4099 = Kind$Parser$name1$($4097, $4098);
                                                    var $4092 = $4099;
                                                    break;
                                            };
                                            return $4092;
                                        }), $4088, $4089);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4100 = self.idx;
                                                var $4101 = self.code;
                                                var $4102 = self.err;
                                                var $4103 = Parser$Reply$error$($4100, $4101, $4102);
                                                var $4091 = $4103;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4104 = self.idx;
                                                var $4105 = self.code;
                                                var $4106 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $4104, $4105);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4108 = self.idx;
                                                        var $4109 = self.code;
                                                        var $4110 = self.err;
                                                        var $4111 = Parser$Reply$error$($4108, $4109, $4110);
                                                        var $4107 = $4111;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4112 = self.idx;
                                                        var $4113 = self.code;
                                                        var self = $4106;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $4115 = self.value;
                                                                var $4116 = $4115;
                                                                var _name$21 = $4116;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($4090, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $4118 = self.name;
                                                                        var $4119 = $4118;
                                                                        var $4117 = $4119;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $4120 = self.name;
                                                                        var $4121 = $4120;
                                                                        var $4117 = $4121;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $4122 = Kind$Name$read$("self");
                                                                        var $4117 = $4122;
                                                                        break;
                                                                };
                                                                var _name$21 = $4117;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($4112, $4113);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4123 = self.idx;
                                                                var $4124 = self.code;
                                                                var $4125 = self.err;
                                                                var $4126 = Parser$Reply$error$($4123, $4124, $4125);
                                                                var $4114 = $4126;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4127 = self.idx;
                                                                var $4128 = self.code;
                                                                var $4129 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $4129, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($4068, $4127, $4128);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4131 = self.idx;
                                                                        var $4132 = self.code;
                                                                        var $4133 = self.err;
                                                                        var $4134 = Parser$Reply$error$($4131, $4132, $4133);
                                                                        var $4130 = $4134;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4135 = self.idx;
                                                                        var $4136 = self.code;
                                                                        var $4137 = self.val;
                                                                        var $4138 = Parser$Reply$value$($4135, $4136, Kind$Term$ori$($4137, Kind$Term$cse$(Bits$e, $4090, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $4130 = $4138;
                                                                        break;
                                                                };
                                                                var $4114 = $4130;
                                                                break;
                                                        };
                                                        var $4107 = $4114;
                                                        break;
                                                };
                                                var $4091 = $4107;
                                                break;
                                        };
                                        var $4083 = $4091;
                                        break;
                                };
                                var $4076 = $4083;
                                break;
                        };
                        var $4069 = $4076;
                        break;
                };
                var $4061 = $4069;
                break;
        };
        return $4061;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4140 = self.idx;
                var $4141 = self.code;
                var $4142 = self.err;
                var $4143 = Parser$Reply$error$($4140, $4141, $4142);
                var $4139 = $4143;
                break;
            case 'Parser.Reply.value':
                var $4144 = self.idx;
                var $4145 = self.code;
                var $4146 = self.val;
                var self = Kind$Parser$text$("without ", $4144, $4145);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4148 = self.idx;
                        var $4149 = self.code;
                        var $4150 = self.err;
                        var $4151 = Parser$Reply$error$($4148, $4149, $4150);
                        var $4147 = $4151;
                        break;
                    case 'Parser.Reply.value':
                        var $4152 = self.idx;
                        var $4153 = self.code;
                        var self = Kind$Parser$name1$($4152, $4153);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4155 = self.idx;
                                var $4156 = self.code;
                                var $4157 = self.err;
                                var $4158 = Parser$Reply$error$($4155, $4156, $4157);
                                var $4154 = $4158;
                                break;
                            case 'Parser.Reply.value':
                                var $4159 = self.idx;
                                var $4160 = self.code;
                                var $4161 = self.val;
                                var self = Kind$Parser$text$(":", $4159, $4160);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4163 = self.idx;
                                        var $4164 = self.code;
                                        var $4165 = self.err;
                                        var $4166 = Parser$Reply$error$($4163, $4164, $4165);
                                        var $4162 = $4166;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4167 = self.idx;
                                        var $4168 = self.code;
                                        var self = Kind$Parser$term$($4167, $4168);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4170 = self.idx;
                                                var $4171 = self.code;
                                                var $4172 = self.err;
                                                var $4173 = Parser$Reply$error$($4170, $4171, $4172);
                                                var $4169 = $4173;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4174 = self.idx;
                                                var $4175 = self.code;
                                                var $4176 = self.val;
                                                var self = Kind$Parser$term$($4174, $4175);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4178 = self.idx;
                                                        var $4179 = self.code;
                                                        var $4180 = self.err;
                                                        var $4181 = Parser$Reply$error$($4178, $4179, $4180);
                                                        var $4177 = $4181;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4182 = self.idx;
                                                        var $4183 = self.code;
                                                        var $4184 = self.val;
                                                        var self = Kind$Parser$stop$($4146, $4182, $4183);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4186 = self.idx;
                                                                var $4187 = self.code;
                                                                var $4188 = self.err;
                                                                var $4189 = Parser$Reply$error$($4186, $4187, $4188);
                                                                var $4185 = $4189;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4190 = self.idx;
                                                                var $4191 = self.code;
                                                                var $4192 = self.val;
                                                                var _term$24 = Kind$Term$ref$($4161);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("x", (_x$25 => {
                                                                    var $4194 = Kind$Term$hol$(Bits$e);
                                                                    return $4194;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $4176);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($4161, (_x$27 => {
                                                                    var $4195 = $4184;
                                                                    return $4195;
                                                                })));
                                                                var $4193 = Parser$Reply$value$($4190, $4191, Kind$Term$ori$($4192, _term$27));
                                                                var $4185 = $4193;
                                                                break;
                                                        };
                                                        var $4177 = $4185;
                                                        break;
                                                };
                                                var $4169 = $4177;
                                                break;
                                        };
                                        var $4162 = $4169;
                                        break;
                                };
                                var $4154 = $4162;
                                break;
                        };
                        var $4147 = $4154;
                        break;
                };
                var $4139 = $4147;
                break;
        };
        return $4139;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4197 = self.idx;
                var $4198 = self.code;
                var $4199 = self.err;
                var $4200 = Parser$Reply$error$($4197, $4198, $4199);
                var $4196 = $4200;
                break;
            case 'Parser.Reply.value':
                var $4201 = self.idx;
                var $4202 = self.code;
                var $4203 = self.val;
                var self = Kind$Parser$text$(":", $4201, $4202);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4205 = self.idx;
                        var $4206 = self.code;
                        var $4207 = self.err;
                        var $4208 = Parser$Reply$error$($4205, $4206, $4207);
                        var $4204 = $4208;
                        break;
                    case 'Parser.Reply.value':
                        var $4209 = self.idx;
                        var $4210 = self.code;
                        var self = Kind$Parser$term$($4209, $4210);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4212 = self.idx;
                                var $4213 = self.code;
                                var $4214 = self.err;
                                var $4215 = Parser$Reply$error$($4212, $4213, $4214);
                                var $4211 = $4215;
                                break;
                            case 'Parser.Reply.value':
                                var $4216 = self.idx;
                                var $4217 = self.code;
                                var $4218 = self.val;
                                var $4219 = Parser$Reply$value$($4216, $4217, Pair$new$($4203, $4218));
                                var $4211 = $4219;
                                break;
                        };
                        var $4204 = $4211;
                        break;
                };
                var $4196 = $4204;
                break;
        };
        return $4196;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4221 = self.idx;
                var $4222 = self.code;
                var $4223 = self.err;
                var $4224 = Parser$Reply$error$($4221, $4222, $4223);
                var $4220 = $4224;
                break;
            case 'Parser.Reply.value':
                var $4225 = self.idx;
                var $4226 = self.code;
                var $4227 = self.val;
                var self = Kind$Parser$text$("switch ", $4225, $4226);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4229 = self.idx;
                        var $4230 = self.code;
                        var $4231 = self.err;
                        var $4232 = Parser$Reply$error$($4229, $4230, $4231);
                        var $4228 = $4232;
                        break;
                    case 'Parser.Reply.value':
                        var $4233 = self.idx;
                        var $4234 = self.code;
                        var self = Kind$Parser$term$($4233, $4234);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4236 = self.idx;
                                var $4237 = self.code;
                                var $4238 = self.err;
                                var $4239 = Parser$Reply$error$($4236, $4237, $4238);
                                var $4235 = $4239;
                                break;
                            case 'Parser.Reply.value':
                                var $4240 = self.idx;
                                var $4241 = self.code;
                                var $4242 = self.val;
                                var self = Kind$Parser$text$("{", $4240, $4241);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4244 = self.idx;
                                        var $4245 = self.code;
                                        var $4246 = self.err;
                                        var $4247 = Parser$Reply$error$($4244, $4245, $4246);
                                        var $4243 = $4247;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4248 = self.idx;
                                        var $4249 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($4248)($4249);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4251 = self.idx;
                                                var $4252 = self.code;
                                                var $4253 = self.err;
                                                var $4254 = Parser$Reply$error$($4251, $4252, $4253);
                                                var $4250 = $4254;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4255 = self.idx;
                                                var $4256 = self.code;
                                                var $4257 = self.val;
                                                var self = Kind$Parser$text$("default ", $4255, $4256);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4259 = self.idx;
                                                        var $4260 = self.code;
                                                        var $4261 = self.err;
                                                        var $4262 = Parser$Reply$error$($4259, $4260, $4261);
                                                        var $4258 = $4262;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4263 = self.idx;
                                                        var $4264 = self.code;
                                                        var self = Kind$Parser$term$($4263, $4264);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4266 = self.idx;
                                                                var $4267 = self.code;
                                                                var $4268 = self.err;
                                                                var $4269 = Parser$Reply$error$($4266, $4267, $4268);
                                                                var $4265 = $4269;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4270 = self.idx;
                                                                var $4271 = self.code;
                                                                var $4272 = self.val;
                                                                var self = Kind$Parser$stop$($4227, $4270, $4271);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4274 = self.idx;
                                                                        var $4275 = self.code;
                                                                        var $4276 = self.err;
                                                                        var $4277 = Parser$Reply$error$($4274, $4275, $4276);
                                                                        var $4273 = $4277;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4278 = self.idx;
                                                                        var $4279 = self.code;
                                                                        var $4280 = self.val;
                                                                        var _term$27 = List$fold$($4257, $4272, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $4283 = self.fst;
                                                                                    var $4284 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($4242, $4283);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $4286 = Kind$Term$hol$(Bits$e);
                                                                                        return $4286;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $4284);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $4285 = _term$34;
                                                                                    var $4282 = $4285;
                                                                                    break;
                                                                            };
                                                                            return $4282;
                                                                        }));
                                                                        var $4281 = Parser$Reply$value$($4278, $4279, Kind$Term$ori$($4280, _term$27));
                                                                        var $4273 = $4281;
                                                                        break;
                                                                };
                                                                var $4265 = $4273;
                                                                break;
                                                        };
                                                        var $4258 = $4265;
                                                        break;
                                                };
                                                var $4250 = $4258;
                                                break;
                                        };
                                        var $4243 = $4250;
                                        break;
                                };
                                var $4235 = $4243;
                                break;
                        };
                        var $4228 = $4235;
                        break;
                };
                var $4220 = $4228;
                break;
        };
        return $4220;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4288 = self.slice(0, -1);
                var $4289 = $4288;
                var $4287 = $4289;
                break;
            case 'i':
                var $4290 = self.slice(0, -1);
                var $4291 = $4290;
                var $4287 = $4291;
                break;
            case 'e':
                var $4292 = Bits$e;
                var $4287 = $4292;
                break;
        };
        return $4287;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4294 = self.slice(0, -1);
                var $4295 = ($4294 + '1');
                var $4293 = $4295;
                break;
            case 'i':
                var $4296 = self.slice(0, -1);
                var $4297 = (Bits$inc$($4296) + '0');
                var $4293 = $4297;
                break;
            case 'e':
                var $4298 = (Bits$e + '1');
                var $4293 = $4298;
                break;
        };
        return $4293;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4300 = Bool$false;
                var $4299 = $4300;
                break;
            case 'Maybe.some':
                var $4301 = Bool$true;
                var $4299 = $4301;
                break;
        };
        return $4299;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $4302 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $4302;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4304 = self.idx;
                var $4305 = self.code;
                var $4306 = self.err;
                var $4307 = Parser$Reply$error$($4304, $4305, $4306);
                var $4303 = $4307;
                break;
            case 'Parser.Reply.value':
                var $4308 = self.idx;
                var $4309 = self.code;
                var $4310 = self.val;
                var self = Kind$Parser$text$("?", $4308, $4309);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4312 = self.idx;
                        var $4313 = self.code;
                        var $4314 = self.err;
                        var $4315 = Parser$Reply$error$($4312, $4313, $4314);
                        var $4311 = $4315;
                        break;
                    case 'Parser.Reply.value':
                        var $4316 = self.idx;
                        var $4317 = self.code;
                        var self = Kind$Parser$name$($4316, $4317);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4319 = self.idx;
                                var $4320 = self.code;
                                var $4321 = self.err;
                                var $4322 = Parser$Reply$error$($4319, $4320, $4321);
                                var $4318 = $4322;
                                break;
                            case 'Parser.Reply.value':
                                var $4323 = self.idx;
                                var $4324 = self.code;
                                var $4325 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4328 = self.idx;
                                            var $4329 = self.code;
                                            var $4330 = self.err;
                                            var $4331 = Parser$Reply$error$($4328, $4329, $4330);
                                            var $4327 = $4331;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4332 = self.idx;
                                            var $4333 = self.code;
                                            var self = Parser$nat$($4332, $4333);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4335 = self.idx;
                                                    var $4336 = self.code;
                                                    var $4337 = self.err;
                                                    var $4338 = Parser$Reply$error$($4335, $4336, $4337);
                                                    var $4334 = $4338;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4339 = self.idx;
                                                    var $4340 = self.code;
                                                    var $4341 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($4341)))));
                                                    var $4342 = Parser$Reply$value$($4339, $4340, _bits$20);
                                                    var $4334 = $4342;
                                                    break;
                                            };
                                            var $4327 = $4334;
                                            break;
                                    };
                                    return $4327;
                                }))($4323)($4324);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4343 = self.idx;
                                        var $4344 = self.code;
                                        var $4345 = self.err;
                                        var $4346 = Parser$Reply$error$($4343, $4344, $4345);
                                        var $4326 = $4346;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4347 = self.idx;
                                        var $4348 = self.code;
                                        var $4349 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $4347, $4348);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4351 = self.idx;
                                                var $4352 = self.code;
                                                var $4353 = self.err;
                                                var $4354 = Parser$Reply$error$($4351, $4352, $4353);
                                                var self = $4354;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4355 = self.idx;
                                                var $4356 = self.code;
                                                var $4357 = self.val;
                                                var $4358 = Parser$Reply$value$($4355, $4356, Maybe$is_some$($4357));
                                                var self = $4358;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4359 = self.idx;
                                                var $4360 = self.code;
                                                var $4361 = self.err;
                                                var $4362 = Parser$Reply$error$($4359, $4360, $4361);
                                                var $4350 = $4362;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4363 = self.idx;
                                                var $4364 = self.code;
                                                var $4365 = self.val;
                                                var self = Kind$Parser$stop$($4310, $4363, $4364);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4367 = self.idx;
                                                        var $4368 = self.code;
                                                        var $4369 = self.err;
                                                        var $4370 = Parser$Reply$error$($4367, $4368, $4369);
                                                        var $4366 = $4370;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4371 = self.idx;
                                                        var $4372 = self.code;
                                                        var $4373 = self.val;
                                                        var $4374 = Parser$Reply$value$($4371, $4372, Kind$Term$ori$($4373, Kind$Term$gol$($4325, $4349, $4365)));
                                                        var $4366 = $4374;
                                                        break;
                                                };
                                                var $4350 = $4366;
                                                break;
                                        };
                                        var $4326 = $4350;
                                        break;
                                };
                                var $4318 = $4326;
                                break;
                        };
                        var $4311 = $4318;
                        break;
                };
                var $4303 = $4311;
                break;
        };
        return $4303;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4376 = self.idx;
                var $4377 = self.code;
                var $4378 = self.err;
                var $4379 = Parser$Reply$error$($4376, $4377, $4378);
                var $4375 = $4379;
                break;
            case 'Parser.Reply.value':
                var $4380 = self.idx;
                var $4381 = self.code;
                var $4382 = self.val;
                var self = Kind$Parser$text$("_", $4380, $4381);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4384 = self.idx;
                        var $4385 = self.code;
                        var $4386 = self.err;
                        var $4387 = Parser$Reply$error$($4384, $4385, $4386);
                        var $4383 = $4387;
                        break;
                    case 'Parser.Reply.value':
                        var $4388 = self.idx;
                        var $4389 = self.code;
                        var self = Kind$Parser$stop$($4382, $4388, $4389);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4391 = self.idx;
                                var $4392 = self.code;
                                var $4393 = self.err;
                                var $4394 = Parser$Reply$error$($4391, $4392, $4393);
                                var $4390 = $4394;
                                break;
                            case 'Parser.Reply.value':
                                var $4395 = self.idx;
                                var $4396 = self.code;
                                var $4397 = self.val;
                                var $4398 = Parser$Reply$value$($4395, $4396, Kind$Term$ori$($4397, Kind$Term$hol$(Bits$e)));
                                var $4390 = $4398;
                                break;
                        };
                        var $4383 = $4390;
                        break;
                };
                var $4375 = $4383;
                break;
        };
        return $4375;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function Kind$Parser$float$sign$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4400 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' or \'-\'.");
            var $4399 = $4400;
        } else {
            var $4401 = self.charCodeAt(0);
            var $4402 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = (($4401 === 43) || ($4401 === 45));
            if (self) {
                var $4404 = Parser$Reply$value$(_sidx$5, $4402, $4401);
                var $4403 = $4404;
            } else {
                var $4405 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' ou \'-\'.");
                var $4403 = $4405;
            };
            var $4399 = $4403;
        };
        return $4399;
    };
    const Kind$Parser$float$sign = x0 => x1 => Kind$Parser$float$sign$(x0, x1);

    function List$any$(_cond$2, _list$3) {
        var List$any$ = (_cond$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_cond$2, _list$3]
        });
        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);
        var arg = [_cond$2, _list$3];
        while (true) {
            let [_cond$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4406 = self.head;
                        var $4407 = self.tail;
                        var self = _cond$2($4406);
                        if (self) {
                            var $4409 = Bool$true;
                            var $4408 = $4409;
                        } else {
                            var $4410 = List$any$(_cond$2, $4407);
                            var $4408 = $4410;
                        };
                        return $4408;
                    case 'List.nil':
                        var $4411 = Bool$false;
                        return $4411;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$any = x0 => x1 => List$any$(x0, x1);

    function Kind$Parser$float$str_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4413 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4412 = $4413;
        } else {
            var $4414 = self.charCodeAt(0);
            var $4415 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var _digits$6 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$nil)))))))))));
            var self = List$any$(a1 => ($4414 === a1), _digits$6);
            if (self) {
                var $4417 = Parser$Reply$value$(_sidx$5, $4415, $4414);
                var $4416 = $4417;
            } else {
                var $4418 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                var $4416 = $4418;
            };
            var $4412 = $4416;
        };
        return $4412;
    };
    const Kind$Parser$float$str_digit = x0 => x1 => Kind$Parser$float$str_digit$(x0, x1);

    function String$from_list$(_xs$1) {
        var self = _xs$1;
        switch (self._) {
            case 'List.cons':
                var $4420 = self.head;
                var $4421 = self.tail;
                var $4422 = String$cons$($4420, String$from_list$($4421));
                var $4419 = $4422;
                break;
            case 'List.nil':
                var $4423 = String$nil;
                var $4419 = $4423;
                break;
        };
        return $4419;
    };
    const String$from_list = x0 => String$from_list$(x0);

    function Kind$Parser$float$64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4425 = self.idx;
                var $4426 = self.code;
                var $4427 = self.err;
                var $4428 = Parser$Reply$error$($4425, $4426, $4427);
                var $4424 = $4428;
                break;
            case 'Parser.Reply.value':
                var $4429 = self.idx;
                var $4430 = self.code;
                var $4431 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4429, $4430);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4433 = self.idx;
                        var $4434 = self.code;
                        var $4435 = self.err;
                        var $4436 = Parser$Reply$error$($4433, $4434, $4435);
                        var $4432 = $4436;
                        break;
                    case 'Parser.Reply.value':
                        var $4437 = self.idx;
                        var $4438 = self.code;
                        var $4439 = self.val;
                        var _sign$9 = Maybe$default$($4439, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4437, $4438);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4441 = self.idx;
                                var $4442 = self.code;
                                var $4443 = self.err;
                                var $4444 = Parser$Reply$error$($4441, $4442, $4443);
                                var $4440 = $4444;
                                break;
                            case 'Parser.Reply.value':
                                var $4445 = self.idx;
                                var $4446 = self.code;
                                var $4447 = self.val;
                                var self = Parser$text$(".", $4445, $4446);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4449 = self.idx;
                                        var $4450 = self.code;
                                        var $4451 = self.err;
                                        var $4452 = Parser$Reply$error$($4449, $4450, $4451);
                                        var $4448 = $4452;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4453 = self.idx;
                                        var $4454 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4453, $4454);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4456 = self.idx;
                                                var $4457 = self.code;
                                                var $4458 = self.err;
                                                var $4459 = Parser$Reply$error$($4456, $4457, $4458);
                                                var $4455 = $4459;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4460 = self.idx;
                                                var $4461 = self.code;
                                                var $4462 = self.val;
                                                var self = Parser$text$("#64", $4460, $4461);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4464 = self.idx;
                                                        var $4465 = self.code;
                                                        var $4466 = self.err;
                                                        var $4467 = Parser$Reply$error$($4464, $4465, $4466);
                                                        var $4463 = $4467;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4468 = self.idx;
                                                        var $4469 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4447)) + ("." + String$from_list$($4462))));
                                                        var _conv$23 = Kind$Term$ref$("F64.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4431, $4468, $4469);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4471 = self.idx;
                                                                var $4472 = self.code;
                                                                var $4473 = self.err;
                                                                var $4474 = Parser$Reply$error$($4471, $4472, $4473);
                                                                var $4470 = $4474;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4475 = self.idx;
                                                                var $4476 = self.code;
                                                                var $4477 = self.val;
                                                                var $4478 = Parser$Reply$value$($4475, $4476, Kind$Term$ori$($4477, _term$24));
                                                                var $4470 = $4478;
                                                                break;
                                                        };
                                                        var $4463 = $4470;
                                                        break;
                                                };
                                                var $4455 = $4463;
                                                break;
                                        };
                                        var $4448 = $4455;
                                        break;
                                };
                                var $4440 = $4448;
                                break;
                        };
                        var $4432 = $4440;
                        break;
                };
                var $4424 = $4432;
                break;
        };
        return $4424;
    };
    const Kind$Parser$float$64 = x0 => x1 => Kind$Parser$float$64$(x0, x1);

    function Kind$Parser$float$32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4480 = self.idx;
                var $4481 = self.code;
                var $4482 = self.err;
                var $4483 = Parser$Reply$error$($4480, $4481, $4482);
                var $4479 = $4483;
                break;
            case 'Parser.Reply.value':
                var $4484 = self.idx;
                var $4485 = self.code;
                var $4486 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4484, $4485);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4488 = self.idx;
                        var $4489 = self.code;
                        var $4490 = self.err;
                        var $4491 = Parser$Reply$error$($4488, $4489, $4490);
                        var $4487 = $4491;
                        break;
                    case 'Parser.Reply.value':
                        var $4492 = self.idx;
                        var $4493 = self.code;
                        var $4494 = self.val;
                        var _sign$9 = Maybe$default$($4494, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4492, $4493);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4496 = self.idx;
                                var $4497 = self.code;
                                var $4498 = self.err;
                                var $4499 = Parser$Reply$error$($4496, $4497, $4498);
                                var $4495 = $4499;
                                break;
                            case 'Parser.Reply.value':
                                var $4500 = self.idx;
                                var $4501 = self.code;
                                var $4502 = self.val;
                                var self = Parser$text$(".", $4500, $4501);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4504 = self.idx;
                                        var $4505 = self.code;
                                        var $4506 = self.err;
                                        var $4507 = Parser$Reply$error$($4504, $4505, $4506);
                                        var $4503 = $4507;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4508 = self.idx;
                                        var $4509 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4508, $4509);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4511 = self.idx;
                                                var $4512 = self.code;
                                                var $4513 = self.err;
                                                var $4514 = Parser$Reply$error$($4511, $4512, $4513);
                                                var $4510 = $4514;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4515 = self.idx;
                                                var $4516 = self.code;
                                                var $4517 = self.val;
                                                var self = Parser$text$("#32", $4515, $4516);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4519 = self.idx;
                                                        var $4520 = self.code;
                                                        var $4521 = self.err;
                                                        var $4522 = Parser$Reply$error$($4519, $4520, $4521);
                                                        var $4518 = $4522;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4523 = self.idx;
                                                        var $4524 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4502)) + ("." + String$from_list$($4517))));
                                                        var _conv$23 = Kind$Term$ref$("F32.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4486, $4523, $4524);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4526 = self.idx;
                                                                var $4527 = self.code;
                                                                var $4528 = self.err;
                                                                var $4529 = Parser$Reply$error$($4526, $4527, $4528);
                                                                var $4525 = $4529;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4530 = self.idx;
                                                                var $4531 = self.code;
                                                                var $4532 = self.val;
                                                                var $4533 = Parser$Reply$value$($4530, $4531, Kind$Term$ori$($4532, _term$24));
                                                                var $4525 = $4533;
                                                                break;
                                                        };
                                                        var $4518 = $4525;
                                                        break;
                                                };
                                                var $4510 = $4518;
                                                break;
                                        };
                                        var $4503 = $4510;
                                        break;
                                };
                                var $4495 = $4503;
                                break;
                        };
                        var $4487 = $4495;
                        break;
                };
                var $4479 = $4487;
                break;
        };
        return $4479;
    };
    const Kind$Parser$float$32 = x0 => x1 => Kind$Parser$float$32$(x0, x1);

    function Either$(_A$1, _B$2) {
        var $4534 = null;
        return $4534;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function Either$left$(_value$3) {
        var $4535 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4535;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4536 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4536;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4537 = Either$left$(_n$1);
                    return $4537;
                } else {
                    var $4538 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4540 = Either$right$(Nat$succ$($4538));
                        var $4539 = $4540;
                    } else {
                        var $4541 = (self - 1n);
                        var $4542 = Nat$sub_rem$($4541, $4538);
                        var $4539 = $4542;
                    };
                    return $4539;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4543 = self.value;
                        var $4544 = Nat$div_mod$go$($4543, _m$2, Nat$succ$(_d$3));
                        return $4544;
                    case 'Either.right':
                        var $4545 = Pair$new$(_d$3, _n$1);
                        return $4545;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4546 = self.fst;
                        var $4547 = self.snd;
                        var self = $4546;
                        if (self === 0n) {
                            var $4549 = List$cons$($4547, _res$3);
                            var $4548 = $4549;
                        } else {
                            var $4550 = (self - 1n);
                            var $4551 = Nat$to_base$go$(_base$1, $4546, List$cons$($4547, _res$3));
                            var $4548 = $4551;
                        };
                        return $4548;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4552 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4552;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4553 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4553;
                } else {
                    var $4554 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4556 = _r$3;
                        var $4555 = $4556;
                    } else {
                        var $4557 = (self - 1n);
                        var $4558 = Nat$mod$go$($4557, $4554, Nat$succ$(_r$3));
                        var $4555 = $4558;
                    };
                    return $4555;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4559 = self.head;
                        var $4560 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4562 = Maybe$some$($4559);
                            var $4561 = $4562;
                        } else {
                            var $4563 = (self - 1n);
                            var $4564 = List$at$($4563, $4560);
                            var $4561 = $4564;
                        };
                        return $4561;
                    case 'List.nil':
                        var $4565 = Maybe$none;
                        return $4565;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $4568 = self.value;
                    var $4569 = $4568;
                    var $4567 = $4569;
                    break;
                case 'Maybe.none':
                    var $4570 = 35;
                    var $4567 = $4570;
                    break;
            };
            var $4566 = $4567;
        } else {
            var $4571 = 35;
            var $4566 = $4571;
        };
        return $4566;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4572 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4573 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4573;
        }));
        return $4572;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4574 = Nat$to_string_base$(10n, _n$1);
        return $4574;
    };
    const Nat$show = x0 => Nat$show$(x0);

    function Kind$Parser$int_pos$(_idx$1, _code$2) {
        var self = Parser$text$("+", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4576 = self.idx;
                var $4577 = self.code;
                var $4578 = self.err;
                var $4579 = Parser$Reply$error$($4576, $4577, $4578);
                var $4575 = $4579;
                break;
            case 'Parser.Reply.value':
                var $4580 = self.idx;
                var $4581 = self.code;
                var self = Parser$many1$(Parser$digit, $4580, $4581);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4583 = self.idx;
                        var $4584 = self.code;
                        var $4585 = self.err;
                        var $4586 = Parser$Reply$error$($4583, $4584, $4585);
                        var $4582 = $4586;
                        break;
                    case 'Parser.Reply.value':
                        var $4587 = self.idx;
                        var $4588 = self.code;
                        var $4589 = self.val;
                        var $4590 = Parser$Reply$value$($4587, $4588, Pair$new$(Bool$true, Nat$from_base$(10n, $4589)));
                        var $4582 = $4590;
                        break;
                };
                var $4575 = $4582;
                break;
        };
        return $4575;
    };
    const Kind$Parser$int_pos = x0 => x1 => Kind$Parser$int_pos$(x0, x1);

    function Kind$Parser$int_neg$(_idx$1, _code$2) {
        var self = Parser$text$("-", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4592 = self.idx;
                var $4593 = self.code;
                var $4594 = self.err;
                var $4595 = Parser$Reply$error$($4592, $4593, $4594);
                var $4591 = $4595;
                break;
            case 'Parser.Reply.value':
                var $4596 = self.idx;
                var $4597 = self.code;
                var self = Parser$many1$(Parser$digit, $4596, $4597);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4599 = self.idx;
                        var $4600 = self.code;
                        var $4601 = self.err;
                        var $4602 = Parser$Reply$error$($4599, $4600, $4601);
                        var $4598 = $4602;
                        break;
                    case 'Parser.Reply.value':
                        var $4603 = self.idx;
                        var $4604 = self.code;
                        var $4605 = self.val;
                        var $4606 = Parser$Reply$value$($4603, $4604, Pair$new$(Bool$false, Nat$from_base$(10n, $4605)));
                        var $4598 = $4606;
                        break;
                };
                var $4591 = $4598;
                break;
        };
        return $4591;
    };
    const Kind$Parser$int_neg = x0 => x1 => Kind$Parser$int_neg$(x0, x1);

    function Kind$Parser$int$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4608 = self.idx;
                var $4609 = self.code;
                var $4610 = self.err;
                var $4611 = Parser$Reply$error$($4608, $4609, $4610);
                var $4607 = $4611;
                break;
            case 'Parser.Reply.value':
                var $4612 = self.idx;
                var $4613 = self.code;
                var $4614 = self.val;
                var self = Kind$Parser$spaces($4612)($4613);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4616 = self.idx;
                        var $4617 = self.code;
                        var $4618 = self.err;
                        var $4619 = Parser$Reply$error$($4616, $4617, $4618);
                        var $4615 = $4619;
                        break;
                    case 'Parser.Reply.value':
                        var $4620 = self.idx;
                        var $4621 = self.code;
                        var self = Parser$first_of$(List$cons$(Kind$Parser$int_pos, List$cons$(Kind$Parser$int_neg, List$nil)))($4620)($4621);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4623 = self.idx;
                                var $4624 = self.code;
                                var $4625 = self.err;
                                var $4626 = Parser$Reply$error$($4623, $4624, $4625);
                                var $4622 = $4626;
                                break;
                            case 'Parser.Reply.value':
                                var $4627 = self.idx;
                                var $4628 = self.code;
                                var $4629 = self.val;
                                var self = $4629;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $4631 = self.fst;
                                        var $4632 = self.snd;
                                        var _ret$14 = Kind$Term$ref$("Int.from_nat");
                                        var _ret$15 = Kind$Term$app$(_ret$14, Kind$Term$nat$($4632));
                                        var self = $4631;
                                        if (self) {
                                            var $4634 = _ret$15;
                                            var $4633 = $4634;
                                        } else {
                                            var _inv$16 = Kind$Term$ref$("Int.neg");
                                            var $4635 = Kind$Term$app$(_inv$16, _ret$15);
                                            var $4633 = $4635;
                                        };
                                        var _term$12 = $4633;
                                        break;
                                };
                                var self = Kind$Parser$stop$($4614, $4627, $4628);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4636 = self.idx;
                                        var $4637 = self.code;
                                        var $4638 = self.err;
                                        var $4639 = Parser$Reply$error$($4636, $4637, $4638);
                                        var $4630 = $4639;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4640 = self.idx;
                                        var $4641 = self.code;
                                        var $4642 = self.val;
                                        var $4643 = Parser$Reply$value$($4640, $4641, Kind$Term$ori$($4642, _term$12));
                                        var $4630 = $4643;
                                        break;
                                };
                                var $4622 = $4630;
                                break;
                        };
                        var $4615 = $4622;
                        break;
                };
                var $4607 = $4615;
                break;
        };
        return $4607;
    };
    const Kind$Parser$int = x0 => x1 => Kind$Parser$int$(x0, x1);

    function Kind$Parser$machine_integer$signed$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4644 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4646 = self.idx;
                    var $4647 = self.code;
                    var $4648 = self.err;
                    var $4649 = Parser$Reply$error$($4646, $4647, $4648);
                    var $4645 = $4649;
                    break;
                case 'Parser.Reply.value':
                    var $4650 = self.idx;
                    var $4651 = self.code;
                    var $4652 = self.val;
                    var self = Kind$Parser$spaces($4650)($4651);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4654 = self.idx;
                            var $4655 = self.code;
                            var $4656 = self.err;
                            var $4657 = Parser$Reply$error$($4654, $4655, $4656);
                            var $4653 = $4657;
                            break;
                        case 'Parser.Reply.value':
                            var $4658 = self.idx;
                            var $4659 = self.code;
                            var self = Kind$Parser$int$($4658, $4659);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4661 = self.idx;
                                    var $4662 = self.code;
                                    var $4663 = self.err;
                                    var $4664 = Parser$Reply$error$($4661, $4662, $4663);
                                    var $4660 = $4664;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4665 = self.idx;
                                    var $4666 = self.code;
                                    var $4667 = self.val;
                                    var self = Parser$text$(("#" + _size_str$2), $4665, $4666);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4669 = self.idx;
                                            var $4670 = self.code;
                                            var $4671 = self.err;
                                            var $4672 = Parser$Reply$error$($4669, $4670, $4671);
                                            var $4668 = $4672;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4673 = self.idx;
                                            var $4674 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Int.to_i" + _size_str$2));
                                            var _term$18 = Kind$Term$app$(_term$17, $4667);
                                            var self = Kind$Parser$stop$($4652, $4673, $4674);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4676 = self.idx;
                                                    var $4677 = self.code;
                                                    var $4678 = self.err;
                                                    var $4679 = Parser$Reply$error$($4676, $4677, $4678);
                                                    var $4675 = $4679;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4680 = self.idx;
                                                    var $4681 = self.code;
                                                    var $4682 = self.val;
                                                    var $4683 = Parser$Reply$value$($4680, $4681, Kind$Term$ori$($4682, _term$18));
                                                    var $4675 = $4683;
                                                    break;
                                            };
                                            var $4668 = $4675;
                                            break;
                                    };
                                    var $4660 = $4668;
                                    break;
                            };
                            var $4653 = $4660;
                            break;
                    };
                    var $4645 = $4653;
                    break;
            };
            return $4645;
        });
        return $4644;
    };
    const Kind$Parser$machine_integer$signed = x0 => Kind$Parser$machine_integer$signed$(x0);

    function Parser$hex_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4685 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4684 = $4685;
        } else {
            var $4686 = self.charCodeAt(0);
            var $4687 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($4686 === 48);
            if (self) {
                var $4689 = Parser$Reply$value$(_sidx$5, $4687, 0n);
                var $4688 = $4689;
            } else {
                var self = ($4686 === 49);
                if (self) {
                    var $4691 = Parser$Reply$value$(_sidx$5, $4687, 1n);
                    var $4690 = $4691;
                } else {
                    var self = ($4686 === 50);
                    if (self) {
                        var $4693 = Parser$Reply$value$(_sidx$5, $4687, 2n);
                        var $4692 = $4693;
                    } else {
                        var self = ($4686 === 51);
                        if (self) {
                            var $4695 = Parser$Reply$value$(_sidx$5, $4687, 3n);
                            var $4694 = $4695;
                        } else {
                            var self = ($4686 === 52);
                            if (self) {
                                var $4697 = Parser$Reply$value$(_sidx$5, $4687, 4n);
                                var $4696 = $4697;
                            } else {
                                var self = ($4686 === 53);
                                if (self) {
                                    var $4699 = Parser$Reply$value$(_sidx$5, $4687, 5n);
                                    var $4698 = $4699;
                                } else {
                                    var self = ($4686 === 54);
                                    if (self) {
                                        var $4701 = Parser$Reply$value$(_sidx$5, $4687, 6n);
                                        var $4700 = $4701;
                                    } else {
                                        var self = ($4686 === 55);
                                        if (self) {
                                            var $4703 = Parser$Reply$value$(_sidx$5, $4687, 7n);
                                            var $4702 = $4703;
                                        } else {
                                            var self = ($4686 === 56);
                                            if (self) {
                                                var $4705 = Parser$Reply$value$(_sidx$5, $4687, 8n);
                                                var $4704 = $4705;
                                            } else {
                                                var self = ($4686 === 57);
                                                if (self) {
                                                    var $4707 = Parser$Reply$value$(_sidx$5, $4687, 9n);
                                                    var $4706 = $4707;
                                                } else {
                                                    var self = ($4686 === 97);
                                                    if (self) {
                                                        var $4709 = Parser$Reply$value$(_sidx$5, $4687, 10n);
                                                        var $4708 = $4709;
                                                    } else {
                                                        var self = ($4686 === 98);
                                                        if (self) {
                                                            var $4711 = Parser$Reply$value$(_sidx$5, $4687, 11n);
                                                            var $4710 = $4711;
                                                        } else {
                                                            var self = ($4686 === 99);
                                                            if (self) {
                                                                var $4713 = Parser$Reply$value$(_sidx$5, $4687, 12n);
                                                                var $4712 = $4713;
                                                            } else {
                                                                var self = ($4686 === 100);
                                                                if (self) {
                                                                    var $4715 = Parser$Reply$value$(_sidx$5, $4687, 13n);
                                                                    var $4714 = $4715;
                                                                } else {
                                                                    var self = ($4686 === 101);
                                                                    if (self) {
                                                                        var $4717 = Parser$Reply$value$(_sidx$5, $4687, 14n);
                                                                        var $4716 = $4717;
                                                                    } else {
                                                                        var self = ($4686 === 102);
                                                                        if (self) {
                                                                            var $4719 = Parser$Reply$value$(_sidx$5, $4687, 15n);
                                                                            var $4718 = $4719;
                                                                        } else {
                                                                            var self = ($4686 === 65);
                                                                            if (self) {
                                                                                var $4721 = Parser$Reply$value$(_sidx$5, $4687, 10n);
                                                                                var $4720 = $4721;
                                                                            } else {
                                                                                var self = ($4686 === 66);
                                                                                if (self) {
                                                                                    var $4723 = Parser$Reply$value$(_sidx$5, $4687, 11n);
                                                                                    var $4722 = $4723;
                                                                                } else {
                                                                                    var self = ($4686 === 67);
                                                                                    if (self) {
                                                                                        var $4725 = Parser$Reply$value$(_sidx$5, $4687, 12n);
                                                                                        var $4724 = $4725;
                                                                                    } else {
                                                                                        var self = ($4686 === 68);
                                                                                        if (self) {
                                                                                            var $4727 = Parser$Reply$value$(_sidx$5, $4687, 13n);
                                                                                            var $4726 = $4727;
                                                                                        } else {
                                                                                            var self = ($4686 === 69);
                                                                                            if (self) {
                                                                                                var $4729 = Parser$Reply$value$(_sidx$5, $4687, 14n);
                                                                                                var $4728 = $4729;
                                                                                            } else {
                                                                                                var self = ($4686 === 70);
                                                                                                if (self) {
                                                                                                    var $4731 = Parser$Reply$value$(_sidx$5, $4687, 15n);
                                                                                                    var $4730 = $4731;
                                                                                                } else {
                                                                                                    var $4732 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                                                                    var $4730 = $4732;
                                                                                                };
                                                                                                var $4728 = $4730;
                                                                                            };
                                                                                            var $4726 = $4728;
                                                                                        };
                                                                                        var $4724 = $4726;
                                                                                    };
                                                                                    var $4722 = $4724;
                                                                                };
                                                                                var $4720 = $4722;
                                                                            };
                                                                            var $4718 = $4720;
                                                                        };
                                                                        var $4716 = $4718;
                                                                    };
                                                                    var $4714 = $4716;
                                                                };
                                                                var $4712 = $4714;
                                                            };
                                                            var $4710 = $4712;
                                                        };
                                                        var $4708 = $4710;
                                                    };
                                                    var $4706 = $4708;
                                                };
                                                var $4704 = $4706;
                                            };
                                            var $4702 = $4704;
                                        };
                                        var $4700 = $4702;
                                    };
                                    var $4698 = $4700;
                                };
                                var $4696 = $4698;
                            };
                            var $4694 = $4696;
                        };
                        var $4692 = $4694;
                    };
                    var $4690 = $4692;
                };
                var $4688 = $4690;
            };
            var $4684 = $4688;
        };
        return $4684;
    };
    const Parser$hex_digit = x0 => x1 => Parser$hex_digit$(x0, x1);

    function Parser$hex_nat$(_idx$1, _code$2) {
        var self = Parser$text$("0x", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4734 = self.idx;
                var $4735 = self.code;
                var $4736 = self.err;
                var $4737 = Parser$Reply$error$($4734, $4735, $4736);
                var $4733 = $4737;
                break;
            case 'Parser.Reply.value':
                var $4738 = self.idx;
                var $4739 = self.code;
                var self = Parser$many1$(Parser$hex_digit, $4738, $4739);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4741 = self.idx;
                        var $4742 = self.code;
                        var $4743 = self.err;
                        var $4744 = Parser$Reply$error$($4741, $4742, $4743);
                        var $4740 = $4744;
                        break;
                    case 'Parser.Reply.value':
                        var $4745 = self.idx;
                        var $4746 = self.code;
                        var $4747 = self.val;
                        var $4748 = Parser$Reply$value$($4745, $4746, Nat$from_base$(16n, $4747));
                        var $4740 = $4748;
                        break;
                };
                var $4733 = $4740;
                break;
        };
        return $4733;
    };
    const Parser$hex_nat = x0 => x1 => Parser$hex_nat$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4750 = self.idx;
                var $4751 = self.code;
                var $4752 = self.err;
                var $4753 = Parser$Reply$error$($4750, $4751, $4752);
                var $4749 = $4753;
                break;
            case 'Parser.Reply.value':
                var $4754 = self.idx;
                var $4755 = self.code;
                var $4756 = self.val;
                var self = Kind$Parser$spaces($4754)($4755);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4758 = self.idx;
                        var $4759 = self.code;
                        var $4760 = self.err;
                        var $4761 = Parser$Reply$error$($4758, $4759, $4760);
                        var $4757 = $4761;
                        break;
                    case 'Parser.Reply.value':
                        var $4762 = self.idx;
                        var $4763 = self.code;
                        var self = Parser$first_of$(List$cons$(Parser$hex_nat, List$cons$(Parser$nat, List$nil)))($4762)($4763);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4765 = self.idx;
                                var $4766 = self.code;
                                var $4767 = self.err;
                                var $4768 = Parser$Reply$error$($4765, $4766, $4767);
                                var $4764 = $4768;
                                break;
                            case 'Parser.Reply.value':
                                var $4769 = self.idx;
                                var $4770 = self.code;
                                var $4771 = self.val;
                                var self = Kind$Parser$stop$($4756, $4769, $4770);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4773 = self.idx;
                                        var $4774 = self.code;
                                        var $4775 = self.err;
                                        var $4776 = Parser$Reply$error$($4773, $4774, $4775);
                                        var $4772 = $4776;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4777 = self.idx;
                                        var $4778 = self.code;
                                        var $4779 = self.val;
                                        var $4780 = Parser$Reply$value$($4777, $4778, Kind$Term$ori$($4779, Kind$Term$nat$($4771)));
                                        var $4772 = $4780;
                                        break;
                                };
                                var $4764 = $4772;
                                break;
                        };
                        var $4757 = $4764;
                        break;
                };
                var $4749 = $4757;
                break;
        };
        return $4749;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);

    function Kind$Parser$machine_integer$unsigned$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4781 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4783 = self.idx;
                    var $4784 = self.code;
                    var $4785 = self.err;
                    var $4786 = Parser$Reply$error$($4783, $4784, $4785);
                    var $4782 = $4786;
                    break;
                case 'Parser.Reply.value':
                    var $4787 = self.idx;
                    var $4788 = self.code;
                    var $4789 = self.val;
                    var self = Kind$Parser$spaces($4787)($4788);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4791 = self.idx;
                            var $4792 = self.code;
                            var $4793 = self.err;
                            var $4794 = Parser$Reply$error$($4791, $4792, $4793);
                            var $4790 = $4794;
                            break;
                        case 'Parser.Reply.value':
                            var $4795 = self.idx;
                            var $4796 = self.code;
                            var self = Kind$Parser$nat$($4795, $4796);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4798 = self.idx;
                                    var $4799 = self.code;
                                    var $4800 = self.err;
                                    var $4801 = Parser$Reply$error$($4798, $4799, $4800);
                                    var $4797 = $4801;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4802 = self.idx;
                                    var $4803 = self.code;
                                    var $4804 = self.val;
                                    var self = Parser$text$(("#" + Nat$show$(_size$1)), $4802, $4803);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4806 = self.idx;
                                            var $4807 = self.code;
                                            var $4808 = self.err;
                                            var $4809 = Parser$Reply$error$($4806, $4807, $4808);
                                            var $4805 = $4809;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4810 = self.idx;
                                            var $4811 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Nat.to_u" + Nat$show$(_size$1)));
                                            var _term$18 = Kind$Term$app$(_term$17, $4804);
                                            var self = Kind$Parser$stop$($4789, $4810, $4811);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4813 = self.idx;
                                                    var $4814 = self.code;
                                                    var $4815 = self.err;
                                                    var $4816 = Parser$Reply$error$($4813, $4814, $4815);
                                                    var $4812 = $4816;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4817 = self.idx;
                                                    var $4818 = self.code;
                                                    var $4819 = self.val;
                                                    var $4820 = Parser$Reply$value$($4817, $4818, Kind$Term$ori$($4819, _term$18));
                                                    var $4812 = $4820;
                                                    break;
                                            };
                                            var $4805 = $4812;
                                            break;
                                    };
                                    var $4797 = $4805;
                                    break;
                            };
                            var $4790 = $4797;
                            break;
                    };
                    var $4782 = $4790;
                    break;
            };
            return $4782;
        });
        return $4781;
    };
    const Kind$Parser$machine_integer$unsigned = x0 => Kind$Parser$machine_integer$unsigned$(x0);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4822 = self.idx;
                var $4823 = self.code;
                var $4824 = self.err;
                var $4825 = Parser$Reply$error$($4822, $4823, $4824);
                var $4821 = $4825;
                break;
            case 'Parser.Reply.value':
                var $4826 = self.idx;
                var $4827 = self.code;
                var $4828 = self.val;
                var self = Kind$Parser$spaces($4826)($4827);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4830 = self.idx;
                        var $4831 = self.code;
                        var $4832 = self.err;
                        var $4833 = Parser$Reply$error$($4830, $4831, $4832);
                        var $4829 = $4833;
                        break;
                    case 'Parser.Reply.value':
                        var $4834 = self.idx;
                        var $4835 = self.code;
                        var self = Parser$nat$($4834, $4835);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4837 = self.idx;
                                var $4838 = self.code;
                                var $4839 = self.err;
                                var $4840 = Parser$Reply$error$($4837, $4838, $4839);
                                var $4836 = $4840;
                                break;
                            case 'Parser.Reply.value':
                                var $4841 = self.idx;
                                var $4842 = self.code;
                                var $4843 = self.val;
                                var self = Parser$text$("l", $4841, $4842);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4845 = self.idx;
                                        var $4846 = self.code;
                                        var $4847 = self.err;
                                        var $4848 = Parser$Reply$error$($4845, $4846, $4847);
                                        var $4844 = $4848;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4849 = self.idx;
                                        var $4850 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4843));
                                        var self = Kind$Parser$stop$($4828, $4849, $4850);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4852 = self.idx;
                                                var $4853 = self.code;
                                                var $4854 = self.err;
                                                var $4855 = Parser$Reply$error$($4852, $4853, $4854);
                                                var $4851 = $4855;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4856 = self.idx;
                                                var $4857 = self.code;
                                                var $4858 = self.val;
                                                var $4859 = Parser$Reply$value$($4856, $4857, Kind$Term$ori$($4858, _term$16));
                                                var $4851 = $4859;
                                                break;
                                        };
                                        var $4844 = $4851;
                                        break;
                                };
                                var $4836 = $4844;
                                break;
                        };
                        var $4829 = $4836;
                        break;
                };
                var $4821 = $4829;
                break;
        };
        return $4821;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4861 = self.idx;
                var $4862 = self.code;
                var $4863 = self.err;
                var $4864 = Parser$Reply$error$($4861, $4862, $4863);
                var $4860 = $4864;
                break;
            case 'Parser.Reply.value':
                var $4865 = self.idx;
                var $4866 = self.code;
                var $4867 = self.val;
                var self = Kind$Parser$spaces($4865)($4866);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4869 = self.idx;
                        var $4870 = self.code;
                        var $4871 = self.err;
                        var $4872 = Parser$Reply$error$($4869, $4870, $4871);
                        var $4868 = $4872;
                        break;
                    case 'Parser.Reply.value':
                        var $4873 = self.idx;
                        var $4874 = self.code;
                        var self = Parser$nat$($4873, $4874);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4876 = self.idx;
                                var $4877 = self.code;
                                var $4878 = self.err;
                                var $4879 = Parser$Reply$error$($4876, $4877, $4878);
                                var $4875 = $4879;
                                break;
                            case 'Parser.Reply.value':
                                var $4880 = self.idx;
                                var $4881 = self.code;
                                var $4882 = self.val;
                                var self = Parser$text$("u", $4880, $4881);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4884 = self.idx;
                                        var $4885 = self.code;
                                        var $4886 = self.err;
                                        var $4887 = Parser$Reply$error$($4884, $4885, $4886);
                                        var $4883 = $4887;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4888 = self.idx;
                                        var $4889 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4882));
                                        var self = Kind$Parser$stop$($4867, $4888, $4889);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4891 = self.idx;
                                                var $4892 = self.code;
                                                var $4893 = self.err;
                                                var $4894 = Parser$Reply$error$($4891, $4892, $4893);
                                                var $4890 = $4894;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4895 = self.idx;
                                                var $4896 = self.code;
                                                var $4897 = self.val;
                                                var $4898 = Parser$Reply$value$($4895, $4896, Kind$Term$ori$($4897, _term$16));
                                                var $4890 = $4898;
                                                break;
                                        };
                                        var $4883 = $4890;
                                        break;
                                };
                                var $4875 = $4883;
                                break;
                        };
                        var $4868 = $4875;
                        break;
                };
                var $4860 = $4868;
                break;
        };
        return $4860;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4900 = self.idx;
                var $4901 = self.code;
                var $4902 = self.err;
                var $4903 = Parser$Reply$error$($4900, $4901, $4902);
                var $4899 = $4903;
                break;
            case 'Parser.Reply.value':
                var $4904 = self.idx;
                var $4905 = self.code;
                var $4906 = self.val;
                var self = Kind$Parser$spaces($4904)($4905);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4908 = self.idx;
                        var $4909 = self.code;
                        var $4910 = self.err;
                        var $4911 = Parser$Reply$error$($4908, $4909, $4910);
                        var $4907 = $4911;
                        break;
                    case 'Parser.Reply.value':
                        var $4912 = self.idx;
                        var $4913 = self.code;
                        var self = Parser$nat$($4912, $4913);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4915 = self.idx;
                                var $4916 = self.code;
                                var $4917 = self.err;
                                var $4918 = Parser$Reply$error$($4915, $4916, $4917);
                                var $4914 = $4918;
                                break;
                            case 'Parser.Reply.value':
                                var $4919 = self.idx;
                                var $4920 = self.code;
                                var $4921 = self.val;
                                var self = Parser$text$("s", $4919, $4920);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4923 = self.idx;
                                        var $4924 = self.code;
                                        var $4925 = self.err;
                                        var $4926 = Parser$Reply$error$($4923, $4924, $4925);
                                        var $4922 = $4926;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4927 = self.idx;
                                        var $4928 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4921));
                                        var self = Kind$Parser$stop$($4906, $4927, $4928);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4930 = self.idx;
                                                var $4931 = self.code;
                                                var $4932 = self.err;
                                                var $4933 = Parser$Reply$error$($4930, $4931, $4932);
                                                var $4929 = $4933;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4934 = self.idx;
                                                var $4935 = self.code;
                                                var $4936 = self.val;
                                                var $4937 = Parser$Reply$value$($4934, $4935, Kind$Term$ori$($4936, _term$16));
                                                var $4929 = $4937;
                                                break;
                                        };
                                        var $4922 = $4929;
                                        break;
                                };
                                var $4914 = $4922;
                                break;
                        };
                        var $4907 = $4914;
                        break;
                };
                var $4899 = $4907;
                break;
        };
        return $4899;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4939 = self.idx;
                var $4940 = self.code;
                var $4941 = self.err;
                var $4942 = Parser$Reply$error$($4939, $4940, $4941);
                var $4938 = $4942;
                break;
            case 'Parser.Reply.value':
                var $4943 = self.idx;
                var $4944 = self.code;
                var $4945 = self.val;
                var self = Kind$Parser$spaces($4943)($4944);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4947 = self.idx;
                        var $4948 = self.code;
                        var $4949 = self.err;
                        var $4950 = Parser$Reply$error$($4947, $4948, $4949);
                        var $4946 = $4950;
                        break;
                    case 'Parser.Reply.value':
                        var $4951 = self.idx;
                        var $4952 = self.code;
                        var self = Parser$nat$($4951, $4952);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4954 = self.idx;
                                var $4955 = self.code;
                                var $4956 = self.err;
                                var $4957 = Parser$Reply$error$($4954, $4955, $4956);
                                var $4953 = $4957;
                                break;
                            case 'Parser.Reply.value':
                                var $4958 = self.idx;
                                var $4959 = self.code;
                                var $4960 = self.val;
                                var self = Parser$text$("b", $4958, $4959);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4962 = self.idx;
                                        var $4963 = self.code;
                                        var $4964 = self.err;
                                        var $4965 = Parser$Reply$error$($4962, $4963, $4964);
                                        var $4961 = $4965;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4966 = self.idx;
                                        var $4967 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4960));
                                        var self = Kind$Parser$stop$($4945, $4966, $4967);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4969 = self.idx;
                                                var $4970 = self.code;
                                                var $4971 = self.err;
                                                var $4972 = Parser$Reply$error$($4969, $4970, $4971);
                                                var $4968 = $4972;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4973 = self.idx;
                                                var $4974 = self.code;
                                                var $4975 = self.val;
                                                var $4976 = Parser$Reply$value$($4973, $4974, Kind$Term$ori$($4975, _term$16));
                                                var $4968 = $4976;
                                                break;
                                        };
                                        var $4961 = $4968;
                                        break;
                                };
                                var $4953 = $4961;
                                break;
                        };
                        var $4946 = $4953;
                        break;
                };
                var $4938 = $4946;
                break;
        };
        return $4938;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4978 = self.idx;
                var $4979 = self.code;
                var $4980 = self.err;
                var $4981 = Parser$Reply$error$($4978, $4979, $4980);
                var $4977 = $4981;
                break;
            case 'Parser.Reply.value':
                var $4982 = self.idx;
                var $4983 = self.code;
                var $4984 = self.val;
                var self = Kind$Parser$name1$($4982, $4983);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4986 = self.idx;
                        var $4987 = self.code;
                        var $4988 = self.err;
                        var $4989 = Parser$Reply$error$($4986, $4987, $4988);
                        var $4985 = $4989;
                        break;
                    case 'Parser.Reply.value':
                        var $4990 = self.idx;
                        var $4991 = self.code;
                        var $4992 = self.val;
                        var self = Kind$Parser$stop$($4984, $4990, $4991);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4994 = self.idx;
                                var $4995 = self.code;
                                var $4996 = self.err;
                                var $4997 = Parser$Reply$error$($4994, $4995, $4996);
                                var $4993 = $4997;
                                break;
                            case 'Parser.Reply.value':
                                var $4998 = self.idx;
                                var $4999 = self.code;
                                var $5000 = self.val;
                                var self = ($4992 === "case");
                                if (self) {
                                    var $5002 = Parser$fail("Reserved keyword.");
                                    var $5001 = $5002;
                                } else {
                                    var self = ($4992 === "do");
                                    if (self) {
                                        var $5004 = Parser$fail("Reserved keyword.");
                                        var $5003 = $5004;
                                    } else {
                                        var self = ($4992 === "if");
                                        if (self) {
                                            var $5006 = Parser$fail("Reserved keyword.");
                                            var $5005 = $5006;
                                        } else {
                                            var self = ($4992 === "with");
                                            if (self) {
                                                var $5008 = Parser$fail("Reserved keyword.");
                                                var $5007 = $5008;
                                            } else {
                                                var self = ($4992 === "let");
                                                if (self) {
                                                    var $5010 = Parser$fail("Reserved keyword.");
                                                    var $5009 = $5010;
                                                } else {
                                                    var self = ($4992 === "def");
                                                    if (self) {
                                                        var $5012 = Parser$fail("Reserved keyword.");
                                                        var $5011 = $5012;
                                                    } else {
                                                        var self = ($4992 === "Type");
                                                        if (self) {
                                                            var $5014 = (_idx$12 => _code$13 => {
                                                                var $5015 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5000, Kind$Term$typ));
                                                                return $5015;
                                                            });
                                                            var $5013 = $5014;
                                                        } else {
                                                            var self = ($4992 === "true");
                                                            if (self) {
                                                                var $5017 = (_idx$12 => _code$13 => {
                                                                    var $5018 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5000, Kind$Term$ref$("Bool.true")));
                                                                    return $5018;
                                                                });
                                                                var $5016 = $5017;
                                                            } else {
                                                                var self = ($4992 === "false");
                                                                if (self) {
                                                                    var $5020 = (_idx$12 => _code$13 => {
                                                                        var $5021 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5000, Kind$Term$ref$("Bool.false")));
                                                                        return $5021;
                                                                    });
                                                                    var $5019 = $5020;
                                                                } else {
                                                                    var self = ($4992 === "unit");
                                                                    if (self) {
                                                                        var $5023 = (_idx$12 => _code$13 => {
                                                                            var $5024 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5000, Kind$Term$ref$("Unit.new")));
                                                                            return $5024;
                                                                        });
                                                                        var $5022 = $5023;
                                                                    } else {
                                                                        var self = ($4992 === "none");
                                                                        if (self) {
                                                                            var _term$12 = Kind$Term$ref$("Maybe.none");
                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                            var $5026 = (_idx$14 => _code$15 => {
                                                                                var $5027 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($5000, _term$13));
                                                                                return $5027;
                                                                            });
                                                                            var $5025 = $5026;
                                                                        } else {
                                                                            var self = ($4992 === "refl");
                                                                            if (self) {
                                                                                var _term$12 = Kind$Term$ref$("Equal.refl");
                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));
                                                                                var $5029 = (_idx$15 => _code$16 => {
                                                                                    var $5030 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($5000, _term$14));
                                                                                    return $5030;
                                                                                });
                                                                                var $5028 = $5029;
                                                                            } else {
                                                                                var $5031 = (_idx$12 => _code$13 => {
                                                                                    var $5032 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5000, Kind$Term$ref$($4992)));
                                                                                    return $5032;
                                                                                });
                                                                                var $5028 = $5031;
                                                                            };
                                                                            var $5025 = $5028;
                                                                        };
                                                                        var $5022 = $5025;
                                                                    };
                                                                    var $5019 = $5022;
                                                                };
                                                                var $5016 = $5019;
                                                            };
                                                            var $5013 = $5016;
                                                        };
                                                        var $5011 = $5013;
                                                    };
                                                    var $5009 = $5011;
                                                };
                                                var $5007 = $5009;
                                            };
                                            var $5005 = $5007;
                                        };
                                        var $5003 = $5005;
                                    };
                                    var $5001 = $5003;
                                };
                                var $5001 = $5001($4998)($4999);
                                var $4993 = $5001;
                                break;
                        };
                        var $4985 = $4993;
                        break;
                };
                var $4977 = $4985;
                break;
        };
        return $4977;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5034 = self.idx;
                var $5035 = self.code;
                var $5036 = self.err;
                var $5037 = Parser$Reply$error$($5034, $5035, $5036);
                var $5033 = $5037;
                break;
            case 'Parser.Reply.value':
                var $5038 = self.idx;
                var $5039 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $5038, $5039);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5041 = self.idx;
                        var $5042 = self.code;
                        var $5043 = self.err;
                        var $5044 = Parser$Reply$error$($5041, $5042, $5043);
                        var $5040 = $5044;
                        break;
                    case 'Parser.Reply.value':
                        var $5045 = self.idx;
                        var $5046 = self.code;
                        var $5047 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5045, $5046);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5049 = self.idx;
                                var $5050 = self.code;
                                var $5051 = self.err;
                                var $5052 = Parser$Reply$error$($5049, $5050, $5051);
                                var $5048 = $5052;
                                break;
                            case 'Parser.Reply.value':
                                var $5053 = self.idx;
                                var $5054 = self.code;
                                var $5055 = self.val;
                                var _expr$14 = (() => {
                                    var $5058 = _func$2;
                                    var $5059 = $5047;
                                    let _f$15 = $5058;
                                    let _x$14;
                                    while ($5059._ === 'List.cons') {
                                        _x$14 = $5059.head;
                                        var $5058 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $5058;
                                        $5059 = $5059.tail;
                                    }
                                    return _f$15;
                                })();
                                var $5056 = Parser$Reply$value$($5053, $5054, Kind$Term$ori$($5055, _expr$14));
                                var $5048 = $5056;
                                break;
                        };
                        var $5040 = $5048;
                        break;
                };
                var $5033 = $5040;
                break;
        };
        return $5033;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5061 = self.idx;
                var $5062 = self.code;
                var $5063 = self.err;
                var $5064 = Parser$Reply$error$($5061, $5062, $5063);
                var $5060 = $5064;
                break;
            case 'Parser.Reply.value':
                var $5065 = self.idx;
                var $5066 = self.code;
                var $5067 = Parser$text$(_text$1, $5065, $5066);
                var $5060 = $5067;
                break;
        };
        return $5060;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5069 = self.idx;
                var $5070 = self.code;
                var $5071 = self.err;
                var $5072 = Parser$Reply$error$($5069, $5070, $5071);
                var $5068 = $5072;
                break;
            case 'Parser.Reply.value':
                var $5073 = self.idx;
                var $5074 = self.code;
                var $5075 = self.val;
                var self = Parser$text$("<", $5073, $5074);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5077 = self.idx;
                        var $5078 = self.code;
                        var $5079 = self.err;
                        var $5080 = Parser$Reply$error$($5077, $5078, $5079);
                        var $5076 = $5080;
                        break;
                    case 'Parser.Reply.value':
                        var $5081 = self.idx;
                        var $5082 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $5081, $5082);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5084 = self.idx;
                                var $5085 = self.code;
                                var $5086 = self.err;
                                var $5087 = Parser$Reply$error$($5084, $5085, $5086);
                                var $5083 = $5087;
                                break;
                            case 'Parser.Reply.value':
                                var $5088 = self.idx;
                                var $5089 = self.code;
                                var $5090 = self.val;
                                var self = Kind$Parser$stop$($5075, $5088, $5089);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5092 = self.idx;
                                        var $5093 = self.code;
                                        var $5094 = self.err;
                                        var $5095 = Parser$Reply$error$($5092, $5093, $5094);
                                        var $5091 = $5095;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5096 = self.idx;
                                        var $5097 = self.code;
                                        var $5098 = self.val;
                                        var _expr$17 = (() => {
                                            var $5101 = _func$2;
                                            var $5102 = $5090;
                                            let _f$18 = $5101;
                                            let _x$17;
                                            while ($5102._ === 'List.cons') {
                                                _x$17 = $5102.head;
                                                var $5101 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $5101;
                                                $5102 = $5102.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $5099 = Parser$Reply$value$($5096, $5097, Kind$Term$ori$($5098, _expr$17));
                                        var $5091 = $5099;
                                        break;
                                };
                                var $5083 = $5091;
                                break;
                        };
                        var $5076 = $5083;
                        break;
                };
                var $5068 = $5076;
                break;
        };
        return $5068;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5104 = self.idx;
                var $5105 = self.code;
                var $5106 = self.err;
                var $5107 = Parser$Reply$error$($5104, $5105, $5106);
                var $5103 = $5107;
                break;
            case 'Parser.Reply.value':
                var $5108 = self.idx;
                var $5109 = self.code;
                var self = Kind$Parser$term$($5108, $5109);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5111 = self.idx;
                        var $5112 = self.code;
                        var $5113 = self.err;
                        var $5114 = Parser$Reply$error$($5111, $5112, $5113);
                        var $5110 = $5114;
                        break;
                    case 'Parser.Reply.value':
                        var $5115 = self.idx;
                        var $5116 = self.code;
                        var $5117 = self.val;
                        var self = Kind$Parser$text$("]", $5115, $5116);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5119 = self.idx;
                                var $5120 = self.code;
                                var $5121 = self.err;
                                var $5122 = Parser$Reply$error$($5119, $5120, $5121);
                                var $5118 = $5122;
                                break;
                            case 'Parser.Reply.value':
                                var $5123 = self.idx;
                                var $5124 = self.code;
                                var self = Kind$Parser$text$("<-", $5123, $5124);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5126 = self.idx;
                                        var $5127 = self.code;
                                        var $5128 = self.err;
                                        var $5129 = Parser$Reply$error$($5126, $5127, $5128);
                                        var $5125 = $5129;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5130 = self.idx;
                                        var $5131 = self.code;
                                        var self = Kind$Parser$term$($5130, $5131);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5133 = self.idx;
                                                var $5134 = self.code;
                                                var $5135 = self.err;
                                                var $5136 = Parser$Reply$error$($5133, $5134, $5135);
                                                var $5132 = $5136;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5137 = self.idx;
                                                var $5138 = self.code;
                                                var $5139 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5137, $5138);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5141 = self.idx;
                                                        var $5142 = self.code;
                                                        var $5143 = self.err;
                                                        var $5144 = Parser$Reply$error$($5141, $5142, $5143);
                                                        var $5140 = $5144;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5145 = self.idx;
                                                        var $5146 = self.code;
                                                        var $5147 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5117);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5139);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $5148 = Parser$Reply$value$($5145, $5146, Kind$Term$ori$($5147, _term$27));
                                                        var $5140 = $5148;
                                                        break;
                                                };
                                                var $5132 = $5140;
                                                break;
                                        };
                                        var $5125 = $5132;
                                        break;
                                };
                                var $5118 = $5125;
                                break;
                        };
                        var $5110 = $5118;
                        break;
                };
                var $5103 = $5110;
                break;
        };
        return $5103;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5150 = self.idx;
                var $5151 = self.code;
                var $5152 = self.err;
                var $5153 = Parser$Reply$error$($5150, $5151, $5152);
                var $5149 = $5153;
                break;
            case 'Parser.Reply.value':
                var $5154 = self.idx;
                var $5155 = self.code;
                var self = Kind$Parser$term$($5154, $5155);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5157 = self.idx;
                        var $5158 = self.code;
                        var $5159 = self.err;
                        var $5160 = Parser$Reply$error$($5157, $5158, $5159);
                        var $5156 = $5160;
                        break;
                    case 'Parser.Reply.value':
                        var $5161 = self.idx;
                        var $5162 = self.code;
                        var $5163 = self.val;
                        var self = Kind$Parser$text$("]", $5161, $5162);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5165 = self.idx;
                                var $5166 = self.code;
                                var $5167 = self.err;
                                var $5168 = Parser$Reply$error$($5165, $5166, $5167);
                                var $5164 = $5168;
                                break;
                            case 'Parser.Reply.value':
                                var $5169 = self.idx;
                                var $5170 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5169, $5170);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5172 = self.idx;
                                        var $5173 = self.code;
                                        var $5174 = self.err;
                                        var $5175 = Parser$Reply$error$($5172, $5173, $5174);
                                        var $5171 = $5175;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5176 = self.idx;
                                        var $5177 = self.code;
                                        var $5178 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5163);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $5179 = Parser$Reply$value$($5176, $5177, Kind$Term$ori$($5178, _term$20));
                                        var $5171 = $5179;
                                        break;
                                };
                                var $5164 = $5171;
                                break;
                        };
                        var $5156 = $5164;
                        break;
                };
                var $5149 = $5156;
                break;
        };
        return $5149;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5181 = self.idx;
                var $5182 = self.code;
                var $5183 = self.err;
                var $5184 = Parser$Reply$error$($5181, $5182, $5183);
                var $5180 = $5184;
                break;
            case 'Parser.Reply.value':
                var $5185 = self.idx;
                var $5186 = self.code;
                var self = Kind$Parser$term$($5185, $5186);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5188 = self.idx;
                        var $5189 = self.code;
                        var $5190 = self.err;
                        var $5191 = Parser$Reply$error$($5188, $5189, $5190);
                        var $5187 = $5191;
                        break;
                    case 'Parser.Reply.value':
                        var $5192 = self.idx;
                        var $5193 = self.code;
                        var $5194 = self.val;
                        var self = Kind$Parser$text$("}", $5192, $5193);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5196 = self.idx;
                                var $5197 = self.code;
                                var $5198 = self.err;
                                var $5199 = Parser$Reply$error$($5196, $5197, $5198);
                                var $5195 = $5199;
                                break;
                            case 'Parser.Reply.value':
                                var $5200 = self.idx;
                                var $5201 = self.code;
                                var self = Kind$Parser$text$("<-", $5200, $5201);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5203 = self.idx;
                                        var $5204 = self.code;
                                        var $5205 = self.err;
                                        var $5206 = Parser$Reply$error$($5203, $5204, $5205);
                                        var $5202 = $5206;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5207 = self.idx;
                                        var $5208 = self.code;
                                        var self = Kind$Parser$term$($5207, $5208);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5210 = self.idx;
                                                var $5211 = self.code;
                                                var $5212 = self.err;
                                                var $5213 = Parser$Reply$error$($5210, $5211, $5212);
                                                var $5209 = $5213;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5214 = self.idx;
                                                var $5215 = self.code;
                                                var $5216 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5214, $5215);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5218 = self.idx;
                                                        var $5219 = self.code;
                                                        var $5220 = self.err;
                                                        var $5221 = Parser$Reply$error$($5218, $5219, $5220);
                                                        var $5217 = $5221;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5222 = self.idx;
                                                        var $5223 = self.code;
                                                        var $5224 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5194);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5216);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $5225 = Parser$Reply$value$($5222, $5223, Kind$Term$ori$($5224, _term$27));
                                                        var $5217 = $5225;
                                                        break;
                                                };
                                                var $5209 = $5217;
                                                break;
                                        };
                                        var $5202 = $5209;
                                        break;
                                };
                                var $5195 = $5202;
                                break;
                        };
                        var $5187 = $5195;
                        break;
                };
                var $5180 = $5187;
                break;
        };
        return $5180;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5227 = self.idx;
                var $5228 = self.code;
                var $5229 = self.err;
                var $5230 = Parser$Reply$error$($5227, $5228, $5229);
                var $5226 = $5230;
                break;
            case 'Parser.Reply.value':
                var $5231 = self.idx;
                var $5232 = self.code;
                var self = Kind$Parser$term$($5231, $5232);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5234 = self.idx;
                        var $5235 = self.code;
                        var $5236 = self.err;
                        var $5237 = Parser$Reply$error$($5234, $5235, $5236);
                        var $5233 = $5237;
                        break;
                    case 'Parser.Reply.value':
                        var $5238 = self.idx;
                        var $5239 = self.code;
                        var $5240 = self.val;
                        var self = Kind$Parser$text$("}", $5238, $5239);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5242 = self.idx;
                                var $5243 = self.code;
                                var $5244 = self.err;
                                var $5245 = Parser$Reply$error$($5242, $5243, $5244);
                                var $5241 = $5245;
                                break;
                            case 'Parser.Reply.value':
                                var $5246 = self.idx;
                                var $5247 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5246, $5247);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5249 = self.idx;
                                        var $5250 = self.code;
                                        var $5251 = self.err;
                                        var $5252 = Parser$Reply$error$($5249, $5250, $5251);
                                        var $5248 = $5252;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5253 = self.idx;
                                        var $5254 = self.code;
                                        var $5255 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5240);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $5256 = Parser$Reply$value$($5253, $5254, Kind$Term$ori$($5255, _term$20));
                                        var $5248 = $5256;
                                        break;
                                };
                                var $5241 = $5248;
                                break;
                        };
                        var $5233 = $5241;
                        break;
                };
                var $5226 = $5233;
                break;
        };
        return $5226;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5258 = self.idx;
                var $5259 = self.code;
                var $5260 = self.err;
                var $5261 = Parser$Reply$error$($5258, $5259, $5260);
                var $5257 = $5261;
                break;
            case 'Parser.Reply.value':
                var $5262 = self.idx;
                var $5263 = self.code;
                var self = Kind$Parser$term$($5262, $5263);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5265 = self.idx;
                        var $5266 = self.code;
                        var $5267 = self.err;
                        var $5268 = Parser$Reply$error$($5265, $5266, $5267);
                        var $5264 = $5268;
                        break;
                    case 'Parser.Reply.value':
                        var $5269 = self.idx;
                        var $5270 = self.code;
                        var $5271 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5269, $5270);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5273 = self.idx;
                                var $5274 = self.code;
                                var $5275 = self.err;
                                var $5276 = Parser$Reply$error$($5273, $5274, $5275);
                                var $5272 = $5276;
                                break;
                            case 'Parser.Reply.value':
                                var $5277 = self.idx;
                                var $5278 = self.code;
                                var $5279 = self.val;
                                var $5280 = Parser$Reply$value$($5277, $5278, Kind$Term$ori$($5279, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $5281 = $5271;
                                    return $5281;
                                }))));
                                var $5272 = $5280;
                                break;
                        };
                        var $5264 = $5272;
                        break;
                };
                var $5257 = $5264;
                break;
        };
        return $5257;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5283 = self.idx;
                var $5284 = self.code;
                var $5285 = self.err;
                var $5286 = Parser$Reply$error$($5283, $5284, $5285);
                var $5282 = $5286;
                break;
            case 'Parser.Reply.value':
                var $5287 = self.idx;
                var $5288 = self.code;
                var self = Parser$text$(" ", $5287, $5288);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5290 = self.idx;
                        var $5291 = self.code;
                        var $5292 = self.err;
                        var $5293 = Parser$Reply$error$($5290, $5291, $5292);
                        var $5289 = $5293;
                        break;
                    case 'Parser.Reply.value':
                        var $5294 = self.idx;
                        var $5295 = self.code;
                        var self = Kind$Parser$term$($5294, $5295);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5297 = self.idx;
                                var $5298 = self.code;
                                var $5299 = self.err;
                                var $5300 = Parser$Reply$error$($5297, $5298, $5299);
                                var $5296 = $5300;
                                break;
                            case 'Parser.Reply.value':
                                var $5301 = self.idx;
                                var $5302 = self.code;
                                var $5303 = self.val;
                                var self = Kind$Parser$stop$(_init$3, $5301, $5302);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5305 = self.idx;
                                        var $5306 = self.code;
                                        var $5307 = self.err;
                                        var $5308 = Parser$Reply$error$($5305, $5306, $5307);
                                        var $5304 = $5308;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5309 = self.idx;
                                        var $5310 = self.code;
                                        var $5311 = self.val;
                                        var _term$19 = Kind$Term$ref$(_ref$2);
                                        var _term$20 = Kind$Term$app$(_term$19, _val0$4);
                                        var _term$21 = Kind$Term$app$(_term$20, $5303);
                                        var $5312 = Parser$Reply$value$($5309, $5310, Kind$Term$ori$($5311, _term$21));
                                        var $5304 = $5312;
                                        break;
                                };
                                var $5296 = $5304;
                                break;
                        };
                        var $5289 = $5296;
                        break;
                };
                var $5282 = $5289;
                break;
        };
        return $5282;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5314 = self.idx;
                var $5315 = self.code;
                var $5316 = self.err;
                var $5317 = Parser$Reply$error$($5314, $5315, $5316);
                var $5313 = $5317;
                break;
            case 'Parser.Reply.value':
                var $5318 = self.idx;
                var $5319 = self.code;
                var self = Kind$Parser$term$($5318, $5319);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5321 = self.idx;
                        var $5322 = self.code;
                        var $5323 = self.err;
                        var $5324 = Parser$Reply$error$($5321, $5322, $5323);
                        var $5320 = $5324;
                        break;
                    case 'Parser.Reply.value':
                        var $5325 = self.idx;
                        var $5326 = self.code;
                        var $5327 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5325, $5326);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5329 = self.idx;
                                var $5330 = self.code;
                                var $5331 = self.err;
                                var $5332 = Parser$Reply$error$($5329, $5330, $5331);
                                var $5328 = $5332;
                                break;
                            case 'Parser.Reply.value':
                                var $5333 = self.idx;
                                var $5334 = self.code;
                                var $5335 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5327);
                                var $5336 = Parser$Reply$value$($5333, $5334, Kind$Term$ori$($5335, _term$17));
                                var $5328 = $5336;
                                break;
                        };
                        var $5320 = $5328;
                        break;
                };
                var $5313 = $5320;
                break;
        };
        return $5313;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5338 = self.idx;
                var $5339 = self.code;
                var $5340 = self.err;
                var $5341 = Parser$Reply$error$($5338, $5339, $5340);
                var $5337 = $5341;
                break;
            case 'Parser.Reply.value':
                var $5342 = self.idx;
                var $5343 = self.code;
                var self = Kind$Parser$term$($5342, $5343);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5345 = self.idx;
                        var $5346 = self.code;
                        var $5347 = self.err;
                        var $5348 = Parser$Reply$error$($5345, $5346, $5347);
                        var $5344 = $5348;
                        break;
                    case 'Parser.Reply.value':
                        var $5349 = self.idx;
                        var $5350 = self.code;
                        var $5351 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5349, $5350);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5353 = self.idx;
                                var $5354 = self.code;
                                var $5355 = self.err;
                                var $5356 = Parser$Reply$error$($5353, $5354, $5355);
                                var $5352 = $5356;
                                break;
                            case 'Parser.Reply.value':
                                var $5357 = self.idx;
                                var $5358 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5351);
                                var self = Kind$Parser$stop$(_init$1, $5357, $5358);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5360 = self.idx;
                                        var $5361 = self.code;
                                        var $5362 = self.err;
                                        var $5363 = Parser$Reply$error$($5360, $5361, $5362);
                                        var $5359 = $5363;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5364 = self.idx;
                                        var $5365 = self.code;
                                        var $5366 = self.val;
                                        var $5367 = Parser$Reply$value$($5364, $5365, Kind$Term$ori$($5366, _term$17));
                                        var $5359 = $5367;
                                        break;
                                };
                                var $5352 = $5359;
                                break;
                        };
                        var $5344 = $5352;
                        break;
                };
                var $5337 = $5344;
                break;
        };
        return $5337;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5369 = self.idx;
                var $5370 = self.code;
                var $5371 = self.err;
                var $5372 = Parser$Reply$error$($5369, $5370, $5371);
                var $5368 = $5372;
                break;
            case 'Parser.Reply.value':
                var $5373 = self.idx;
                var $5374 = self.code;
                var self = Kind$Parser$term$($5373, $5374);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5376 = self.idx;
                        var $5377 = self.code;
                        var $5378 = self.err;
                        var $5379 = Parser$Reply$error$($5376, $5377, $5378);
                        var $5375 = $5379;
                        break;
                    case 'Parser.Reply.value':
                        var $5380 = self.idx;
                        var $5381 = self.code;
                        var $5382 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5380, $5381);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5384 = self.idx;
                                var $5385 = self.code;
                                var $5386 = self.err;
                                var $5387 = Parser$Reply$error$($5384, $5385, $5386);
                                var $5383 = $5387;
                                break;
                            case 'Parser.Reply.value':
                                var $5388 = self.idx;
                                var $5389 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5382);
                                var self = Kind$Parser$stop$(_init$1, $5388, $5389);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5391 = self.idx;
                                        var $5392 = self.code;
                                        var $5393 = self.err;
                                        var $5394 = Parser$Reply$error$($5391, $5392, $5393);
                                        var $5390 = $5394;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5395 = self.idx;
                                        var $5396 = self.code;
                                        var $5397 = self.val;
                                        var $5398 = Parser$Reply$value$($5395, $5396, Kind$Term$ori$($5397, _term$17));
                                        var $5390 = $5398;
                                        break;
                                };
                                var $5383 = $5390;
                                break;
                        };
                        var $5375 = $5383;
                        break;
                };
                var $5368 = $5375;
                break;
        };
        return $5368;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5400 = self.idx;
                var $5401 = self.code;
                var $5402 = self.err;
                var $5403 = Parser$Reply$error$($5400, $5401, $5402);
                var $5399 = $5403;
                break;
            case 'Parser.Reply.value':
                var $5404 = self.idx;
                var $5405 = self.code;
                var self = Kind$Parser$term$($5404, $5405);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5407 = self.idx;
                        var $5408 = self.code;
                        var $5409 = self.err;
                        var $5410 = Parser$Reply$error$($5407, $5408, $5409);
                        var $5406 = $5410;
                        break;
                    case 'Parser.Reply.value':
                        var $5411 = self.idx;
                        var $5412 = self.code;
                        var $5413 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5411, $5412);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5415 = self.idx;
                                var $5416 = self.code;
                                var $5417 = self.err;
                                var $5418 = Parser$Reply$error$($5415, $5416, $5417);
                                var $5414 = $5418;
                                break;
                            case 'Parser.Reply.value':
                                var $5419 = self.idx;
                                var $5420 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $5413);
                                var self = Kind$Parser$stop$(_init$1, $5419, $5420);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5422 = self.idx;
                                        var $5423 = self.code;
                                        var $5424 = self.err;
                                        var $5425 = Parser$Reply$error$($5422, $5423, $5424);
                                        var $5421 = $5425;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5426 = self.idx;
                                        var $5427 = self.code;
                                        var $5428 = self.val;
                                        var $5429 = Parser$Reply$value$($5426, $5427, Kind$Term$ori$($5428, _term$16));
                                        var $5421 = $5429;
                                        break;
                                };
                                var $5414 = $5421;
                                break;
                        };
                        var $5406 = $5414;
                        break;
                };
                var $5399 = $5406;
                break;
        };
        return $5399;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5431 = self.idx;
                var $5432 = self.code;
                var $5433 = self.err;
                var $5434 = Parser$Reply$error$($5431, $5432, $5433);
                var $5430 = $5434;
                break;
            case 'Parser.Reply.value':
                var $5435 = self.idx;
                var $5436 = self.code;
                var self = Kind$Parser$term$($5435, $5436);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5438 = self.idx;
                        var $5439 = self.code;
                        var $5440 = self.err;
                        var $5441 = Parser$Reply$error$($5438, $5439, $5440);
                        var $5437 = $5441;
                        break;
                    case 'Parser.Reply.value':
                        var $5442 = self.idx;
                        var $5443 = self.code;
                        var $5444 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5442, $5443);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5446 = self.idx;
                                var $5447 = self.code;
                                var $5448 = self.err;
                                var $5449 = Parser$Reply$error$($5446, $5447, $5448);
                                var $5445 = $5449;
                                break;
                            case 'Parser.Reply.value':
                                var $5450 = self.idx;
                                var $5451 = self.code;
                                var $5452 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $5444);
                                var $5453 = Parser$Reply$value$($5450, $5451, Kind$Term$ori$($5452, _term$18));
                                var $5445 = $5453;
                                break;
                        };
                        var $5437 = $5445;
                        break;
                };
                var $5430 = $5437;
                break;
        };
        return $5430;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5455 = self.idx;
                var $5456 = self.code;
                var $5457 = self.err;
                var $5458 = Parser$Reply$error$($5455, $5456, $5457);
                var $5454 = $5458;
                break;
            case 'Parser.Reply.value':
                var $5459 = self.idx;
                var $5460 = self.code;
                var self = Kind$Parser$term$($5459, $5460);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5462 = self.idx;
                        var $5463 = self.code;
                        var $5464 = self.err;
                        var $5465 = Parser$Reply$error$($5462, $5463, $5464);
                        var $5461 = $5465;
                        break;
                    case 'Parser.Reply.value':
                        var $5466 = self.idx;
                        var $5467 = self.code;
                        var $5468 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5466, $5467);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5470 = self.idx;
                                var $5471 = self.code;
                                var $5472 = self.err;
                                var $5473 = Parser$Reply$error$($5470, $5471, $5472);
                                var $5469 = $5473;
                                break;
                            case 'Parser.Reply.value':
                                var $5474 = self.idx;
                                var $5475 = self.code;
                                var $5476 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5468);
                                var $5477 = Parser$Reply$value$($5474, $5475, Kind$Term$ori$($5476, _term$17));
                                var $5469 = $5477;
                                break;
                        };
                        var $5461 = $5469;
                        break;
                };
                var $5454 = $5461;
                break;
        };
        return $5454;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5479 = self.idx;
                var $5480 = self.code;
                var $5481 = self.err;
                var $5482 = Parser$Reply$error$($5479, $5480, $5481);
                var $5478 = $5482;
                break;
            case 'Parser.Reply.value':
                var $5483 = self.idx;
                var $5484 = self.code;
                var self = Kind$Parser$term$($5483, $5484);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5486 = self.idx;
                        var $5487 = self.code;
                        var $5488 = self.err;
                        var $5489 = Parser$Reply$error$($5486, $5487, $5488);
                        var $5485 = $5489;
                        break;
                    case 'Parser.Reply.value':
                        var $5490 = self.idx;
                        var $5491 = self.code;
                        var $5492 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5490, $5491);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5494 = self.idx;
                                var $5495 = self.code;
                                var $5496 = self.err;
                                var $5497 = Parser$Reply$error$($5494, $5495, $5496);
                                var $5493 = $5497;
                                break;
                            case 'Parser.Reply.value':
                                var $5498 = self.idx;
                                var $5499 = self.code;
                                var $5500 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5492);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $5501 = Parser$Reply$value$($5498, $5499, Kind$Term$ori$($5500, _term$18));
                                var $5493 = $5501;
                                break;
                        };
                        var $5485 = $5493;
                        break;
                };
                var $5478 = $5485;
                break;
        };
        return $5478;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5503 = self.idx;
                var $5504 = self.code;
                var $5505 = self.err;
                var $5506 = Parser$Reply$error$($5503, $5504, $5505);
                var $5502 = $5506;
                break;
            case 'Parser.Reply.value':
                var $5507 = self.idx;
                var $5508 = self.code;
                var self = Kind$Parser$text$("rewrite", $5507, $5508);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5510 = self.idx;
                        var $5511 = self.code;
                        var $5512 = self.err;
                        var $5513 = Parser$Reply$error$($5510, $5511, $5512);
                        var $5509 = $5513;
                        break;
                    case 'Parser.Reply.value':
                        var $5514 = self.idx;
                        var $5515 = self.code;
                        var self = Kind$Parser$name1$($5514, $5515);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5517 = self.idx;
                                var $5518 = self.code;
                                var $5519 = self.err;
                                var $5520 = Parser$Reply$error$($5517, $5518, $5519);
                                var $5516 = $5520;
                                break;
                            case 'Parser.Reply.value':
                                var $5521 = self.idx;
                                var $5522 = self.code;
                                var $5523 = self.val;
                                var self = Kind$Parser$text$("in", $5521, $5522);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5525 = self.idx;
                                        var $5526 = self.code;
                                        var $5527 = self.err;
                                        var $5528 = Parser$Reply$error$($5525, $5526, $5527);
                                        var $5524 = $5528;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5529 = self.idx;
                                        var $5530 = self.code;
                                        var self = Kind$Parser$term$($5529, $5530);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5532 = self.idx;
                                                var $5533 = self.code;
                                                var $5534 = self.err;
                                                var $5535 = Parser$Reply$error$($5532, $5533, $5534);
                                                var $5531 = $5535;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5536 = self.idx;
                                                var $5537 = self.code;
                                                var $5538 = self.val;
                                                var self = Kind$Parser$text$("with", $5536, $5537);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5540 = self.idx;
                                                        var $5541 = self.code;
                                                        var $5542 = self.err;
                                                        var $5543 = Parser$Reply$error$($5540, $5541, $5542);
                                                        var $5539 = $5543;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5544 = self.idx;
                                                        var $5545 = self.code;
                                                        var self = Kind$Parser$term$($5544, $5545);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5547 = self.idx;
                                                                var $5548 = self.code;
                                                                var $5549 = self.err;
                                                                var $5550 = Parser$Reply$error$($5547, $5548, $5549);
                                                                var $5546 = $5550;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5551 = self.idx;
                                                                var $5552 = self.code;
                                                                var $5553 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $5551, $5552);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $5555 = self.idx;
                                                                        var $5556 = self.code;
                                                                        var $5557 = self.err;
                                                                        var $5558 = Parser$Reply$error$($5555, $5556, $5557);
                                                                        var $5554 = $5558;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $5559 = self.idx;
                                                                        var $5560 = self.code;
                                                                        var $5561 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $5553);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($5523, (_x$34 => {
                                                                            var $5563 = $5538;
                                                                            return $5563;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $5562 = Parser$Reply$value$($5559, $5560, Kind$Term$ori$($5561, _term$35));
                                                                        var $5554 = $5562;
                                                                        break;
                                                                };
                                                                var $5546 = $5554;
                                                                break;
                                                        };
                                                        var $5539 = $5546;
                                                        break;
                                                };
                                                var $5531 = $5539;
                                                break;
                                        };
                                        var $5524 = $5531;
                                        break;
                                };
                                var $5516 = $5524;
                                break;
                        };
                        var $5509 = $5516;
                        break;
                };
                var $5502 = $5509;
                break;
        };
        return $5502;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5565 = self.idx;
                var $5566 = self.code;
                var $5567 = self.err;
                var $5568 = Parser$Reply$error$($5565, $5566, $5567);
                var $5564 = $5568;
                break;
            case 'Parser.Reply.value':
                var $5569 = self.idx;
                var $5570 = self.code;
                var self = Kind$Parser$term$($5569, $5570);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5572 = self.idx;
                        var $5573 = self.code;
                        var $5574 = self.err;
                        var $5575 = Parser$Reply$error$($5572, $5573, $5574);
                        var $5571 = $5575;
                        break;
                    case 'Parser.Reply.value':
                        var $5576 = self.idx;
                        var $5577 = self.code;
                        var $5578 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5576, $5577);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5580 = self.idx;
                                var $5581 = self.code;
                                var $5582 = self.err;
                                var $5583 = Parser$Reply$error$($5580, $5581, $5582);
                                var $5579 = $5583;
                                break;
                            case 'Parser.Reply.value':
                                var $5584 = self.idx;
                                var $5585 = self.code;
                                var $5586 = self.val;
                                var $5587 = Parser$Reply$value$($5584, $5585, Kind$Term$ori$($5586, Kind$Term$ann$(Bool$false, _term$2, $5578)));
                                var $5579 = $5587;
                                break;
                        };
                        var $5571 = $5579;
                        break;
                };
                var $5564 = $5571;
                break;
        };
        return $5564;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5589 = self.idx;
                var $5590 = self.code;
                var $5591 = self.err;
                var $5592 = Parser$Reply$error$($5589, $5590, $5591);
                var $5588 = $5592;
                break;
            case 'Parser.Reply.value':
                var $5593 = self.idx;
                var $5594 = self.code;
                var self = Kind$Parser$stop$(_init$1, $5593, $5594);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5596 = self.idx;
                        var $5597 = self.code;
                        var $5598 = self.err;
                        var $5599 = Parser$Reply$error$($5596, $5597, $5598);
                        var $5595 = $5599;
                        break;
                    case 'Parser.Reply.value':
                        var $5600 = self.idx;
                        var $5601 = self.code;
                        var $5602 = self.val;
                        var $5603 = Parser$Reply$value$($5600, $5601, Kind$Term$ori$($5602, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $5595 = $5603;
                        break;
                };
                var $5588 = $5595;
                break;
        };
        return $5588;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $5605 = self.idx;
                        var $5606 = self.code;
                        var $5607 = self.val;
                        var $5608 = Kind$Parser$suffix$(_init$1, $5607, $5605, $5606);
                        var $5604 = $5608;
                        break;
                    case 'Parser.Reply.error':
                        var $5609 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $5604 = $5609;
                        break;
                };
                return $5604;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5611 = self.idx;
                var $5612 = self.code;
                var $5613 = self.err;
                var $5614 = Parser$Reply$error$($5611, $5612, $5613);
                var $5610 = $5614;
                break;
            case 'Parser.Reply.value':
                var $5615 = self.idx;
                var $5616 = self.code;
                var $5617 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string, List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$float$64, List$cons$(Kind$Parser$float$32, List$cons$(Kind$Parser$machine_integer$signed$(256n), List$cons$(Kind$Parser$machine_integer$signed$(128n), List$cons$(Kind$Parser$machine_integer$signed$(64n), List$cons$(Kind$Parser$machine_integer$signed$(32n), List$cons$(Kind$Parser$machine_integer$signed$(16n), List$cons$(Kind$Parser$machine_integer$signed$(8n), List$cons$(Kind$Parser$int, List$cons$(Kind$Parser$machine_integer$unsigned$(256n), List$cons$(Kind$Parser$machine_integer$unsigned$(128n), List$cons$(Kind$Parser$machine_integer$unsigned$(64n), List$cons$(Kind$Parser$machine_integer$unsigned$(32n), List$cons$(Kind$Parser$machine_integer$unsigned$(16n), List$cons$(Kind$Parser$machine_integer$unsigned$(8n), List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))($5615)($5616);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5619 = self.idx;
                        var $5620 = self.code;
                        var $5621 = self.err;
                        var $5622 = Parser$Reply$error$($5619, $5620, $5621);
                        var $5618 = $5622;
                        break;
                    case 'Parser.Reply.value':
                        var $5623 = self.idx;
                        var $5624 = self.code;
                        var $5625 = self.val;
                        var $5626 = Kind$Parser$suffix$($5617, $5625, $5623, $5624);
                        var $5618 = $5626;
                        break;
                };
                var $5610 = $5618;
                break;
        };
        return $5610;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5628 = self.idx;
                var $5629 = self.code;
                var $5630 = self.err;
                var $5631 = Parser$Reply$error$($5628, $5629, $5630);
                var $5627 = $5631;
                break;
            case 'Parser.Reply.value':
                var $5632 = self.idx;
                var $5633 = self.code;
                var $5634 = self.val;
                var self = Kind$Parser$text$(_sep$1, $5632, $5633);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5636 = self.idx;
                        var $5637 = self.code;
                        var $5638 = self.err;
                        var $5639 = Parser$Reply$error$($5636, $5637, $5638);
                        var $5635 = $5639;
                        break;
                    case 'Parser.Reply.value':
                        var $5640 = self.idx;
                        var $5641 = self.code;
                        var self = Kind$Parser$term$($5640, $5641);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5643 = self.idx;
                                var $5644 = self.code;
                                var $5645 = self.err;
                                var $5646 = Parser$Reply$error$($5643, $5644, $5645);
                                var $5642 = $5646;
                                break;
                            case 'Parser.Reply.value':
                                var $5647 = self.idx;
                                var $5648 = self.code;
                                var $5649 = self.val;
                                var $5650 = Parser$Reply$value$($5647, $5648, Pair$new$($5634, $5649));
                                var $5642 = $5650;
                                break;
                        };
                        var $5635 = $5642;
                        break;
                };
                var $5627 = $5635;
                break;
        };
        return $5627;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $5651 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $5651;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $5653 = "<";
                return $5653;
            } else {
                var $5654 = "(";
                return $5654;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5655 = self.idx;
                var $5656 = self.code;
                var $5657 = self.err;
                var $5658 = Parser$Reply$error$($5655, $5656, $5657);
                var $5652 = $5658;
                break;
            case 'Parser.Reply.value':
                var $5659 = self.idx;
                var $5660 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $5662 = ">";
                        return $5662;
                    } else {
                        var $5663 = ")";
                        return $5663;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $5659, $5660);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5664 = self.idx;
                        var $5665 = self.code;
                        var $5666 = self.err;
                        var $5667 = Parser$Reply$error$($5664, $5665, $5666);
                        var $5661 = $5667;
                        break;
                    case 'Parser.Reply.value':
                        var $5668 = self.idx;
                        var $5669 = self.code;
                        var $5670 = self.val;
                        var $5671 = Parser$Reply$value$($5668, $5669, List$mapped$($5670, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $5673 = self.fst;
                                    var $5674 = self.snd;
                                    var $5675 = Kind$Binder$new$(_eras$2, $5673, $5674);
                                    var $5672 = $5675;
                                    break;
                            };
                            return $5672;
                        })));
                        var $5661 = $5671;
                        break;
                };
                var $5652 = $5661;
                break;
        };
        return $5652;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $5677 = self.head;
                var $5678 = self.tail;
                var $5679 = List$cons$($5677, List$concat$($5678, _bs$3));
                var $5676 = $5679;
                break;
            case 'List.nil':
                var $5680 = _bs$3;
                var $5676 = $5680;
                break;
        };
        return $5676;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5682 = self.head;
                var $5683 = self.tail;
                var $5684 = List$concat$($5682, List$flatten$($5683));
                var $5681 = $5684;
                break;
            case 'List.nil':
                var $5685 = List$nil;
                var $5681 = $5685;
                break;
        };
        return $5681;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5687 = self.idx;
                var $5688 = self.code;
                var $5689 = self.err;
                var $5690 = Parser$Reply$error$($5687, $5688, $5689);
                var $5686 = $5690;
                break;
            case 'Parser.Reply.value':
                var $5691 = self.idx;
                var $5692 = self.code;
                var $5693 = self.val;
                var $5694 = Parser$Reply$value$($5691, $5692, List$flatten$($5693));
                var $5686 = $5694;
                break;
        };
        return $5686;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $5696 = self.head;
                var $5697 = self.tail;
                var self = $5696;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5699 = self.eras;
                        var $5700 = self.name;
                        var $5701 = self.term;
                        var $5702 = Kind$Term$all$($5699, "", $5700, $5701, (_s$8 => _x$9 => {
                            var $5703 = Kind$Parser$make_forall$($5697, _body$2);
                            return $5703;
                        }));
                        var $5698 = $5702;
                        break;
                };
                var $5695 = $5698;
                break;
            case 'List.nil':
                var $5704 = _body$2;
                var $5695 = $5704;
                break;
        };
        return $5695;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $5705 = List$at$(_index$2, List$reverse$(_list$3));
        return $5705;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $5706 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $5706;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $5708 = Pair$new$("", 0n);
            var $5707 = $5708;
        } else {
            var $5709 = self.charCodeAt(0);
            var $5710 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($5710);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $5712 = self.fst;
                    var $5713 = self.snd;
                    var self = ($5709 === 94);
                    if (self) {
                        var $5715 = Pair$new$($5712, Nat$succ$($5713));
                        var $5714 = $5715;
                    } else {
                        var $5716 = Pair$new$(String$cons$($5709, $5712), $5713);
                        var $5714 = $5716;
                    };
                    var $5711 = $5714;
                    break;
            };
            var $5707 = $5711;
        };
        return $5707;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $5717 = (_a$1 === _b$2);
        return $5717;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $5718 = self.head;
                        var $5719 = self.tail;
                        var self = $5718;
                        switch (self._) {
                            case 'Pair.new':
                                var $5721 = self.fst;
                                var $5722 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $5721);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $5725 = Maybe$some$($5722);
                                        var $5724 = $5725;
                                    } else {
                                        var $5726 = (self - 1n);
                                        var $5727 = Kind$Context$find$go$(_name$1, $5726, $5719);
                                        var $5724 = $5727;
                                    };
                                    var $5723 = $5724;
                                } else {
                                    var $5728 = Kind$Context$find$go$(_name$1, _skip$2, $5719);
                                    var $5723 = $5728;
                                };
                                var $5720 = $5723;
                                break;
                        };
                        return $5720;
                    case 'List.nil':
                        var $5729 = Maybe$none;
                        return $5729;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $5731 = self.fst;
                var $5732 = self.snd;
                var $5733 = Kind$Context$find$go$($5731, $5732, _ctx$2);
                var $5730 = $5733;
                break;
        };
        return $5730;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $5734 = _path$1((_x$2 + '0'));
        return $5734;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $5735 = _path$1((_x$2 + '1'));
        return $5735;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $5736 = _path$1(Bits$e);
        return $5736;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $5738 = self.name;
                var $5739 = self.indx;
                var self = List$at_last$($5739, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5741 = self.value;
                        var $5742 = Pair$snd$($5741);
                        var $5740 = $5742;
                        break;
                    case 'Maybe.none':
                        var $5743 = Kind$Term$var$($5738, $5739);
                        var $5740 = $5743;
                        break;
                };
                var $5737 = $5740;
                break;
            case 'Kind.Term.ref':
                var $5744 = self.name;
                var self = Kind$Context$find$($5744, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5746 = self.value;
                        var $5747 = $5746;
                        var $5745 = $5747;
                        break;
                    case 'Maybe.none':
                        var $5748 = Kind$Term$ref$($5744);
                        var $5745 = $5748;
                        break;
                };
                var $5737 = $5745;
                break;
            case 'Kind.Term.all':
                var $5749 = self.eras;
                var $5750 = self.self;
                var $5751 = self.name;
                var $5752 = self.xtyp;
                var $5753 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $5754 = Kind$Term$all$($5749, $5750, $5751, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5752), (_s$10 => _x$11 => {
                    var $5755 = Kind$Term$bind$(List$cons$(Pair$new$($5751, _x$11), List$cons$(Pair$new$($5750, _s$10), _vars$1)), Kind$Path$i(_path$2), $5753(Kind$Term$var$($5750, _vlen$9))(Kind$Term$var$($5751, Nat$succ$(_vlen$9))));
                    return $5755;
                }));
                var $5737 = $5754;
                break;
            case 'Kind.Term.lam':
                var $5756 = self.name;
                var $5757 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $5758 = Kind$Term$lam$($5756, (_x$7 => {
                    var $5759 = Kind$Term$bind$(List$cons$(Pair$new$($5756, _x$7), _vars$1), Kind$Path$o(_path$2), $5757(Kind$Term$var$($5756, _vlen$6)));
                    return $5759;
                }));
                var $5737 = $5758;
                break;
            case 'Kind.Term.app':
                var $5760 = self.func;
                var $5761 = self.argm;
                var $5762 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5760), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5761));
                var $5737 = $5762;
                break;
            case 'Kind.Term.let':
                var $5763 = self.name;
                var $5764 = self.expr;
                var $5765 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5766 = Kind$Term$let$($5763, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5764), (_x$8 => {
                    var $5767 = Kind$Term$bind$(List$cons$(Pair$new$($5763, _x$8), _vars$1), Kind$Path$i(_path$2), $5765(Kind$Term$var$($5763, _vlen$7)));
                    return $5767;
                }));
                var $5737 = $5766;
                break;
            case 'Kind.Term.def':
                var $5768 = self.name;
                var $5769 = self.expr;
                var $5770 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5771 = Kind$Term$def$($5768, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5769), (_x$8 => {
                    var $5772 = Kind$Term$bind$(List$cons$(Pair$new$($5768, _x$8), _vars$1), Kind$Path$i(_path$2), $5770(Kind$Term$var$($5768, _vlen$7)));
                    return $5772;
                }));
                var $5737 = $5771;
                break;
            case 'Kind.Term.ann':
                var $5773 = self.done;
                var $5774 = self.term;
                var $5775 = self.type;
                var $5776 = Kind$Term$ann$($5773, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5774), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5775));
                var $5737 = $5776;
                break;
            case 'Kind.Term.gol':
                var $5777 = self.name;
                var $5778 = self.dref;
                var $5779 = self.verb;
                var $5780 = Kind$Term$gol$($5777, $5778, $5779);
                var $5737 = $5780;
                break;
            case 'Kind.Term.nat':
                var $5781 = self.natx;
                var $5782 = Kind$Term$nat$($5781);
                var $5737 = $5782;
                break;
            case 'Kind.Term.chr':
                var $5783 = self.chrx;
                var $5784 = Kind$Term$chr$($5783);
                var $5737 = $5784;
                break;
            case 'Kind.Term.str':
                var $5785 = self.strx;
                var $5786 = Kind$Term$str$($5785);
                var $5737 = $5786;
                break;
            case 'Kind.Term.cse':
                var $5787 = self.expr;
                var $5788 = self.name;
                var $5789 = self.with;
                var $5790 = self.cses;
                var $5791 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5787);
                var _name$11 = $5788;
                var _wyth$12 = List$mapped$($5789, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $5794 = self.name;
                            var $5795 = self.term;
                            var $5796 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $5795);
                            var self = $5796;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $5798 = self.value;
                                    var $5799 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $5798));
                                    var _with_var_type$17 = $5799;
                                    break;
                                case 'Maybe.none':
                                    var $5800 = Maybe$none;
                                    var _with_var_type$17 = $5800;
                                    break;
                            };
                            var $5797 = Kind$Ann$new$($5794, _with_var_term$16, _with_var_type$17);
                            var $5793 = $5797;
                            break;
                    };
                    return $5793;
                }));
                var _cses$13 = $5790;
                var _moti$14 = $5791;
                var $5792 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $5737 = $5792;
                break;
            case 'Kind.Term.ori':
                var $5801 = self.orig;
                var $5802 = self.expr;
                var $5803 = Kind$Term$ori$($5801, Kind$Term$bind$(_vars$1, _path$2, $5802));
                var $5737 = $5803;
                break;
            case 'Kind.Term.typ':
                var $5804 = Kind$Term$typ;
                var $5737 = $5804;
                break;
            case 'Kind.Term.hol':
                var $5805 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $5737 = $5805;
                break;
        };
        return $5737;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);

    function Trampoline$call$(_t$2) {
        var Trampoline$call$ = (_t$2) => ({
            ctr: 'TCO',
            arg: [_t$2]
        });
        var Trampoline$call = _t$2 => Trampoline$call$(_t$2);
        var arg = [_t$2];
        while (true) {
            let [_t$2] = arg;
            var R = (() => {
                var self = _t$2;
                switch (self._) {
                    case 'Trampoline.done':
                        var $5806 = self.value;
                        var $5807 = $5806;
                        return $5807;
                    case 'Trampoline.wrap':
                        var $5808 = self.value;
                        var $5809 = Trampoline$call$($5808(Unit$new));
                        return $5809;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Trampoline$call = x0 => Trampoline$call$(x0);

    function Trampoline$(_A$1) {
        var $5810 = null;
        return $5810;
    };
    const Trampoline = x0 => Trampoline$(x0);

    function Trampoline$wrap$(_value$2) {
        var $5811 = ({
            _: 'Trampoline.wrap',
            'value': _value$2
        });
        return $5811;
    };
    const Trampoline$wrap = x0 => Trampoline$wrap$(x0);

    function BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5) {
        var BitsMap$set_if_empty$cps$go$ = (_bits$2, _val$3, _map$4, _cont$5) => ({
            ctr: 'TCO',
            arg: [_bits$2, _val$3, _map$4, _cont$5]
        });
        var BitsMap$set_if_empty$cps$go = _bits$2 => _val$3 => _map$4 => _cont$5 => BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5);
        var arg = [_bits$2, _val$3, _map$4, _cont$5];
        while (true) {
            let [_bits$2, _val$3, _map$4, _cont$5] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $5812 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5814 = self.val;
                                var $5815 = self.lft;
                                var $5816 = self.rgt;
                                var $5817 = BitsMap$set_if_empty$cps$go$($5812, _val$3, $5815, (_lft$10 => {
                                    var $5818 = Trampoline$wrap$((_$11 => {
                                        var $5819 = _cont$5(BitsMap$tie$($5814, _lft$10, $5816));
                                        return $5819;
                                    }));
                                    return $5818;
                                }));
                                var $5813 = $5817;
                                break;
                            case 'BitsMap.new':
                                var $5820 = BitsMap$set_if_empty$cps$go$($5812, _val$3, BitsMap$new, (_lft$7 => {
                                    var $5821 = Trampoline$wrap$((_$8 => {
                                        var $5822 = _cont$5(BitsMap$tie$(Maybe$none, _lft$7, BitsMap$new));
                                        return $5822;
                                    }));
                                    return $5821;
                                }));
                                var $5813 = $5820;
                                break;
                        };
                        return $5813;
                    case 'i':
                        var $5823 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5825 = self.val;
                                var $5826 = self.lft;
                                var $5827 = self.rgt;
                                var $5828 = BitsMap$set_if_empty$cps$go$($5823, _val$3, $5827, (_rgt$10 => {
                                    var $5829 = Trampoline$wrap$((_$11 => {
                                        var $5830 = _cont$5(BitsMap$tie$($5825, $5826, _rgt$10));
                                        return $5830;
                                    }));
                                    return $5829;
                                }));
                                var $5824 = $5828;
                                break;
                            case 'BitsMap.new':
                                var $5831 = BitsMap$set_if_empty$cps$go$($5823, _val$3, BitsMap$new, (_rgt$7 => {
                                    var $5832 = Trampoline$wrap$((_$8 => {
                                        var $5833 = _cont$5(BitsMap$tie$(Maybe$none, BitsMap$new, _rgt$7));
                                        return $5833;
                                    }));
                                    return $5832;
                                }));
                                var $5824 = $5831;
                                break;
                        };
                        return $5824;
                    case 'e':
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5835 = self.val;
                                var $5836 = self.lft;
                                var $5837 = self.rgt;
                                var $5838 = _cont$5(BitsMap$tie$((() => {
                                    var self = $5835;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $5839 = self.value;
                                            var $5840 = Maybe$some$($5839);
                                            return $5840;
                                        case 'Maybe.none':
                                            var $5841 = Maybe$some$(_val$3);
                                            return $5841;
                                    };
                                })(), $5836, $5837));
                                var $5834 = $5838;
                                break;
                            case 'BitsMap.new':
                                var $5842 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new));
                                var $5834 = $5842;
                                break;
                        };
                        return $5834;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$set_if_empty$cps$go = x0 => x1 => x2 => x3 => BitsMap$set_if_empty$cps$go$(x0, x1, x2, x3);

    function Trampoline$done$(_value$2) {
        var $5843 = ({
            _: 'Trampoline.done',
            'value': _value$2
        });
        return $5843;
    };
    const Trampoline$done = x0 => Trampoline$done$(x0);

    function BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4) {
        var $5844 = Trampoline$call$(BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, Trampoline$done));
        return $5844;
    };
    const BitsMap$set_if_empty$cps = x0 => x1 => x2 => BitsMap$set_if_empty$cps$(x0, x1, x2);

    function BitsMap$set_if_empty$(_bits$2, _val$3, _map$4) {
        var $5845 = BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4);
        return $5845;
    };
    const BitsMap$set_if_empty = x0 => x1 => x2 => BitsMap$set_if_empty$(x0, x1, x2);

    function Kind$Map$set_if_empty$(_name$2, _val$3, _map$4) {
        var $5846 = BitsMap$set_if_empty$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $5846;
    };
    const Kind$Map$set_if_empty = x0 => x1 => x2 => Kind$Map$set_if_empty$(x0, x1, x2);
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var _defn$11 = Kind$Def$new(_file$1)(_code$2)(_orig$3)(_name$4)(_term$5)(_type$6)(_isct$7)(_arit$8);
        var self = _done$9;
        if (self) {
            var $5848 = Kind$Map$set$(_name$4, _defn$11(Kind$Status$done), _defs$10);
            var $5847 = $5848;
        } else {
            var $5849 = Kind$Map$set_if_empty$(_name$4, _defn$11(Kind$Status$init), _defs$10);
            var $5847 = $5849;
        };
        return $5847;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5851 = self.idx;
                var $5852 = self.code;
                var $5853 = self.err;
                var $5854 = Parser$Reply$error$($5851, $5852, $5853);
                var $5850 = $5854;
                break;
            case 'Parser.Reply.value':
                var $5855 = self.idx;
                var $5856 = self.code;
                var $5857 = self.val;
                var self = Kind$Parser$name1$($5855, $5856);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5859 = self.idx;
                        var $5860 = self.code;
                        var $5861 = self.err;
                        var $5862 = Parser$Reply$error$($5859, $5860, $5861);
                        var $5858 = $5862;
                        break;
                    case 'Parser.Reply.value':
                        var $5863 = self.idx;
                        var $5864 = self.code;
                        var $5865 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($5863)($5864);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5867 = self.idx;
                                var $5868 = self.code;
                                var $5869 = self.err;
                                var $5870 = Parser$Reply$error$($5867, $5868, $5869);
                                var $5866 = $5870;
                                break;
                            case 'Parser.Reply.value':
                                var $5871 = self.idx;
                                var $5872 = self.code;
                                var $5873 = self.val;
                                var _args$15 = List$flatten$($5873);
                                var self = Kind$Parser$text$(":", $5871, $5872);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5875 = self.idx;
                                        var $5876 = self.code;
                                        var $5877 = self.err;
                                        var $5878 = Parser$Reply$error$($5875, $5876, $5877);
                                        var $5874 = $5878;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5879 = self.idx;
                                        var $5880 = self.code;
                                        var self = Kind$Parser$term$($5879, $5880);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5882 = self.idx;
                                                var $5883 = self.code;
                                                var $5884 = self.err;
                                                var $5885 = Parser$Reply$error$($5882, $5883, $5884);
                                                var $5881 = $5885;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5886 = self.idx;
                                                var $5887 = self.code;
                                                var $5888 = self.val;
                                                var self = Kind$Parser$term$($5886, $5887);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5890 = self.idx;
                                                        var $5891 = self.code;
                                                        var $5892 = self.err;
                                                        var $5893 = Parser$Reply$error$($5890, $5891, $5892);
                                                        var $5889 = $5893;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5894 = self.idx;
                                                        var $5895 = self.code;
                                                        var $5896 = self.val;
                                                        var self = Kind$Parser$stop$($5857, $5894, $5895);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5898 = self.idx;
                                                                var $5899 = self.code;
                                                                var $5900 = self.err;
                                                                var $5901 = Parser$Reply$error$($5898, $5899, $5900);
                                                                var $5897 = $5901;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5902 = self.idx;
                                                                var $5903 = self.code;
                                                                var $5904 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $5888);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $5907 = self.name;
                                                                            var $5908 = $5907;
                                                                            var $5906 = $5908;
                                                                            break;
                                                                    };
                                                                    return $5906;
                                                                })), $5896);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $5909 = (_x$31 + '1');
                                                                    return $5909;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $5910 = (_x$32 + '0');
                                                                    return $5910;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $5904, $5865, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $5905 = Parser$Reply$value$($5902, $5903, _defs$33);
                                                                var $5897 = $5905;
                                                                break;
                                                        };
                                                        var $5889 = $5897;
                                                        break;
                                                };
                                                var $5881 = $5889;
                                                break;
                                        };
                                        var $5874 = $5881;
                                        break;
                                };
                                var $5866 = $5874;
                                break;
                        };
                        var $5858 = $5866;
                        break;
                };
                var $5850 = $5858;
                break;
        };
        return $5850;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $5911 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $5911;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5913 = self.idx;
                var $5914 = self.code;
                var $5915 = self.err;
                var $5916 = Parser$Reply$error$($5913, $5914, $5915);
                var $5912 = $5916;
                break;
            case 'Parser.Reply.value':
                var $5917 = self.idx;
                var $5918 = self.code;
                var $5919 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $5917, $5918);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5921 = self.idx;
                        var $5922 = self.code;
                        var $5923 = self.err;
                        var $5924 = Parser$Reply$error$($5921, $5922, $5923);
                        var $5920 = $5924;
                        break;
                    case 'Parser.Reply.value':
                        var $5925 = self.idx;
                        var $5926 = self.code;
                        var $5927 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $5930 = self.idx;
                                    var $5931 = self.code;
                                    var $5932 = self.err;
                                    var $5933 = Parser$Reply$error$($5930, $5931, $5932);
                                    var $5929 = $5933;
                                    break;
                                case 'Parser.Reply.value':
                                    var $5934 = self.idx;
                                    var $5935 = self.code;
                                    var $5936 = Kind$Parser$binder$("=", $5934, $5935);
                                    var $5929 = $5936;
                                    break;
                            };
                            return $5929;
                        }), $5925, $5926);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5937 = self.idx;
                                var $5938 = self.code;
                                var $5939 = self.err;
                                var $5940 = Parser$Reply$error$($5937, $5938, $5939);
                                var $5928 = $5940;
                                break;
                            case 'Parser.Reply.value':
                                var $5941 = self.idx;
                                var $5942 = self.code;
                                var $5943 = self.val;
                                var _args$13 = Maybe$default$($5927, List$nil);
                                var _inds$14 = Maybe$default$($5943, List$nil);
                                var $5944 = Parser$Reply$value$($5941, $5942, Kind$Constructor$new$($5919, _args$13, _inds$14));
                                var $5928 = $5944;
                                break;
                        };
                        var $5920 = $5928;
                        break;
                };
                var $5912 = $5920;
                break;
        };
        return $5912;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $5945 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $5945;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5947 = self.idx;
                var $5948 = self.code;
                var $5949 = self.err;
                var $5950 = Parser$Reply$error$($5947, $5948, $5949);
                var $5946 = $5950;
                break;
            case 'Parser.Reply.value':
                var $5951 = self.idx;
                var $5952 = self.code;
                var self = Kind$Parser$name1$($5951, $5952);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5954 = self.idx;
                        var $5955 = self.code;
                        var $5956 = self.err;
                        var $5957 = Parser$Reply$error$($5954, $5955, $5956);
                        var $5953 = $5957;
                        break;
                    case 'Parser.Reply.value':
                        var $5958 = self.idx;
                        var $5959 = self.code;
                        var $5960 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $5958, $5959);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5962 = self.idx;
                                var $5963 = self.code;
                                var $5964 = self.err;
                                var $5965 = Parser$Reply$error$($5962, $5963, $5964);
                                var $5961 = $5965;
                                break;
                            case 'Parser.Reply.value':
                                var $5966 = self.idx;
                                var $5967 = self.code;
                                var $5968 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $5971 = self.idx;
                                            var $5972 = self.code;
                                            var $5973 = self.err;
                                            var $5974 = Parser$Reply$error$($5971, $5972, $5973);
                                            var $5970 = $5974;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $5975 = self.idx;
                                            var $5976 = self.code;
                                            var $5977 = Kind$Parser$binder$(":", $5975, $5976);
                                            var $5970 = $5977;
                                            break;
                                    };
                                    return $5970;
                                }), $5966, $5967);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5978 = self.idx;
                                        var $5979 = self.code;
                                        var $5980 = self.err;
                                        var $5981 = Parser$Reply$error$($5978, $5979, $5980);
                                        var $5969 = $5981;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5982 = self.idx;
                                        var $5983 = self.code;
                                        var $5984 = self.val;
                                        var _pars$15 = Maybe$default$($5968, List$nil);
                                        var _inds$16 = Maybe$default$($5984, List$nil);
                                        var self = Kind$Parser$text$("{", $5982, $5983);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5986 = self.idx;
                                                var $5987 = self.code;
                                                var $5988 = self.err;
                                                var $5989 = Parser$Reply$error$($5986, $5987, $5988);
                                                var $5985 = $5989;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5990 = self.idx;
                                                var $5991 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($5960)))($5990)($5991);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5993 = self.idx;
                                                        var $5994 = self.code;
                                                        var $5995 = self.err;
                                                        var $5996 = Parser$Reply$error$($5993, $5994, $5995);
                                                        var $5992 = $5996;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5997 = self.idx;
                                                        var $5998 = self.code;
                                                        var $5999 = self.val;
                                                        var $6000 = Parser$Reply$value$($5997, $5998, Kind$Datatype$new$($5960, _pars$15, _inds$16, $5999));
                                                        var $5992 = $6000;
                                                        break;
                                                };
                                                var $5985 = $5992;
                                                break;
                                        };
                                        var $5969 = $5985;
                                        break;
                                };
                                var $5961 = $5969;
                                break;
                        };
                        var $5953 = $5961;
                        break;
                };
                var $5946 = $5953;
                break;
        };
        return $5946;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $6002 = self.head;
                var $6003 = self.tail;
                var self = $6002;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6005 = self.eras;
                        var $6006 = self.name;
                        var $6007 = self.term;
                        var $6008 = Kind$Term$all$($6005, "", $6006, $6007, (_s$9 => _x$10 => {
                            var $6009 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $6003);
                            return $6009;
                        }));
                        var $6004 = $6008;
                        break;
                };
                var $6001 = $6004;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6011 = self.pars;
                        var $6012 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $6015 = _slf$8;
                            var $6016 = $6011;
                            let _slf$10 = $6015;
                            let _v$9;
                            while ($6016._ === 'List.cons') {
                                _v$9 = $6016.head;
                                var $6015 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6017 = self.name;
                                            var $6018 = $6017;
                                            return $6018;
                                    };
                                })()));
                                _slf$10 = $6015;
                                $6016 = $6016.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $6020 = _slf$9;
                            var $6021 = $6012;
                            let _slf$11 = $6020;
                            let _v$10;
                            while ($6021._ === 'List.cons') {
                                _v$10 = $6021.head;
                                var $6020 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6022 = self.name;
                                            var $6023 = $6022;
                                            return $6023;
                                    };
                                })()));
                                _slf$11 = $6020;
                                $6021 = $6021.tail;
                            }
                            return _slf$11;
                        })();
                        var $6013 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $6024 = Kind$Term$typ;
                            return $6024;
                        }));
                        var $6010 = $6013;
                        break;
                };
                var $6001 = $6010;
                break;
        };
        return $6001;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6026 = self.name;
                var $6027 = self.inds;
                var $6028 = Kind$Datatype$build_term$motive$go$(_type$1, $6026, $6027);
                var $6025 = $6028;
                break;
        };
        return $6025;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $6030 = self.head;
                var $6031 = self.tail;
                var self = $6030;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6033 = self.eras;
                        var $6034 = self.name;
                        var $6035 = self.term;
                        var _eras$9 = $6033;
                        var _name$10 = $6034;
                        var _xtyp$11 = $6035;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6031);
                        var $6036 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $6037 = _body$12;
                            return $6037;
                        }));
                        var $6032 = $6036;
                        break;
                };
                var $6029 = $6032;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6039 = self.name;
                        var $6040 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $6042 = self.name;
                                var $6043 = self.args;
                                var $6044 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $6047 = _ret$11;
                                    var $6048 = $6044;
                                    let _ret$13 = $6047;
                                    let _v$12;
                                    while ($6048._ === 'List.cons') {
                                        _v$12 = $6048.head;
                                        var $6047 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6049 = self.term;
                                                    var $6050 = $6049;
                                                    return $6050;
                                            };
                                        })());
                                        _ret$13 = $6047;
                                        $6048 = $6048.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($6039, List$cons$(Kind$Name$read$("."), List$cons$($6042, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $6052 = _slf$14;
                                    var $6053 = $6040;
                                    let _slf$16 = $6052;
                                    let _v$15;
                                    while ($6053._ === 'List.cons') {
                                        _v$15 = $6053.head;
                                        var $6052 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6054 = self.name;
                                                    var $6055 = $6054;
                                                    return $6055;
                                            };
                                        })()));
                                        _slf$16 = $6052;
                                        $6053 = $6053.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $6057 = _slf$15;
                                    var $6058 = $6043;
                                    let _slf$17 = $6057;
                                    let _v$16;
                                    while ($6058._ === 'List.cons') {
                                        _v$16 = $6058.head;
                                        var $6057 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6059 = self.name;
                                                    var $6060 = $6059;
                                                    return $6060;
                                            };
                                        })()));
                                        _slf$17 = $6057;
                                        $6058 = $6058.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $6045 = Kind$Term$app$(_ret$12, _slf$16);
                                var $6041 = $6045;
                                break;
                        };
                        var $6038 = $6041;
                        break;
                };
                var $6029 = $6038;
                break;
        };
        return $6029;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $6062 = self.args;
                var $6063 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6062);
                var $6061 = $6063;
                break;
        };
        return $6061;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6065 = self.head;
                var $6066 = self.tail;
                var self = $6065;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6068 = self.name;
                        var $6069 = Kind$Term$all$(Bool$false, "", $6068, Kind$Datatype$build_term$constructor$(_type$1, $6065), (_s$9 => _x$10 => {
                            var $6070 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $6066);
                            return $6070;
                        }));
                        var $6067 = $6069;
                        break;
                };
                var $6064 = $6067;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6072 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $6075 = _ret$8;
                            var $6076 = $6072;
                            let _ret$10 = $6075;
                            let _v$9;
                            while ($6076._ === 'List.cons') {
                                _v$9 = $6076.head;
                                var $6075 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6077 = self.name;
                                            var $6078 = $6077;
                                            return $6078;
                                    };
                                })()));
                                _ret$10 = $6075;
                                $6076 = $6076.tail;
                            }
                            return _ret$10;
                        })();
                        var $6073 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $6071 = $6073;
                        break;
                };
                var $6064 = $6071;
                break;
        };
        return $6064;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6080 = self.name;
                var $6081 = self.ctrs;
                var $6082 = Kind$Datatype$build_term$constructors$go$(_type$1, $6080, $6081);
                var $6079 = $6082;
                break;
        };
        return $6079;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6084 = self.head;
                var $6085 = self.tail;
                var self = $6084;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6087 = self.name;
                        var $6088 = Kind$Term$lam$($6087, (_x$10 => {
                            var $6089 = Kind$Datatype$build_term$go$(_type$1, _name$2, $6085, _inds$4);
                            return $6089;
                        }));
                        var $6086 = $6088;
                        break;
                };
                var $6083 = $6086;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6091 = self.head;
                        var $6092 = self.tail;
                        var self = $6091;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6094 = self.name;
                                var $6095 = Kind$Term$lam$($6094, (_x$10 => {
                                    var $6096 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $6092);
                                    return $6096;
                                }));
                                var $6093 = $6095;
                                break;
                        };
                        var $6090 = $6093;
                        break;
                    case 'List.nil':
                        var $6097 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $6098 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $6098;
                        }));
                        var $6090 = $6097;
                        break;
                };
                var $6083 = $6090;
                break;
        };
        return $6083;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6100 = self.name;
                var $6101 = self.pars;
                var $6102 = self.inds;
                var $6103 = Kind$Datatype$build_term$go$(_type$1, $6100, $6101, $6102);
                var $6099 = $6103;
                break;
        };
        return $6099;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6105 = self.head;
                var $6106 = self.tail;
                var self = $6105;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6108 = self.name;
                        var $6109 = self.term;
                        var $6110 = Kind$Term$all$(Bool$false, "", $6108, $6109, (_s$10 => _x$11 => {
                            var $6111 = Kind$Datatype$build_type$go$(_type$1, _name$2, $6106, _inds$4);
                            return $6111;
                        }));
                        var $6107 = $6110;
                        break;
                };
                var $6104 = $6107;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6113 = self.head;
                        var $6114 = self.tail;
                        var self = $6113;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6116 = self.name;
                                var $6117 = self.term;
                                var $6118 = Kind$Term$all$(Bool$false, "", $6116, $6117, (_s$10 => _x$11 => {
                                    var $6119 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $6114);
                                    return $6119;
                                }));
                                var $6115 = $6118;
                                break;
                        };
                        var $6112 = $6115;
                        break;
                    case 'List.nil':
                        var $6120 = Kind$Term$typ;
                        var $6112 = $6120;
                        break;
                };
                var $6104 = $6112;
                break;
        };
        return $6104;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6122 = self.name;
                var $6123 = self.pars;
                var $6124 = self.inds;
                var $6125 = Kind$Datatype$build_type$go$(_type$1, $6122, $6123, $6124);
                var $6121 = $6125;
                break;
        };
        return $6121;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6127 = self.head;
                var $6128 = self.tail;
                var self = $6127;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6130 = self.name;
                        var $6131 = Kind$Term$lam$($6130, (_x$9 => {
                            var $6132 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6128);
                            return $6132;
                        }));
                        var $6129 = $6131;
                        break;
                };
                var $6126 = $6129;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6134 = self.name;
                        var $6135 = self.args;
                        var _ret$7 = Kind$Term$ref$($6134);
                        var _ret$8 = (() => {
                            var $6138 = _ret$7;
                            var $6139 = $6135;
                            let _ret$9 = $6138;
                            let _arg$8;
                            while ($6139._ === 'List.cons') {
                                _arg$8 = $6139.head;
                                var $6138 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6140 = self.name;
                                            var $6141 = $6140;
                                            return $6141;
                                    };
                                })()));
                                _ret$9 = $6138;
                                $6139 = $6139.tail;
                            }
                            return _ret$9;
                        })();
                        var $6136 = _ret$8;
                        var $6133 = $6136;
                        break;
                };
                var $6126 = $6133;
                break;
        };
        return $6126;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6143 = self.ctrs;
                var $6144 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6143);
                var $6142 = $6144;
                break;
        };
        return $6142;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6146 = self.head;
                var $6147 = self.tail;
                var self = $6146;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6149 = self.name;
                        var $6150 = Kind$Term$lam$($6149, (_x$11 => {
                            var $6151 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $6147, _args$5);
                            return $6151;
                        }));
                        var $6148 = $6150;
                        break;
                };
                var $6145 = $6148;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6153 = self.head;
                        var $6154 = self.tail;
                        var self = $6153;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6156 = self.name;
                                var $6157 = Kind$Term$lam$($6156, (_x$11 => {
                                    var $6158 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $6154);
                                    return $6158;
                                }));
                                var $6155 = $6157;
                                break;
                        };
                        var $6152 = $6155;
                        break;
                    case 'List.nil':
                        var $6159 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $6160 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $6160;
                        }));
                        var $6152 = $6159;
                        break;
                };
                var $6145 = $6152;
                break;
        };
        return $6145;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6162 = self.name;
                var $6163 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6165 = self.args;
                        var $6166 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $6162, $6163, $6165);
                        var $6164 = $6166;
                        break;
                };
                var $6161 = $6164;
                break;
        };
        return $6161;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6168 = self.head;
                var $6169 = self.tail;
                var self = $6168;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6171 = self.eras;
                        var $6172 = self.name;
                        var $6173 = self.term;
                        var $6174 = Kind$Term$all$($6171, "", $6172, $6173, (_s$11 => _x$12 => {
                            var $6175 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $6169, _args$5);
                            return $6175;
                        }));
                        var $6170 = $6174;
                        break;
                };
                var $6167 = $6170;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6177 = self.head;
                        var $6178 = self.tail;
                        var self = $6177;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6180 = self.eras;
                                var $6181 = self.name;
                                var $6182 = self.term;
                                var $6183 = Kind$Term$all$($6180, "", $6181, $6182, (_s$11 => _x$12 => {
                                    var $6184 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $6178);
                                    return $6184;
                                }));
                                var $6179 = $6183;
                                break;
                        };
                        var $6176 = $6179;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $6186 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $6188 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $6191 = _type$13;
                                            var $6192 = $6186;
                                            let _type$15 = $6191;
                                            let _v$14;
                                            while ($6192._ === 'List.cons') {
                                                _v$14 = $6192.head;
                                                var $6191 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6193 = self.name;
                                                            var $6194 = $6193;
                                                            return $6194;
                                                    };
                                                })()));
                                                _type$15 = $6191;
                                                $6192 = $6192.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $6196 = _type$14;
                                            var $6197 = $6188;
                                            let _type$16 = $6196;
                                            let _v$15;
                                            while ($6197._ === 'List.cons') {
                                                _v$15 = $6197.head;
                                                var $6196 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6198 = self.term;
                                                            var $6199 = $6198;
                                                            return $6199;
                                                    };
                                                })());
                                                _type$16 = $6196;
                                                $6197 = $6197.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $6189 = _type$15;
                                        var $6187 = $6189;
                                        break;
                                };
                                var $6185 = $6187;
                                break;
                        };
                        var $6176 = $6185;
                        break;
                };
                var $6167 = $6176;
                break;
        };
        return $6167;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6201 = self.name;
                var $6202 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6204 = self.args;
                        var $6205 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $6201, $6202, $6204);
                        var $6203 = $6205;
                        break;
                };
                var $6200 = $6203;
                break;
        };
        return $6200;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6207 = self.idx;
                var $6208 = self.code;
                var $6209 = self.err;
                var $6210 = Parser$Reply$error$($6207, $6208, $6209);
                var $6206 = $6210;
                break;
            case 'Parser.Reply.value':
                var $6211 = self.idx;
                var $6212 = self.code;
                var $6213 = self.val;
                var self = Kind$Parser$datatype$($6211, $6212);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6215 = self.idx;
                        var $6216 = self.code;
                        var $6217 = self.err;
                        var $6218 = Parser$Reply$error$($6215, $6216, $6217);
                        var $6214 = $6218;
                        break;
                    case 'Parser.Reply.value':
                        var $6219 = self.idx;
                        var $6220 = self.code;
                        var $6221 = self.val;
                        var self = Kind$Parser$stop$($6213, $6219, $6220);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6223 = self.idx;
                                var $6224 = self.code;
                                var $6225 = self.err;
                                var $6226 = Parser$Reply$error$($6223, $6224, $6225);
                                var $6222 = $6226;
                                break;
                            case 'Parser.Reply.value':
                                var $6227 = self.idx;
                                var $6228 = self.code;
                                var $6229 = self.val;
                                var self = $6221;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $6231 = self.name;
                                        var $6232 = self.pars;
                                        var $6233 = self.inds;
                                        var $6234 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($6221);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $6236 = (_x$20 + '1');
                                            return $6236;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($6221);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $6237 = (_x$22 + '0');
                                            return $6237;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($6232)) + (list_length($6233)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $6229, $6231, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($6234, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $6231;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6239 = self.args;
                                                        var $6240 = $6239;
                                                        return $6240;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6241 = self.name;
                                                        var $6242 = $6241;
                                                        return $6242;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($6221, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $6243 = (_x$31 + '1');
                                                return $6243;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($6221, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $6244 = (_x$33 + '0');
                                                return $6244;
                                            }), _ctr_type$32);
                                            var $6238 = Kind$Map$def$(_file$1, _code$2, $6229, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $6238;
                                        }));
                                        var $6235 = (_idx$26 => _code$27 => {
                                            var $6245 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $6245;
                                        });
                                        var $6230 = $6235;
                                        break;
                                };
                                var $6230 = $6230($6227)($6228);
                                var $6222 = $6230;
                                break;
                        };
                        var $6214 = $6222;
                        break;
                };
                var $6206 = $6214;
                break;
        };
        return $6206;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6247 = self.idx;
                var $6248 = self.code;
                var $6249 = self.err;
                var $6250 = Parser$Reply$error$($6247, $6248, $6249);
                var $6246 = $6250;
                break;
            case 'Parser.Reply.value':
                var $6251 = self.idx;
                var $6252 = self.code;
                var self = Parser$eof$($6251, $6252);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6254 = self.idx;
                        var $6255 = self.code;
                        var $6256 = self.err;
                        var $6257 = Parser$Reply$error$($6254, $6255, $6256);
                        var $6253 = $6257;
                        break;
                    case 'Parser.Reply.value':
                        var $6258 = self.idx;
                        var $6259 = self.code;
                        var $6260 = Parser$Reply$value$($6258, $6259, _defs$3);
                        var $6253 = $6260;
                        break;
                };
                var $6246 = $6253;
                break;
        };
        return $6246;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6262 = self.idx;
                var $6263 = self.code;
                var $6264 = self.err;
                var $6265 = Parser$Reply$error$($6262, $6263, $6264);
                var $6261 = $6265;
                break;
            case 'Parser.Reply.value':
                var $6266 = self.idx;
                var $6267 = self.code;
                var $6268 = self.val;
                var self = $6268;
                if (self) {
                    var $6270 = (_idx$9 => _code$10 => {
                        var $6271 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $6271;
                    });
                    var $6269 = $6270;
                } else {
                    var $6272 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6274 = self.idx;
                                var $6275 = self.code;
                                var $6276 = self.err;
                                var $6277 = Parser$Reply$error$($6274, $6275, $6276);
                                var $6273 = $6277;
                                break;
                            case 'Parser.Reply.value':
                                var $6278 = self.idx;
                                var $6279 = self.code;
                                var $6280 = self.val;
                                var $6281 = Kind$Parser$file$(_file$1, _code$2, $6280, $6278, $6279);
                                var $6273 = $6281;
                                break;
                        };
                        return $6273;
                    });
                    var $6269 = $6272;
                };
                var $6269 = $6269($6266)($6267);
                var $6261 = $6269;
                break;
        };
        return $6261;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $6283 = self.head;
                var $6284 = self.tail;
                var $6285 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $6286 = "";
                        return $6286;
                    } else {
                        var $6287 = _sep$1;
                        return $6287;
                    };
                })(), List$cons$($6283, List$cons$(String$join$go$(_sep$1, $6284, Bool$false), List$nil))));
                var $6282 = $6285;
                break;
            case 'List.nil':
                var $6288 = "";
                var $6282 = $6288;
                break;
        };
        return $6282;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $6289 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $6289;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $6290 = String$join$("\u{a}", _res$3);
        return $6290;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6292 = self.value;
                var $6293 = _f$5($6292);
                var $6291 = $6293;
                break;
            case 'Maybe.none':
                var $6294 = _a$4;
                var $6291 = $6294;
                break;
        };
        return $6291;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6296 = Bool$true;
            var $6295 = $6296;
        } else {
            var $6297 = (self - 1n);
            var $6298 = Bool$false;
            var $6295 = $6298;
        };
        return $6295;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6300 = Nat$zero;
            var $6299 = $6300;
        } else {
            var $6301 = (self - 1n);
            var $6302 = Nat$succ$(Nat$succ$(Nat$double$($6301)));
            var $6299 = $6302;
        };
        return $6299;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $6304 = _str$3;
            var $6303 = $6304;
        } else {
            var $6305 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $6307 = String$cons$(_chr$2, String$pad_right$($6305, _chr$2, ""));
                var $6306 = $6307;
            } else {
                var $6308 = self.charCodeAt(0);
                var $6309 = self.slice(1);
                var $6310 = String$cons$($6308, String$pad_right$($6305, _chr$2, $6309));
                var $6306 = $6310;
            };
            var $6303 = $6306;
        };
        return $6303;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $6311 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $6311;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Kind$Code$color$(_col$1, _str$2) {
        var $6312 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $6312;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $6314 = self.head;
                var $6315 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $6317 = List$nil;
                    var $6316 = $6317;
                } else {
                    var $6318 = (self - 1n);
                    var $6319 = List$cons$($6314, List$take$($6318, $6315));
                    var $6316 = $6319;
                };
                var $6313 = $6316;
                break;
            case 'List.nil':
                var $6320 = List$nil;
                var $6313 = $6320;
                break;
        };
        return $6313;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $6322 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $6321 = $6322;
                } else {
                    var $6323 = self.charCodeAt(0);
                    var $6324 = self.slice(1);
                    var self = ($6323 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $6327 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $6326 = $6327;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6330 = self.value;
                                        var $6331 = Maybe$some$(Nat$pred$($6330));
                                        var $6329 = $6331;
                                        break;
                                    case 'Maybe.none':
                                        var $6332 = Maybe$some$(_spa$9);
                                        var $6329 = $6332;
                                        break;
                                };
                                var _lft$14 = $6329;
                            } else {
                                var $6333 = (self - 1n);
                                var $6334 = _lft$6;
                                var _lft$14 = $6334;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $6328 = Kind$Code$highlight$go$($6324, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $6326 = $6328;
                        };
                        var $6325 = $6326;
                    } else {
                        var _chr$12 = String$cons$($6323, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $6336 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $6336;
                        } else {
                            var $6337 = _chr$12;
                            var _chr$13 = $6337;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $6338 = List$take$(_spa$9, _res$8);
                            var _res$14 = $6338;
                        } else {
                            var $6339 = _res$8;
                            var _res$14 = $6339;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $6335 = Kind$Code$highlight$go$($6324, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $6325 = $6335;
                    };
                    var $6321 = $6325;
                };
                return $6321;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $6340 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $6340;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6342 = self.idx;
                var $6343 = self.err;
                var _err$7 = $6343;
                var _hig$8 = Kind$Code$highlight$(_code$2, $6342, Nat$succ$($6342));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $6344 = Either$left$(_str$9);
                var $6341 = $6344;
                break;
            case 'Parser.Reply.value':
                var $6345 = self.val;
                var $6346 = Either$right$($6345);
                var $6341 = $6346;
                break;
        };
        return $6341;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $6348 = self.head;
                var $6349 = self.tail;
                var $6350 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $6351 = _m$bind$6;
                    return $6351;
                }))(IO$get_file$($6348))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($6348, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $6353 = self.value;
                            var _defs$9 = $6353;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6355 = Kind$Synth$load$go$(_name$1, $6349, _defs$9);
                                    var $6354 = $6355;
                                    break;
                                case 'Maybe.some':
                                    var $6356 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $6357 = _m$pure$12;
                                        return $6357;
                                    }))(Maybe$some$(_defs$9));
                                    var $6354 = $6356;
                                    break;
                            };
                            var $6352 = $6354;
                            break;
                        case 'Either.left':
                            var $6358 = Kind$Synth$load$go$(_name$1, $6349, _defs$3);
                            var $6352 = $6358;
                            break;
                    };
                    return $6352;
                }));
                var $6347 = $6350;
                break;
            case 'List.nil':
                var $6359 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $6360 = _m$pure$5;
                    return $6360;
                }))(Maybe$none);
                var $6347 = $6359;
                break;
        };
        return $6347;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $6362 = self.head;
                var $6363 = self.tail;
                var _head$5 = (_last$2 + ($6362 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($6363, (_last$2 + ($6362 + "/")));
                var $6364 = List$cons$(_head$5, _tail$6);
                var $6361 = $6364;
                break;
            case 'List.nil':
                var $6365 = List$nil;
                var $6361 = $6365;
                break;
        };
        return $6361;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $6366 = _n$2;
                    return $6366;
                } else {
                    var $6367 = self.charCodeAt(0);
                    var $6368 = self.slice(1);
                    var $6369 = String$length$go$($6368, Nat$succ$(_n$2));
                    return $6369;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $6370 = String$length$go$(_xs$1, 0n);
        return $6370;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $6372 = List$cons$(_last$3, List$nil);
            var $6371 = $6372;
        } else {
            var $6373 = self.charCodeAt(0);
            var $6374 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $6376 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $6375 = $6376;
            } else {
                var _next$6 = String$cons$($6373, String$nil);
                var $6377 = String$split$go$($6374, _match$2, (_last$3 + _next$6));
                var $6375 = $6377;
            };
            var $6371 = $6375;
        };
        return $6371;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $6378 = String$split$go$(_xs$1, _match$2, "");
        return $6378;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $6379 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $6379;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $6380 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $6381 = _m$bind$3;
            return $6381;
        }))(Kind$Synth$load$cached$(List$cons$(_name$1, List$nil), _defs$2))((_cached_defs$3 => {
            var self = _cached_defs$3;
            switch (self._) {
                case 'Maybe.some':
                    var $6383 = self.value;
                    var $6384 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $6385 = _m$pure$6;
                        return $6385;
                    }))(Maybe$some$($6383));
                    var $6382 = $6384;
                    break;
                case 'Maybe.none':
                    var $6386 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
                    var $6382 = $6386;
                    break;
            };
            return $6382;
        }));
        return $6380;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $6387 = null;
        return $6387;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $6388 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $6388;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $6389 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $6389;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $6390 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $6390;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $6391 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $6391;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6393 = self.value;
                var $6394 = Maybe$some$(_f$4($6393));
                var $6392 = $6394;
                break;
            case 'Maybe.none':
                var $6395 = Maybe$none;
                var $6392 = $6395;
                break;
        };
        return $6392;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $6396 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $6396;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $6397 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $6397;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $6398 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $6398;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $6400 = self.value;
                var $6401 = $6400(Bits$e);
                var $6399 = $6401;
                break;
            case 'Maybe.none':
                var $6402 = Bits$e;
                var $6399 = $6402;
                break;
        };
        return $6399;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $6403 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $6403;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $6404 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $6404;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $6406 = self.head;
                var $6407 = self.tail;
                var self = $6406;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6409 = self.name;
                        var $6410 = self.term;
                        var $6411 = self.type;
                        var self = $6411;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6413 = self.value;
                                var $6414 = Kind$Check$result$(Maybe$some$(Maybe$some$($6413)), List$nil);
                                var self = $6414;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($6410, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6416 = self.value;
                                        var $6417 = self.errors;
                                        var self = $6416;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6419 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($6419)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6421 = self.value;
                                                        var $6422 = self.errors;
                                                        var $6423 = Kind$Check$result$($6421, List$concat$($6417, $6422));
                                                        var $6420 = $6423;
                                                        break;
                                                };
                                                var $6418 = $6420;
                                                break;
                                            case 'Maybe.none':
                                                var $6424 = Kind$Check$result$(Maybe$none, $6417);
                                                var $6418 = $6424;
                                                break;
                                        };
                                        var $6415 = $6418;
                                        break;
                                };
                                var self = $6415;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6425 = self.value;
                                var $6426 = self.errors;
                                var self = $6425;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6428 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($6407, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6430 = self.value;
                                                var $6431 = self.errors;
                                                var self = $6430;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6433 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($6409, $6410, $6428), $6433)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6435 = self.value;
                                                                var $6436 = self.errors;
                                                                var $6437 = Kind$Check$result$($6435, List$concat$($6431, $6436));
                                                                var $6434 = $6437;
                                                                break;
                                                        };
                                                        var $6432 = $6434;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6438 = Kind$Check$result$(Maybe$none, $6431);
                                                        var $6432 = $6438;
                                                        break;
                                                };
                                                var self = $6432;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6439 = self.value;
                                                var $6440 = self.errors;
                                                var $6441 = Kind$Check$result$($6439, List$concat$($6426, $6440));
                                                var $6429 = $6441;
                                                break;
                                        };
                                        var $6427 = $6429;
                                        break;
                                    case 'Maybe.none':
                                        var $6442 = Kind$Check$result$(Maybe$none, $6426);
                                        var $6427 = $6442;
                                        break;
                                };
                                var $6412 = $6427;
                                break;
                        };
                        var $6408 = $6412;
                        break;
                };
                var $6405 = $6408;
                break;
            case 'List.nil':
                var $6443 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $6405 = $6443;
                break;
        };
        return $6405;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $6445 = self.name;
                var $6446 = self.indx;
                var $6447 = Kind$Term$var$($6445, $6446);
                var $6444 = $6447;
                break;
            case 'Kind.Term.ref':
                var $6448 = self.name;
                var $6449 = Kind$Term$ref$($6448);
                var $6444 = $6449;
                break;
            case 'Kind.Term.all':
                var $6450 = self.eras;
                var $6451 = self.self;
                var $6452 = self.name;
                var $6453 = self.xtyp;
                var $6454 = self.body;
                var $6455 = Kind$Term$all$($6450, $6451, $6452, Kind$Term$normalize$($6453, _defs$2), (_s$8 => _x$9 => {
                    var $6456 = Kind$Term$normalize$($6454(_s$8)(_x$9), _defs$2);
                    return $6456;
                }));
                var $6444 = $6455;
                break;
            case 'Kind.Term.lam':
                var $6457 = self.name;
                var $6458 = self.body;
                var $6459 = Kind$Term$lam$($6457, (_x$5 => {
                    var $6460 = Kind$Term$normalize$($6458(_x$5), _defs$2);
                    return $6460;
                }));
                var $6444 = $6459;
                break;
            case 'Kind.Term.app':
                var $6461 = self.func;
                var $6462 = self.argm;
                var $6463 = Kind$Term$app$(Kind$Term$normalize$($6461, _defs$2), Kind$Term$normalize$($6462, _defs$2));
                var $6444 = $6463;
                break;
            case 'Kind.Term.let':
                var $6464 = self.name;
                var $6465 = self.expr;
                var $6466 = self.body;
                var $6467 = Kind$Term$let$($6464, Kind$Term$normalize$($6465, _defs$2), (_x$6 => {
                    var $6468 = Kind$Term$normalize$($6466(_x$6), _defs$2);
                    return $6468;
                }));
                var $6444 = $6467;
                break;
            case 'Kind.Term.def':
                var $6469 = self.name;
                var $6470 = self.expr;
                var $6471 = self.body;
                var $6472 = Kind$Term$def$($6469, Kind$Term$normalize$($6470, _defs$2), (_x$6 => {
                    var $6473 = Kind$Term$normalize$($6471(_x$6), _defs$2);
                    return $6473;
                }));
                var $6444 = $6472;
                break;
            case 'Kind.Term.ann':
                var $6474 = self.done;
                var $6475 = self.term;
                var $6476 = self.type;
                var $6477 = Kind$Term$ann$($6474, Kind$Term$normalize$($6475, _defs$2), Kind$Term$normalize$($6476, _defs$2));
                var $6444 = $6477;
                break;
            case 'Kind.Term.gol':
                var $6478 = self.name;
                var $6479 = self.dref;
                var $6480 = self.verb;
                var $6481 = Kind$Term$gol$($6478, $6479, $6480);
                var $6444 = $6481;
                break;
            case 'Kind.Term.hol':
                var $6482 = self.path;
                var $6483 = Kind$Term$hol$($6482);
                var $6444 = $6483;
                break;
            case 'Kind.Term.nat':
                var $6484 = self.natx;
                var $6485 = Kind$Term$nat$($6484);
                var $6444 = $6485;
                break;
            case 'Kind.Term.chr':
                var $6486 = self.chrx;
                var $6487 = Kind$Term$chr$($6486);
                var $6444 = $6487;
                break;
            case 'Kind.Term.str':
                var $6488 = self.strx;
                var $6489 = Kind$Term$str$($6488);
                var $6444 = $6489;
                break;
            case 'Kind.Term.ori':
                var $6490 = self.expr;
                var $6491 = Kind$Term$normalize$($6490, _defs$2);
                var $6444 = $6491;
                break;
            case 'Kind.Term.typ':
                var $6492 = Kind$Term$typ;
                var $6444 = $6492;
                break;
            case 'Kind.Term.cse':
                var $6493 = _term$1;
                var $6444 = $6493;
                break;
        };
        return $6444;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $6495 = self.head;
                var $6496 = self.tail;
                var self = $6495;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6498 = self.name;
                        var $6499 = self.type;
                        var $6500 = Kind$Term$all$(Bool$false, "", $6498, Maybe$default$($6499, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $6501 = Kind$Term$desugar_cse$motive$($6496, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $6501;
                        }));
                        var $6497 = $6500;
                        break;
                };
                var $6494 = $6497;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6503 = self.value;
                        var $6504 = $6503;
                        var $6502 = $6504;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6506 = self.value;
                                var $6507 = Kind$Term$normalize$($6506, Kind$Map$new);
                                var $6505 = $6507;
                                break;
                            case 'Maybe.none':
                                var $6508 = Kind$Term$hol$(Bits$e);
                                var $6505 = $6508;
                                break;
                        };
                        var $6502 = $6505;
                        break;
                };
                var $6494 = $6502;
                break;
        };
        return $6494;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6510 = self.tail;
                var $6511 = $6510;
                var $6509 = $6511;
                break;
            case 'List.nil':
                var $6512 = List$nil;
                var $6509 = $6512;
                break;
        };
        return $6509;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6513 = self.func;
                        var $6514 = self.argm;
                        var $6515 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $6513, List$cons$($6514, _args$3), _defs$4);
                        return $6515;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6516 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $6516;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6517 = self.body;
                        var $6518 = Kind$Term$SmartMotive$vals$(_expr$1, $6517(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $6518;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6519 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $6519;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);

    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6520 = self.self;
                        var $6521 = self.name;
                        var $6522 = self.body;
                        var $6523 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6522(Kind$Term$ref$($6520))(Kind$Term$ref$($6521)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6521, List$nil)))), _binds$3), _defs$4);
                        return $6523;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6524 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $6524;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $6526 = self.xtyp;
                var $6527 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6526, List$nil, _defs$3);
                var $6525 = $6527;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6528 = List$nil;
                var $6525 = $6528;
                break;
        };
        return $6525;
    };
    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $6530 = self.head;
                var $6531 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $6533 = self.head;
                        var $6534 = self.tail;
                        var $6535 = List$cons$(Pair$new$($6530, $6533), List$zip$($6531, $6534));
                        var $6532 = $6535;
                        break;
                    case 'List.nil':
                        var $6536 = List$nil;
                        var $6532 = $6536;
                        break;
                };
                var $6529 = $6532;
                break;
            case 'List.nil':
                var $6537 = List$nil;
                var $6529 = $6537;
                break;
        };
        return $6529;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6539 = self.indx;
                var self = ($6539 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $6539 <= 0n ? 0n : _depth$2 - $6539)))));
                    var $6541 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $6540 = $6541;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($6539)));
                    var $6542 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $6540 = $6542;
                };
                var $6538 = $6540;
                break;
            case 'Kind.Term.ref':
                var $6543 = self.name;
                var _name$7 = a1 => (a1 + (kind_name_to_bits($6543)));
                var $6544 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $6538 = $6544;
                break;
            case 'Kind.Term.all':
                var $6545 = self.eras;
                var $6546 = self.self;
                var $6547 = self.name;
                var $6548 = self.xtyp;
                var $6549 = self.body;
                var self = $6545;
                if (self) {
                    var $6551 = Bits$i;
                    var _eras$11 = $6551;
                } else {
                    var $6552 = Bits$o;
                    var _eras$11 = $6552;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($6546)));
                var _xtyp$13 = Kind$Term$serialize$go($6548)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize$go($6549(Kind$Term$var$($6546, _depth$2))(Kind$Term$var$($6547, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $6550 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $6538 = $6550;
                break;
            case 'Kind.Term.lam':
                var $6553 = self.name;
                var $6554 = self.body;
                var _body$8 = Kind$Term$serialize$go($6554(Kind$Term$var$($6553, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6555 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $6538 = $6555;
                break;
            case 'Kind.Term.app':
                var $6556 = self.func;
                var $6557 = self.argm;
                var _func$8 = Kind$Term$serialize$go($6556)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize$go($6557)(_depth$2)(_init$3)(_diff$4);
                var $6558 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $6538 = $6558;
                break;
            case 'Kind.Term.let':
                var $6559 = self.name;
                var $6560 = self.expr;
                var $6561 = self.body;
                var _expr$9 = Kind$Term$serialize$go($6560)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize$go($6561(Kind$Term$var$($6559, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6562 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $6538 = $6562;
                break;
            case 'Kind.Term.def':
                var $6563 = self.expr;
                var $6564 = self.body;
                var $6565 = Kind$Term$serialize$go$($6564($6563), _depth$2, _init$3, _diff$4, _x$5);
                var $6538 = $6565;
                break;
            case 'Kind.Term.ann':
                var $6566 = self.term;
                var $6567 = Kind$Term$serialize$go$($6566, _depth$2, _init$3, _diff$4, _x$5);
                var $6538 = $6567;
                break;
            case 'Kind.Term.gol':
                var $6568 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($6568)));
                var $6569 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $6538 = $6569;
                break;
            case 'Kind.Term.nat':
                var $6570 = self.natx;
                var $6571 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($6570), _depth$2, _init$3, _diff$4, _x$5);
                var $6538 = $6571;
                break;
            case 'Kind.Term.chr':
                var $6572 = self.chrx;
                var $6573 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($6572), _depth$2, _init$3, _diff$4, _x$5);
                var $6538 = $6573;
                break;
            case 'Kind.Term.str':
                var $6574 = self.strx;
                var $6575 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($6574), _depth$2, _init$3, _diff$4, _x$5);
                var $6538 = $6575;
                break;
            case 'Kind.Term.ori':
                var $6576 = self.expr;
                var $6577 = Kind$Term$serialize$go$($6576, _depth$2, _init$3, _diff$4, _x$5);
                var $6538 = $6577;
                break;
            case 'Kind.Term.typ':
                var $6578 = (((_x$5 + '1') + '1') + '0');
                var $6538 = $6578;
                break;
            case 'Kind.Term.hol':
                var $6579 = _x$5;
                var $6538 = $6579;
                break;
            case 'Kind.Term.cse':
                var $6580 = _diff$4(_x$5);
                var $6538 = $6580;
                break;
        };
        return $6538;
    };
    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);

    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {
        var self = _side$3;
        if (self) {
            var $6582 = Bits$o;
            var _diff$4 = $6582;
        } else {
            var $6583 = Bits$i;
            var _diff$4 = $6583;
        };
        var $6581 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);
        return $6581;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);
        var $6584 = (_bh$5 === _ah$4);
        return $6584;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $6586 = _to$3;
            var $6585 = $6586;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $6588 = self.name;
                    var $6589 = self.indx;
                    var $6590 = Kind$Term$var$($6588, $6589);
                    var $6587 = $6590;
                    break;
                case 'Kind.Term.ref':
                    var $6591 = self.name;
                    var $6592 = Kind$Term$ref$($6591);
                    var $6587 = $6592;
                    break;
                case 'Kind.Term.all':
                    var $6593 = self.eras;
                    var $6594 = self.self;
                    var $6595 = self.name;
                    var $6596 = self.xtyp;
                    var $6597 = self.body;
                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($6596, _from$2, _to$3, _lv$4);
                    var _body$11 = $6597(Kind$Term$ref$($6594))(Kind$Term$ref$($6595));
                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $6598 = Kind$Term$all$($6593, $6594, $6595, _xtyp$10, (_s$13 => _x$14 => {
                        var $6599 = _body$12;
                        return $6599;
                    }));
                    var $6587 = $6598;
                    break;
                case 'Kind.Term.lam':
                    var $6600 = self.name;
                    var $6601 = self.body;
                    var _body$7 = $6601(Kind$Term$ref$($6600));
                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6602 = Kind$Term$lam$($6600, (_x$9 => {
                        var $6603 = _body$8;
                        return $6603;
                    }));
                    var $6587 = $6602;
                    break;
                case 'Kind.Term.app':
                    var $6604 = self.func;
                    var $6605 = self.argm;
                    var _func$7 = Kind$Term$SmartMotive$replace$($6604, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$Term$SmartMotive$replace$($6605, _from$2, _to$3, _lv$4);
                    var $6606 = Kind$Term$app$(_func$7, _argm$8);
                    var $6587 = $6606;
                    break;
                case 'Kind.Term.let':
                    var $6607 = self.name;
                    var $6608 = self.expr;
                    var $6609 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6608, _from$2, _to$3, _lv$4);
                    var _body$9 = $6609(Kind$Term$ref$($6607));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6610 = Kind$Term$let$($6607, _expr$8, (_x$11 => {
                        var $6611 = _body$10;
                        return $6611;
                    }));
                    var $6587 = $6610;
                    break;
                case 'Kind.Term.def':
                    var $6612 = self.name;
                    var $6613 = self.expr;
                    var $6614 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6613, _from$2, _to$3, _lv$4);
                    var _body$9 = $6614(Kind$Term$ref$($6612));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6615 = Kind$Term$def$($6612, _expr$8, (_x$11 => {
                        var $6616 = _body$10;
                        return $6616;
                    }));
                    var $6587 = $6615;
                    break;
                case 'Kind.Term.ann':
                    var $6617 = self.done;
                    var $6618 = self.term;
                    var $6619 = self.type;
                    var _term$8 = Kind$Term$SmartMotive$replace$($6618, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$Term$SmartMotive$replace$($6619, _from$2, _to$3, _lv$4);
                    var $6620 = Kind$Term$ann$($6617, _term$8, _type$9);
                    var $6587 = $6620;
                    break;
                case 'Kind.Term.ori':
                    var $6621 = self.expr;
                    var $6622 = Kind$Term$SmartMotive$replace$($6621, _from$2, _to$3, _lv$4);
                    var $6587 = $6622;
                    break;
                case 'Kind.Term.typ':
                    var $6623 = Kind$Term$typ;
                    var $6587 = $6623;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $6624 = _term$1;
                    var $6587 = $6624;
                    break;
            };
            var $6585 = $6587;
        };
        return $6585;
    };
    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $6625 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $6627 = self.fst;
                    var $6628 = self.snd;
                    var $6629 = Kind$Term$SmartMotive$replace$(_moti$11, $6628, Kind$Term$ref$($6627), _size$5);
                    var $6626 = $6629;
                    break;
            };
            return $6626;
        }));
        return $6625;
    };
    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $6631 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $6630 = $6631;
                break;
            case 'Maybe.some':
                var $6632 = _done$9;
                var $6630 = $6632;
                break;
        };
        return $6630;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $6634 = self.self;
                var $6635 = self.name;
                var $6636 = self.body;
                var $6637 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($6635);
                    if (self) {
                        var $6638 = _name$1;
                        return $6638;
                    } else {
                        var $6639 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6635, List$nil))));
                        return $6639;
                    };
                })(), (_x$11 => {
                    var $6640 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $6636(Kind$Term$var$($6634, 0n))(Kind$Term$var$($6635, 0n)), _body$4, _defs$5);
                    return $6640;
                }));
                var $6633 = $6637;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6642 = self.head;
                        var $6643 = self.tail;
                        var self = $6642;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6645 = self.name;
                                var $6646 = Kind$Term$lam$($6645, (_x$13 => {
                                    var $6647 = Kind$Term$desugar_cse$argument$(_name$1, $6643, _type$3, _body$4, _defs$5);
                                    return $6647;
                                }));
                                var $6644 = $6646;
                                break;
                        };
                        var $6641 = $6644;
                        break;
                    case 'List.nil':
                        var $6648 = _body$4;
                        var $6641 = $6648;
                        break;
                };
                var $6633 = $6641;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6650 = self.head;
                        var $6651 = self.tail;
                        var self = $6650;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6653 = self.name;
                                var $6654 = Kind$Term$lam$($6653, (_x$12 => {
                                    var $6655 = Kind$Term$desugar_cse$argument$(_name$1, $6651, _type$3, _body$4, _defs$5);
                                    return $6655;
                                }));
                                var $6652 = $6654;
                                break;
                        };
                        var $6649 = $6652;
                        break;
                    case 'List.nil':
                        var $6656 = _body$4;
                        var $6649 = $6656;
                        break;
                };
                var $6633 = $6649;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6658 = self.head;
                        var $6659 = self.tail;
                        var self = $6658;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6661 = self.name;
                                var $6662 = Kind$Term$lam$($6661, (_x$11 => {
                                    var $6663 = Kind$Term$desugar_cse$argument$(_name$1, $6659, _type$3, _body$4, _defs$5);
                                    return $6663;
                                }));
                                var $6660 = $6662;
                                break;
                        };
                        var $6657 = $6660;
                        break;
                    case 'List.nil':
                        var $6664 = _body$4;
                        var $6657 = $6664;
                        break;
                };
                var $6633 = $6657;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6666 = self.head;
                        var $6667 = self.tail;
                        var self = $6666;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6669 = self.name;
                                var $6670 = Kind$Term$lam$($6669, (_x$14 => {
                                    var $6671 = Kind$Term$desugar_cse$argument$(_name$1, $6667, _type$3, _body$4, _defs$5);
                                    return $6671;
                                }));
                                var $6668 = $6670;
                                break;
                        };
                        var $6665 = $6668;
                        break;
                    case 'List.nil':
                        var $6672 = _body$4;
                        var $6665 = $6672;
                        break;
                };
                var $6633 = $6665;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6674 = self.head;
                        var $6675 = self.tail;
                        var self = $6674;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6677 = self.name;
                                var $6678 = Kind$Term$lam$($6677, (_x$17 => {
                                    var $6679 = Kind$Term$desugar_cse$argument$(_name$1, $6675, _type$3, _body$4, _defs$5);
                                    return $6679;
                                }));
                                var $6676 = $6678;
                                break;
                        };
                        var $6673 = $6676;
                        break;
                    case 'List.nil':
                        var $6680 = _body$4;
                        var $6673 = $6680;
                        break;
                };
                var $6633 = $6673;
                break;
        };
        return $6633;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $6682 = self.value;
                var $6683 = Maybe$some$($6682);
                var $6681 = $6683;
                break;
            case 'Maybe.none':
                var $6684 = _b$3;
                var $6681 = $6684;
                break;
        };
        return $6681;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6685 = self.self;
                        var $6686 = self.name;
                        var $6687 = self.xtyp;
                        var $6688 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($6686, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($6686 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $6687, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $6688(Kind$Term$var$($6685, 0n))(Kind$Term$var$($6686, 0n));
                        var $6689 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $6689;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $6692 = _expr$1;
                            var $6693 = _wyth$3;
                            let _expr$11 = $6692;
                            let _defn$10;
                            while ($6693._ === 'List.cons') {
                                _defn$10 = $6693.head;
                                var $6692 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6694 = self.term;
                                            var $6695 = $6694;
                                            return $6695;
                                    };
                                })());
                                _expr$11 = $6692;
                                $6693 = $6693.tail;
                            }
                            return _expr$11;
                        })();
                        var $6690 = _expr$10;
                        return $6690;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $6698 = _expr$1;
                            var $6699 = _wyth$3;
                            let _expr$10 = $6698;
                            let _defn$9;
                            while ($6699._ === 'List.cons') {
                                _defn$9 = $6699.head;
                                var $6698 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6700 = self.term;
                                            var $6701 = $6700;
                                            return $6701;
                                    };
                                })());
                                _expr$10 = $6698;
                                $6699 = $6699.tail;
                            }
                            return _expr$10;
                        })();
                        var $6696 = _expr$9;
                        return $6696;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $6704 = _expr$1;
                            var $6705 = _wyth$3;
                            let _expr$9 = $6704;
                            let _defn$8;
                            while ($6705._ === 'List.cons') {
                                _defn$8 = $6705.head;
                                var $6704 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6706 = self.term;
                                            var $6707 = $6706;
                                            return $6707;
                                    };
                                })());
                                _expr$9 = $6704;
                                $6705 = $6705.tail;
                            }
                            return _expr$9;
                        })();
                        var $6702 = _expr$8;
                        return $6702;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $6710 = _expr$1;
                            var $6711 = _wyth$3;
                            let _expr$12 = $6710;
                            let _defn$11;
                            while ($6711._ === 'List.cons') {
                                _defn$11 = $6711.head;
                                var $6710 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6712 = self.term;
                                            var $6713 = $6712;
                                            return $6713;
                                    };
                                })());
                                _expr$12 = $6710;
                                $6711 = $6711.tail;
                            }
                            return _expr$12;
                        })();
                        var $6708 = _expr$11;
                        return $6708;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $6716 = _expr$1;
                            var $6717 = _wyth$3;
                            let _expr$15 = $6716;
                            let _defn$14;
                            while ($6717._ === 'List.cons') {
                                _defn$14 = $6717.head;
                                var $6716 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6718 = self.term;
                                            var $6719 = $6718;
                                            return $6719;
                                    };
                                })());
                                _expr$15 = $6716;
                                $6717 = $6717.tail;
                            }
                            return _expr$15;
                        })();
                        var $6714 = _expr$14;
                        return $6714;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $6721 = self.self;
                var $6722 = self.name;
                var $6723 = self.xtyp;
                var $6724 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $6723, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $6724(Kind$Term$var$($6721, 0n))(Kind$Term$var$($6722, 0n));
                var $6725 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $6720 = $6725;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6726 = Maybe$none;
                var $6720 = $6726;
                break;
        };
        return $6720;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $6727 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $6727;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = (bitsmap_get(_bits$1, _set$2));
        switch (self._) {
            case 'Maybe.none':
                var $6729 = Bool$false;
                var $6728 = $6729;
                break;
            case 'Maybe.some':
                var $6730 = Bool$true;
                var $6728 = $6730;
                break;
        };
        return $6728;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $6731 = BitsSet$has$(_bits$1, _set$2);
        return $6731;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $6732 = self.name;
                        var $6733 = Maybe$some$(Pair$new$($6732, _arity$2));
                        return $6733;
                    case 'Kind.Term.ref':
                        var $6734 = self.name;
                        var $6735 = Maybe$some$(Pair$new$($6734, _arity$2));
                        return $6735;
                    case 'Kind.Term.app':
                        var $6736 = self.func;
                        var $6737 = Kind$Term$equal$extra_holes$funari$($6736, Nat$succ$(_arity$2));
                        return $6737;
                    case 'Kind.Term.ori':
                        var $6738 = self.expr;
                        var $6739 = Kind$Term$equal$extra_holes$funari$($6738, _arity$2);
                        return $6739;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6740 = Maybe$none;
                        return $6740;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $6742 = self.xtyp;
                var $6743 = self.body;
                var $6744 = (Kind$Term$has_holes$($6742) || Kind$Term$has_holes$($6743(Kind$Term$typ)(Kind$Term$typ)));
                var $6741 = $6744;
                break;
            case 'Kind.Term.lam':
                var $6745 = self.body;
                var $6746 = Kind$Term$has_holes$($6745(Kind$Term$typ));
                var $6741 = $6746;
                break;
            case 'Kind.Term.app':
                var $6747 = self.func;
                var $6748 = self.argm;
                var $6749 = (Kind$Term$has_holes$($6747) || Kind$Term$has_holes$($6748));
                var $6741 = $6749;
                break;
            case 'Kind.Term.let':
                var $6750 = self.expr;
                var $6751 = self.body;
                var $6752 = (Kind$Term$has_holes$($6750) || Kind$Term$has_holes$($6751(Kind$Term$typ)));
                var $6741 = $6752;
                break;
            case 'Kind.Term.def':
                var $6753 = self.expr;
                var $6754 = self.body;
                var $6755 = (Kind$Term$has_holes$($6753) || Kind$Term$has_holes$($6754(Kind$Term$typ)));
                var $6741 = $6755;
                break;
            case 'Kind.Term.ann':
                var $6756 = self.term;
                var $6757 = self.type;
                var $6758 = (Kind$Term$has_holes$($6756) || Kind$Term$has_holes$($6757));
                var $6741 = $6758;
                break;
            case 'Kind.Term.ori':
                var $6759 = self.expr;
                var $6760 = Kind$Term$has_holes$($6759);
                var $6741 = $6760;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $6761 = Bool$false;
                var $6741 = $6761;
                break;
            case 'Kind.Term.hol':
                var $6762 = Bool$true;
                var $6741 = $6762;
                break;
        };
        return $6741;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $6765 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $6764 = $6765;
                } else {
                    var $6766 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $6764 = $6766;
                };
                var $6763 = $6764;
                break;
            case 'Kind.Term.hol':
                var $6767 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6763 = $6767;
                break;
        };
        return $6763;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $6769 = self.func;
                var $6770 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6772 = self.func;
                        var $6773 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($6769, $6772);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6775 = self.value;
                                var $6776 = self.errors;
                                var self = $6775;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6778 = Kind$Check$result$(Maybe$none, $6776);
                                        var $6777 = $6778;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($6770, $6773);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6780 = self.value;
                                                var $6781 = self.errors;
                                                var $6782 = Kind$Check$result$($6780, List$concat$($6776, $6781));
                                                var $6779 = $6782;
                                                break;
                                        };
                                        var $6777 = $6779;
                                        break;
                                };
                                var $6774 = $6777;
                                break;
                        };
                        var $6771 = $6774;
                        break;
                    case 'Kind.Term.hol':
                        var $6783 = self.path;
                        var self = Kind$Term$equal$hole$($6783, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6785 = self.value;
                                var $6786 = self.errors;
                                var self = $6785;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6788 = Kind$Check$result$(Maybe$none, $6786);
                                        var $6787 = $6788;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6790 = self.value;
                                                var $6791 = self.errors;
                                                var $6792 = Kind$Check$result$($6790, List$concat$($6786, $6791));
                                                var $6789 = $6792;
                                                break;
                                        };
                                        var $6787 = $6789;
                                        break;
                                };
                                var $6784 = $6787;
                                break;
                        };
                        var $6771 = $6784;
                        break;
                    case 'Kind.Term.ori':
                        var $6793 = self.expr;
                        var $6794 = Kind$Term$equal$extra_holes$filler$(_a$1, $6793);
                        var $6771 = $6794;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6795 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6771 = $6795;
                        break;
                };
                var $6768 = $6771;
                break;
            case 'Kind.Term.hol':
                var $6796 = self.path;
                var self = Kind$Term$equal$hole$($6796, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6798 = self.value;
                        var $6799 = self.errors;
                        var self = $6798;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6801 = Kind$Check$result$(Maybe$none, $6799);
                                var $6800 = $6801;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6803 = self.value;
                                        var $6804 = self.errors;
                                        var $6805 = Kind$Check$result$($6803, List$concat$($6799, $6804));
                                        var $6802 = $6805;
                                        break;
                                };
                                var $6800 = $6802;
                                break;
                        };
                        var $6797 = $6800;
                        break;
                };
                var $6768 = $6797;
                break;
            case 'Kind.Term.ori':
                var $6806 = self.expr;
                var $6807 = Kind$Term$equal$extra_holes$filler$($6806, _b$2);
                var $6768 = $6807;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6809 = self.path;
                        var self = Kind$Term$equal$hole$($6809, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6811 = self.value;
                                var $6812 = self.errors;
                                var self = $6811;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6814 = Kind$Check$result$(Maybe$none, $6812);
                                        var $6813 = $6814;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6816 = self.value;
                                                var $6817 = self.errors;
                                                var $6818 = Kind$Check$result$($6816, List$concat$($6812, $6817));
                                                var $6815 = $6818;
                                                break;
                                        };
                                        var $6813 = $6815;
                                        break;
                                };
                                var $6810 = $6813;
                                break;
                        };
                        var $6808 = $6810;
                        break;
                    case 'Kind.Term.ori':
                        var $6819 = self.expr;
                        var $6820 = Kind$Term$equal$extra_holes$filler$(_a$1, $6819);
                        var $6808 = $6820;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6821 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6808 = $6821;
                        break;
                };
                var $6768 = $6808;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6823 = self.path;
                        var self = Kind$Term$equal$hole$($6823, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6825 = self.value;
                                var $6826 = self.errors;
                                var self = $6825;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6828 = Kind$Check$result$(Maybe$none, $6826);
                                        var $6827 = $6828;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6830 = self.value;
                                                var $6831 = self.errors;
                                                var $6832 = Kind$Check$result$($6830, List$concat$($6826, $6831));
                                                var $6829 = $6832;
                                                break;
                                        };
                                        var $6827 = $6829;
                                        break;
                                };
                                var $6824 = $6827;
                                break;
                        };
                        var $6822 = $6824;
                        break;
                    case 'Kind.Term.ori':
                        var $6833 = self.expr;
                        var $6834 = Kind$Term$equal$extra_holes$filler$(_a$1, $6833);
                        var $6822 = $6834;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6835 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6822 = $6835;
                        break;
                };
                var $6768 = $6822;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6837 = self.path;
                        var self = Kind$Term$equal$hole$($6837, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6839 = self.value;
                                var $6840 = self.errors;
                                var self = $6839;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6842 = Kind$Check$result$(Maybe$none, $6840);
                                        var $6841 = $6842;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6844 = self.value;
                                                var $6845 = self.errors;
                                                var $6846 = Kind$Check$result$($6844, List$concat$($6840, $6845));
                                                var $6843 = $6846;
                                                break;
                                        };
                                        var $6841 = $6843;
                                        break;
                                };
                                var $6838 = $6841;
                                break;
                        };
                        var $6836 = $6838;
                        break;
                    case 'Kind.Term.ori':
                        var $6847 = self.expr;
                        var $6848 = Kind$Term$equal$extra_holes$filler$(_a$1, $6847);
                        var $6836 = $6848;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6849 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6836 = $6849;
                        break;
                };
                var $6768 = $6836;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6851 = self.path;
                        var self = Kind$Term$equal$hole$($6851, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6853 = self.value;
                                var $6854 = self.errors;
                                var self = $6853;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6856 = Kind$Check$result$(Maybe$none, $6854);
                                        var $6855 = $6856;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6858 = self.value;
                                                var $6859 = self.errors;
                                                var $6860 = Kind$Check$result$($6858, List$concat$($6854, $6859));
                                                var $6857 = $6860;
                                                break;
                                        };
                                        var $6855 = $6857;
                                        break;
                                };
                                var $6852 = $6855;
                                break;
                        };
                        var $6850 = $6852;
                        break;
                    case 'Kind.Term.ori':
                        var $6861 = self.expr;
                        var $6862 = Kind$Term$equal$extra_holes$filler$(_a$1, $6861);
                        var $6850 = $6862;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6863 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6850 = $6863;
                        break;
                };
                var $6768 = $6850;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6865 = self.path;
                        var self = Kind$Term$equal$hole$($6865, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6867 = self.value;
                                var $6868 = self.errors;
                                var self = $6867;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6870 = Kind$Check$result$(Maybe$none, $6868);
                                        var $6869 = $6870;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6872 = self.value;
                                                var $6873 = self.errors;
                                                var $6874 = Kind$Check$result$($6872, List$concat$($6868, $6873));
                                                var $6871 = $6874;
                                                break;
                                        };
                                        var $6869 = $6871;
                                        break;
                                };
                                var $6866 = $6869;
                                break;
                        };
                        var $6864 = $6866;
                        break;
                    case 'Kind.Term.ori':
                        var $6875 = self.expr;
                        var $6876 = Kind$Term$equal$extra_holes$filler$(_a$1, $6875);
                        var $6864 = $6876;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6877 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6864 = $6877;
                        break;
                };
                var $6768 = $6864;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6879 = self.path;
                        var self = Kind$Term$equal$hole$($6879, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6881 = self.value;
                                var $6882 = self.errors;
                                var self = $6881;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6884 = Kind$Check$result$(Maybe$none, $6882);
                                        var $6883 = $6884;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6886 = self.value;
                                                var $6887 = self.errors;
                                                var $6888 = Kind$Check$result$($6886, List$concat$($6882, $6887));
                                                var $6885 = $6888;
                                                break;
                                        };
                                        var $6883 = $6885;
                                        break;
                                };
                                var $6880 = $6883;
                                break;
                        };
                        var $6878 = $6880;
                        break;
                    case 'Kind.Term.ori':
                        var $6889 = self.expr;
                        var $6890 = Kind$Term$equal$extra_holes$filler$(_a$1, $6889);
                        var $6878 = $6890;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6891 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6878 = $6891;
                        break;
                };
                var $6768 = $6878;
                break;
        };
        return $6768;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $6893 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $6895 = self.value;
                        var self = $6893;
                        switch (self._) {
                            case 'Pair.new':
                                var $6897 = self.fst;
                                var $6898 = self.snd;
                                var self = $6895;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $6900 = self.fst;
                                        var $6901 = self.snd;
                                        var _same_fun$9 = ($6897 === $6900);
                                        var _same_ari$10 = ($6898 === $6901);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $6903 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $6902 = $6903;
                                        } else {
                                            var $6904 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $6902 = $6904;
                                        };
                                        var $6899 = $6902;
                                        break;
                                };
                                var $6896 = $6899;
                                break;
                        };
                        var $6894 = $6896;
                        break;
                    case 'Maybe.none':
                        var $6905 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6894 = $6905;
                        break;
                };
                var $6892 = $6894;
                break;
            case 'Maybe.none':
                var $6906 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $6892 = $6906;
                break;
        };
        return $6892;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $6907 = (bitsmap_set(_bits$1, Unit$new, _set$2, 'set'));
        return $6907;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $6908 = BitsSet$set$(_bits$1, _set$2);
        return $6908;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6910 = _b$2;
            var $6909 = $6910;
        } else {
            var $6911 = (!_b$2);
            var $6909 = $6911;
        };
        return $6909;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$go$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6913 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6912 = $6913;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6915 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6914 = $6915;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6918 = self.value;
                            var $6919 = self.errors;
                            var self = $6918;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6921 = Kind$Check$result$(Maybe$none, $6919);
                                    var $6920 = $6921;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6923 = self.value;
                                            var $6924 = self.errors;
                                            var $6925 = Kind$Check$result$($6923, List$concat$($6919, $6924));
                                            var $6922 = $6925;
                                            break;
                                    };
                                    var $6920 = $6922;
                                    break;
                            };
                            var $6917 = $6920;
                            break;
                    };
                    var $6916 = $6917;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $6927 = self.eras;
                            var $6928 = self.self;
                            var $6929 = self.name;
                            var $6930 = self.xtyp;
                            var $6931 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $6933 = self.eras;
                                    var $6934 = self.self;
                                    var $6935 = self.name;
                                    var $6936 = self.xtyp;
                                    var $6937 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $6931(Kind$Term$var$($6928, _lv$4))(Kind$Term$var$($6929, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $6937(Kind$Term$var$($6934, _lv$4))(Kind$Term$var$($6935, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($6928 === $6934);
                                    var _eq_eras$27 = Bool$eql$($6927, $6933);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$go$($6930, $6936, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6940 = self.value;
                                                var $6941 = self.errors;
                                                var self = $6940;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6943 = self.value;
                                                        var self = Kind$Term$equal$go$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6945 = self.value;
                                                                var $6946 = self.errors;
                                                                var self = $6945;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $6948 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($6943 && $6948)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $6950 = self.value;
                                                                                var $6951 = self.errors;
                                                                                var $6952 = Kind$Check$result$($6950, List$concat$($6946, $6951));
                                                                                var $6949 = $6952;
                                                                                break;
                                                                        };
                                                                        var $6947 = $6949;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $6953 = Kind$Check$result$(Maybe$none, $6946);
                                                                        var $6947 = $6953;
                                                                        break;
                                                                };
                                                                var self = $6947;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6954 = self.value;
                                                                var $6955 = self.errors;
                                                                var $6956 = Kind$Check$result$($6954, List$concat$($6941, $6955));
                                                                var $6944 = $6956;
                                                                break;
                                                        };
                                                        var $6942 = $6944;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6957 = Kind$Check$result$(Maybe$none, $6941);
                                                        var $6942 = $6957;
                                                        break;
                                                };
                                                var $6939 = $6942;
                                                break;
                                        };
                                        var $6938 = $6939;
                                    } else {
                                        var $6958 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6938 = $6958;
                                    };
                                    var $6932 = $6938;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6959 = self.path;
                                    var $6960 = Kind$Term$equal$hole$($6959, _a$1);
                                    var $6932 = $6960;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6961 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6932 = $6961;
                                    break;
                            };
                            var $6926 = $6932;
                            break;
                        case 'Kind.Term.lam':
                            var $6962 = self.name;
                            var $6963 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $6965 = self.name;
                                    var $6966 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $6963(Kind$Term$var$($6962, _lv$4));
                                    var _b1_body$19 = $6966(Kind$Term$var$($6965, _lv$4));
                                    var self = Kind$Term$equal$go$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6968 = self.value;
                                            var $6969 = self.errors;
                                            var self = $6968;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6971 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($6971), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6973 = self.value;
                                                            var $6974 = self.errors;
                                                            var $6975 = Kind$Check$result$($6973, List$concat$($6969, $6974));
                                                            var $6972 = $6975;
                                                            break;
                                                    };
                                                    var $6970 = $6972;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6976 = Kind$Check$result$(Maybe$none, $6969);
                                                    var $6970 = $6976;
                                                    break;
                                            };
                                            var $6967 = $6970;
                                            break;
                                    };
                                    var $6964 = $6967;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6977 = self.path;
                                    var $6978 = Kind$Term$equal$hole$($6977, _a$1);
                                    var $6964 = $6978;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6979 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6964 = $6979;
                                    break;
                            };
                            var $6926 = $6964;
                            break;
                        case 'Kind.Term.app':
                            var $6980 = self.func;
                            var $6981 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $6983 = self.func;
                                    var $6984 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$go$($6980, $6983, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6986 = self.value;
                                            var $6987 = self.errors;
                                            var self = $6986;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6989 = self.value;
                                                    var self = Kind$Term$equal$go$($6981, $6984, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6991 = self.value;
                                                            var $6992 = self.errors;
                                                            var self = $6991;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6994 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6989 && $6994)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6996 = self.value;
                                                                            var $6997 = self.errors;
                                                                            var $6998 = Kind$Check$result$($6996, List$concat$($6992, $6997));
                                                                            var $6995 = $6998;
                                                                            break;
                                                                    };
                                                                    var $6993 = $6995;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6999 = Kind$Check$result$(Maybe$none, $6992);
                                                                    var $6993 = $6999;
                                                                    break;
                                                            };
                                                            var self = $6993;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7000 = self.value;
                                                            var $7001 = self.errors;
                                                            var $7002 = Kind$Check$result$($7000, List$concat$($6987, $7001));
                                                            var $6990 = $7002;
                                                            break;
                                                    };
                                                    var $6988 = $6990;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7003 = Kind$Check$result$(Maybe$none, $6987);
                                                    var $6988 = $7003;
                                                    break;
                                            };
                                            var $6985 = $6988;
                                            break;
                                    };
                                    var $6982 = $6985;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7004 = self.path;
                                    var $7005 = Kind$Term$equal$hole$($7004, _a$1);
                                    var $6982 = $7005;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7006 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6982 = $7006;
                                    break;
                            };
                            var $6926 = $6982;
                            break;
                        case 'Kind.Term.let':
                            var $7007 = self.name;
                            var $7008 = self.expr;
                            var $7009 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $7011 = self.name;
                                    var $7012 = self.expr;
                                    var $7013 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $7009(Kind$Term$var$($7007, _lv$4));
                                    var _b1_body$21 = $7013(Kind$Term$var$($7011, _lv$4));
                                    var self = Kind$Term$equal$go$($7008, $7012, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7015 = self.value;
                                            var $7016 = self.errors;
                                            var self = $7015;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7018 = self.value;
                                                    var self = Kind$Term$equal$go$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7020 = self.value;
                                                            var $7021 = self.errors;
                                                            var self = $7020;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7023 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($7018 && $7023)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7025 = self.value;
                                                                            var $7026 = self.errors;
                                                                            var $7027 = Kind$Check$result$($7025, List$concat$($7021, $7026));
                                                                            var $7024 = $7027;
                                                                            break;
                                                                    };
                                                                    var $7022 = $7024;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7028 = Kind$Check$result$(Maybe$none, $7021);
                                                                    var $7022 = $7028;
                                                                    break;
                                                            };
                                                            var self = $7022;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7029 = self.value;
                                                            var $7030 = self.errors;
                                                            var $7031 = Kind$Check$result$($7029, List$concat$($7016, $7030));
                                                            var $7019 = $7031;
                                                            break;
                                                    };
                                                    var $7017 = $7019;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7032 = Kind$Check$result$(Maybe$none, $7016);
                                                    var $7017 = $7032;
                                                    break;
                                            };
                                            var $7014 = $7017;
                                            break;
                                    };
                                    var $7010 = $7014;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7033 = self.path;
                                    var $7034 = Kind$Term$equal$hole$($7033, _a$1);
                                    var $7010 = $7034;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7035 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7010 = $7035;
                                    break;
                            };
                            var $6926 = $7010;
                            break;
                        case 'Kind.Term.hol':
                            var $7036 = self.path;
                            var $7037 = Kind$Term$equal$hole$($7036, _b$2);
                            var $6926 = $7037;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7039 = self.path;
                                    var $7040 = Kind$Term$equal$hole$($7039, _a$1);
                                    var $7038 = $7040;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7041 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7038 = $7041;
                                    break;
                            };
                            var $6926 = $7038;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7043 = self.path;
                                    var $7044 = Kind$Term$equal$hole$($7043, _a$1);
                                    var $7042 = $7044;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7045 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7042 = $7045;
                                    break;
                            };
                            var $6926 = $7042;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7047 = self.path;
                                    var $7048 = Kind$Term$equal$hole$($7047, _a$1);
                                    var $7046 = $7048;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7049 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7046 = $7049;
                                    break;
                            };
                            var $6926 = $7046;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7051 = self.path;
                                    var $7052 = Kind$Term$equal$hole$($7051, _a$1);
                                    var $7050 = $7052;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7053 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7050 = $7053;
                                    break;
                            };
                            var $6926 = $7050;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7055 = self.path;
                                    var $7056 = Kind$Term$equal$hole$($7055, _a$1);
                                    var $7054 = $7056;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7057 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7054 = $7057;
                                    break;
                            };
                            var $6926 = $7054;
                            break;
                    };
                    var $6916 = $6926;
                };
                var $6914 = $6916;
            };
            var $6912 = $6914;
        };
        return $6912;
    };
    const Kind$Term$equal$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$go$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $7058 = BitsSet$new;
        return $7058;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7060 = self.name;
                var $7061 = self.indx;
                var self = List$at_last$($7061, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $7063 = self.value;
                        var $7064 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $7063;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7065 = self.snd;
                                    var $7066 = $7065;
                                    return $7066;
                            };
                        })()), List$nil);
                        var $7062 = $7064;
                        break;
                    case 'Maybe.none':
                        var $7067 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7060), List$nil));
                        var $7062 = $7067;
                        break;
                };
                var self = $7062;
                break;
            case 'Kind.Term.ref':
                var $7068 = self.name;
                var self = Kind$Map$get$($7068, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $7070 = self.value;
                        var self = $7070;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7072 = self.name;
                                var $7073 = self.term;
                                var $7074 = self.type;
                                var $7075 = self.stat;
                                var _ref_name$18 = $7072;
                                var _ref_type$19 = $7074;
                                var _ref_term$20 = $7073;
                                var _ref_stat$21 = $7075;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $7077 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $7076 = $7077;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7078 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7076 = $7078;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $7079 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $7076 = $7079;
                                        break;
                                };
                                var $7071 = $7076;
                                break;
                        };
                        var $7069 = $7071;
                        break;
                    case 'Maybe.none':
                        var $7080 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7068), List$nil));
                        var $7069 = $7080;
                        break;
                };
                var self = $7069;
                break;
            case 'Kind.Term.all':
                var $7081 = self.self;
                var $7082 = self.name;
                var $7083 = self.xtyp;
                var $7084 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($7081, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($7082, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7082, $7083), List$cons$(Pair$new$($7081, _term$1), _ctx$4));
                var self = Kind$Term$check$($7083, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7086 = self.value;
                        var $7087 = self.errors;
                        var self = $7086;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7089 = Kind$Check$result$(Maybe$none, $7087);
                                var $7088 = $7089;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($7084(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7091 = self.value;
                                        var $7092 = self.errors;
                                        var self = $7091;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7094 = Kind$Check$result$(Maybe$none, $7092);
                                                var $7093 = $7094;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7096 = self.value;
                                                        var $7097 = self.errors;
                                                        var $7098 = Kind$Check$result$($7096, List$concat$($7092, $7097));
                                                        var $7095 = $7098;
                                                        break;
                                                };
                                                var $7093 = $7095;
                                                break;
                                        };
                                        var self = $7093;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7099 = self.value;
                                        var $7100 = self.errors;
                                        var $7101 = Kind$Check$result$($7099, List$concat$($7087, $7100));
                                        var $7090 = $7101;
                                        break;
                                };
                                var $7088 = $7090;
                                break;
                        };
                        var $7085 = $7088;
                        break;
                };
                var self = $7085;
                break;
            case 'Kind.Term.lam':
                var $7102 = self.name;
                var $7103 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7105 = self.value;
                        var _typv$10 = Kind$Term$reduce$($7105, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $7107 = self.xtyp;
                                var $7108 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($7102, _ctx_size$16);
                                var _body_typ$19 = $7108(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7102, $7107), _ctx$4);
                                var self = Kind$Term$check$($7103(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7110 = self.value;
                                        var $7111 = self.errors;
                                        var self = $7110;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7113 = Kind$Check$result$(Maybe$none, $7111);
                                                var $7112 = $7113;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($7105), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7115 = self.value;
                                                        var $7116 = self.errors;
                                                        var $7117 = Kind$Check$result$($7115, List$concat$($7111, $7116));
                                                        var $7114 = $7117;
                                                        break;
                                                };
                                                var $7112 = $7114;
                                                break;
                                        };
                                        var $7109 = $7112;
                                        break;
                                };
                                var $7106 = $7109;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("function");
                                var _detected$14 = Either$right$($7105);
                                var $7118 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7106 = $7118;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("function");
                                var _detected$13 = Either$right$($7105);
                                var $7119 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7106 = $7119;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("function");
                                var _detected$12 = Either$right$($7105);
                                var $7120 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7106 = $7120;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("function");
                                var _detected$15 = Either$right$($7105);
                                var $7121 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7106 = $7121;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("function");
                                var _detected$18 = Either$right$($7105);
                                var $7122 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7106 = $7122;
                                break;
                        };
                        var $7104 = $7106;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7123 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7104 = $7123;
                        break;
                };
                var self = $7104;
                break;
            case 'Kind.Term.app':
                var $7124 = self.func;
                var $7125 = self.argm;
                var self = Kind$Term$check$($7124, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7127 = self.value;
                        var $7128 = self.errors;
                        var self = $7127;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7130 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($7130, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $7132 = self.xtyp;
                                        var $7133 = self.body;
                                        var self = Kind$Term$check$($7125, Maybe$some$($7132), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7135 = self.value;
                                                var $7136 = self.errors;
                                                var self = $7135;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7138 = Kind$Check$result$(Maybe$none, $7136);
                                                        var $7137 = $7138;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($7133($7124)($7125)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7140 = self.value;
                                                                var $7141 = self.errors;
                                                                var $7142 = Kind$Check$result$($7140, List$concat$($7136, $7141));
                                                                var $7139 = $7142;
                                                                break;
                                                        };
                                                        var $7137 = $7139;
                                                        break;
                                                };
                                                var $7134 = $7137;
                                                break;
                                        };
                                        var self = $7134;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("function");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var self = $7124;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7144 = self.orig;
                                                var $7145 = Maybe$some$($7144);
                                                var _orig$17 = $7145;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7146 = _orig$6;
                                                var _orig$17 = $7146;
                                                break;
                                        };
                                        var $7143 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7143;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("function");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var self = $7124;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7148 = self.orig;
                                                var $7149 = Maybe$some$($7148);
                                                var _orig$16 = $7149;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7150 = _orig$6;
                                                var _orig$16 = $7150;
                                                break;
                                        };
                                        var $7147 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7147;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("function");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var self = $7124;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7152 = self.orig;
                                                var $7153 = Maybe$some$($7152);
                                                var _orig$15 = $7153;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7154 = _orig$6;
                                                var _orig$15 = $7154;
                                                break;
                                        };
                                        var $7151 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7151;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("function");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var self = $7124;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7156 = self.orig;
                                                var $7157 = Maybe$some$($7156);
                                                var _orig$18 = $7157;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7158 = _orig$6;
                                                var _orig$18 = $7158;
                                                break;
                                        };
                                        var $7155 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7155;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("function");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var self = $7124;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7160 = self.orig;
                                                var $7161 = Maybe$some$($7160);
                                                var _orig$21 = $7161;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7162 = _orig$6;
                                                var _orig$21 = $7162;
                                                break;
                                        };
                                        var $7159 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7159;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7163 = self.value;
                                        var $7164 = self.errors;
                                        var $7165 = Kind$Check$result$($7163, List$concat$($7128, $7164));
                                        var $7131 = $7165;
                                        break;
                                };
                                var $7129 = $7131;
                                break;
                            case 'Maybe.none':
                                var $7166 = Kind$Check$result$(Maybe$none, $7128);
                                var $7129 = $7166;
                                break;
                        };
                        var $7126 = $7129;
                        break;
                };
                var self = $7126;
                break;
            case 'Kind.Term.let':
                var $7167 = self.name;
                var $7168 = self.expr;
                var $7169 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7168, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7171 = self.value;
                        var $7172 = self.errors;
                        var self = $7171;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7174 = self.value;
                                var _body_val$14 = $7169(Kind$Term$var$($7167, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7167, $7174), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7176 = self.value;
                                        var $7177 = self.errors;
                                        var self = $7176;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7179 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7179), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7181 = self.value;
                                                        var $7182 = self.errors;
                                                        var $7183 = Kind$Check$result$($7181, List$concat$($7177, $7182));
                                                        var $7180 = $7183;
                                                        break;
                                                };
                                                var $7178 = $7180;
                                                break;
                                            case 'Maybe.none':
                                                var $7184 = Kind$Check$result$(Maybe$none, $7177);
                                                var $7178 = $7184;
                                                break;
                                        };
                                        var self = $7178;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7185 = self.value;
                                        var $7186 = self.errors;
                                        var $7187 = Kind$Check$result$($7185, List$concat$($7172, $7186));
                                        var $7175 = $7187;
                                        break;
                                };
                                var $7173 = $7175;
                                break;
                            case 'Maybe.none':
                                var $7188 = Kind$Check$result$(Maybe$none, $7172);
                                var $7173 = $7188;
                                break;
                        };
                        var $7170 = $7173;
                        break;
                };
                var self = $7170;
                break;
            case 'Kind.Term.def':
                var $7189 = self.name;
                var $7190 = self.expr;
                var $7191 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7190, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7193 = self.value;
                        var $7194 = self.errors;
                        var self = $7193;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7196 = self.value;
                                var _body_val$14 = $7191(Kind$Term$ann$(Bool$true, $7190, $7196));
                                var _body_ctx$15 = List$cons$(Pair$new$($7189, $7196), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7198 = self.value;
                                        var $7199 = self.errors;
                                        var self = $7198;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7201 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7201), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7203 = self.value;
                                                        var $7204 = self.errors;
                                                        var $7205 = Kind$Check$result$($7203, List$concat$($7199, $7204));
                                                        var $7202 = $7205;
                                                        break;
                                                };
                                                var $7200 = $7202;
                                                break;
                                            case 'Maybe.none':
                                                var $7206 = Kind$Check$result$(Maybe$none, $7199);
                                                var $7200 = $7206;
                                                break;
                                        };
                                        var self = $7200;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7207 = self.value;
                                        var $7208 = self.errors;
                                        var $7209 = Kind$Check$result$($7207, List$concat$($7194, $7208));
                                        var $7197 = $7209;
                                        break;
                                };
                                var $7195 = $7197;
                                break;
                            case 'Maybe.none':
                                var $7210 = Kind$Check$result$(Maybe$none, $7194);
                                var $7195 = $7210;
                                break;
                        };
                        var $7192 = $7195;
                        break;
                };
                var self = $7192;
                break;
            case 'Kind.Term.ann':
                var $7211 = self.done;
                var $7212 = self.term;
                var $7213 = self.type;
                var self = $7211;
                if (self) {
                    var $7215 = Kind$Check$result$(Maybe$some$($7213), List$nil);
                    var $7214 = $7215;
                } else {
                    var self = Kind$Term$check$($7212, Maybe$some$($7213), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $7217 = self.value;
                            var $7218 = self.errors;
                            var self = $7217;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7220 = Kind$Check$result$(Maybe$none, $7218);
                                    var $7219 = $7220;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($7213, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7222 = self.value;
                                            var $7223 = self.errors;
                                            var self = $7222;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7225 = Kind$Check$result$(Maybe$none, $7223);
                                                    var $7224 = $7225;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($7213), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7227 = self.value;
                                                            var $7228 = self.errors;
                                                            var $7229 = Kind$Check$result$($7227, List$concat$($7223, $7228));
                                                            var $7226 = $7229;
                                                            break;
                                                    };
                                                    var $7224 = $7226;
                                                    break;
                                            };
                                            var self = $7224;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7230 = self.value;
                                            var $7231 = self.errors;
                                            var $7232 = Kind$Check$result$($7230, List$concat$($7218, $7231));
                                            var $7221 = $7232;
                                            break;
                                    };
                                    var $7219 = $7221;
                                    break;
                            };
                            var $7216 = $7219;
                            break;
                    };
                    var $7214 = $7216;
                };
                var self = $7214;
                break;
            case 'Kind.Term.gol':
                var $7233 = self.name;
                var $7234 = self.dref;
                var $7235 = self.verb;
                var $7236 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($7233, $7234, $7235, _type$2, _ctx$4), List$nil));
                var self = $7236;
                break;
            case 'Kind.Term.cse':
                var $7237 = self.expr;
                var $7238 = self.name;
                var $7239 = self.with;
                var $7240 = self.cses;
                var $7241 = self.moti;
                var _expr$13 = $7237;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7243 = self.value;
                        var $7244 = self.errors;
                        var self = $7243;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7246 = self.value;
                                var self = Kind$Term$check$infer_with_types$($7239, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7248 = self.value;
                                        var $7249 = self.errors;
                                        var self = $7248;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7251 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($7237, $7238, $7251, $7240, $7241, $7246, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7253 = self.value;
                                                        var $7254 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $7253), List$nil));
                                                        var self = $7254;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $7255 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $7255;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7256 = self.value;
                                                        var $7257 = self.errors;
                                                        var $7258 = Kind$Check$result$($7256, List$concat$($7249, $7257));
                                                        var $7252 = $7258;
                                                        break;
                                                };
                                                var $7250 = $7252;
                                                break;
                                            case 'Maybe.none':
                                                var $7259 = Kind$Check$result$(Maybe$none, $7249);
                                                var $7250 = $7259;
                                                break;
                                        };
                                        var self = $7250;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7260 = self.value;
                                        var $7261 = self.errors;
                                        var $7262 = Kind$Check$result$($7260, List$concat$($7244, $7261));
                                        var $7247 = $7262;
                                        break;
                                };
                                var $7245 = $7247;
                                break;
                            case 'Maybe.none':
                                var $7263 = Kind$Check$result$(Maybe$none, $7244);
                                var $7245 = $7263;
                                break;
                        };
                        var $7242 = $7245;
                        break;
                };
                var self = $7242;
                break;
            case 'Kind.Term.ori':
                var $7264 = self.orig;
                var $7265 = self.expr;
                var $7266 = Kind$Term$check$($7265, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7264));
                var self = $7266;
                break;
            case 'Kind.Term.typ':
                var $7267 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $7267;
                break;
            case 'Kind.Term.hol':
                var $7268 = Kind$Check$result$(_type$2, List$nil);
                var self = $7268;
                break;
            case 'Kind.Term.nat':
                var $7269 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $7269;
                break;
            case 'Kind.Term.chr':
                var $7270 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $7270;
                break;
            case 'Kind.Term.str':
                var $7271 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $7271;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $7272 = self.value;
                var $7273 = self.errors;
                var self = $7272;
                switch (self._) {
                    case 'Maybe.some':
                        var $7275 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7277 = self.value;
                                var self = Kind$Term$equal$go$($7277, $7275, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7279 = self.value;
                                        var $7280 = self.errors;
                                        var self = $7279;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7282 = self.value;
                                                var self = $7282;
                                                if (self) {
                                                    var $7284 = Kind$Check$result$(Maybe$some$($7277), List$nil);
                                                    var self = $7284;
                                                } else {
                                                    var $7285 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($7277), Either$right$($7275), _ctx$4), List$nil));
                                                    var self = $7285;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7286 = self.value;
                                                        var $7287 = self.errors;
                                                        var $7288 = Kind$Check$result$($7286, List$concat$($7280, $7287));
                                                        var $7283 = $7288;
                                                        break;
                                                };
                                                var $7281 = $7283;
                                                break;
                                            case 'Maybe.none':
                                                var $7289 = Kind$Check$result$(Maybe$none, $7280);
                                                var $7281 = $7289;
                                                break;
                                        };
                                        var $7278 = $7281;
                                        break;
                                };
                                var self = $7278;
                                break;
                            case 'Maybe.none':
                                var $7290 = Kind$Check$result$(Maybe$some$($7275), List$nil);
                                var self = $7290;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7291 = self.value;
                                var $7292 = self.errors;
                                var $7293 = Kind$Check$result$($7291, List$concat$($7273, $7292));
                                var $7276 = $7293;
                                break;
                        };
                        var $7274 = $7276;
                        break;
                    case 'Maybe.none':
                        var $7294 = Kind$Check$result$(Maybe$none, $7273);
                        var $7274 = $7294;
                        break;
                };
                var $7059 = $7274;
                break;
        };
        return $7059;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $7295 = _x$1;
        return $7295;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $7297 = Bool$true;
                var $7296 = $7297;
                break;
            case 'List.cons':
                var $7298 = Bool$false;
                var $7296 = $7298;
                break;
        };
        return $7296;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function IO$set_file$(_name$1, _content$2) {
        var $7299 = IO$ask$("set_file", (_name$1 + ("=" + _content$2)), (_ok$3 => {
            var $7300 = IO$end$(Unit$new);
            return $7300;
        }));
        return $7299;
    };
    const IO$set_file = x0 => x1 => IO$set_file$(x0, x1);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $7302 = _name$2;
                        var $7301 = $7302;
                    } else {
                        var $7303 = (self - 1n);
                        var $7304 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $7301 = $7304;
                    };
                    return $7301;
                } else {
                    var $7305 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $7307 = self.head;
                            var $7308 = self.tail;
                            var self = (_name$2 === $7307);
                            if (self) {
                                var $7310 = Nat$succ$(_brui$3);
                                var _brui$8 = $7310;
                            } else {
                                var $7311 = _brui$3;
                                var _brui$8 = $7311;
                            };
                            var $7309 = Kind$Core$var_name$($7305, _name$2, _brui$8, $7308);
                            var $7306 = $7309;
                            break;
                        case 'List.nil':
                            var $7312 = "unbound";
                            var $7306 = $7312;
                            break;
                    };
                    return $7306;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $7313 = _name$1;
        return $7313;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7315 = self.slice(0, -1);
                var $7316 = (2n * Bits$to_nat$($7315));
                var $7314 = $7316;
                break;
            case 'i':
                var $7317 = self.slice(0, -1);
                var $7318 = Nat$succ$((2n * Bits$to_nat$($7317)));
                var $7314 = $7318;
                break;
            case 'e':
                var $7319 = 0n;
                var $7314 = $7319;
                break;
        };
        return $7314;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $7321 = u16_to_word(self);
                var $7322 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($7321)));
                var $7320 = $7322;
                break;
        };
        return $7320;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $7324 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $7323 = $7324;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $7326 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $7325 = $7326;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $7328 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $7327 = $7328;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $7330 = String$cons$(_chr$1, String$nil);
                        var $7329 = $7330;
                    } else {
                        var $7331 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $7329 = $7331;
                    };
                    var $7327 = $7329;
                };
                var $7325 = $7327;
            };
            var $7323 = $7325;
        };
        return $7323;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $7332 = String$reverse$(_result$2);
                    return $7332;
                } else {
                    var $7333 = self.charCodeAt(0);
                    var $7334 = self.slice(1);
                    var $7335 = Kind$Code$escape$go$($7334, (String$reverse$(Kind$Code$escape$char$($7333)) + _result$2));
                    return $7335;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $7336 = Kind$Code$escape$go$(_str$1, "");
        return $7336;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$go$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7338 = self.name;
                var $7339 = self.indx;
                var $7340 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $7339 <= 0n ? 0n : _indx$2 - $7339)), $7338, 0n, _vars$3);
                var $7337 = $7340;
                break;
            case 'Kind.Term.ref':
                var $7341 = self.name;
                var $7342 = Kind$Name$show$($7341);
                var $7337 = $7342;
                break;
            case 'Kind.Term.all':
                var $7343 = self.eras;
                var $7344 = self.self;
                var $7345 = self.name;
                var $7346 = self.xtyp;
                var $7347 = self.body;
                var _eras$9 = $7343;
                var self = _eras$9;
                if (self) {
                    var $7349 = "%";
                    var _init$10 = $7349;
                } else {
                    var $7350 = "@";
                    var _init$10 = $7350;
                };
                var _self$11 = Kind$Name$show$($7344);
                var _name$12 = Kind$Name$show$($7345);
                var _xtyp$13 = Kind$Core$show$go$($7346, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$go$($7347(Kind$Term$var$($7344, _indx$2))(Kind$Term$var$($7345, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($7345, List$cons$($7344, _vars$3)));
                var $7348 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $7337 = $7348;
                break;
            case 'Kind.Term.lam':
                var $7351 = self.name;
                var $7352 = self.body;
                var _name$6 = Kind$Name$show$($7351);
                var _body$7 = Kind$Core$show$go$($7352(Kind$Term$var$($7351, _indx$2)), Nat$succ$(_indx$2), List$cons$($7351, _vars$3));
                var $7353 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $7337 = $7353;
                break;
            case 'Kind.Term.app':
                var $7354 = self.func;
                var $7355 = self.argm;
                var _func$6 = Kind$Core$show$go$($7354, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$go$($7355, _indx$2, _vars$3);
                var $7356 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $7337 = $7356;
                break;
            case 'Kind.Term.let':
                var $7357 = self.name;
                var $7358 = self.expr;
                var $7359 = self.body;
                var _name$7 = Kind$Name$show$($7357);
                var _expr$8 = Kind$Core$show$go$($7358, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7359(Kind$Term$var$($7357, _indx$2)), Nat$succ$(_indx$2), List$cons$($7357, _vars$3));
                var $7360 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7337 = $7360;
                break;
            case 'Kind.Term.def':
                var $7361 = self.name;
                var $7362 = self.expr;
                var $7363 = self.body;
                var _name$7 = Kind$Name$show$($7361);
                var _expr$8 = Kind$Core$show$go$($7362, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7363(Kind$Term$var$($7361, _indx$2)), Nat$succ$(_indx$2), List$cons$($7361, _vars$3));
                var $7364 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7337 = $7364;
                break;
            case 'Kind.Term.ann':
                var $7365 = self.term;
                var $7366 = self.type;
                var _term$7 = Kind$Core$show$go$($7365, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$go$($7366, _indx$2, _vars$3);
                var $7367 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $7337 = $7367;
                break;
            case 'Kind.Term.nat':
                var $7368 = self.natx;
                var $7369 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($7368), List$nil)));
                var $7337 = $7369;
                break;
            case 'Kind.Term.chr':
                var $7370 = self.chrx;
                var $7371 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7370), List$cons$("\'", List$nil))));
                var $7337 = $7371;
                break;
            case 'Kind.Term.str':
                var $7372 = self.strx;
                var $7373 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7372), List$cons$("\"", List$nil))));
                var $7337 = $7373;
                break;
            case 'Kind.Term.ori':
                var $7374 = self.expr;
                var $7375 = Kind$Core$show$go$($7374, _indx$2, _vars$3);
                var $7337 = $7375;
                break;
            case 'Kind.Term.typ':
                var $7376 = "*";
                var $7337 = $7376;
                break;
            case 'Kind.Term.gol':
                var $7377 = "<GOL>";
                var $7337 = $7377;
                break;
            case 'Kind.Term.hol':
                var $7378 = "<HOL>";
                var $7337 = $7378;
                break;
            case 'Kind.Term.cse':
                var $7379 = "<CSE>";
                var $7337 = $7379;
                break;
        };
        return $7337;
    };
    const Kind$Core$show$go = x0 => x1 => x2 => Kind$Core$show$go$(x0, x1, x2);

    function Kind$Core$show$(_term$1) {
        var $7380 = Kind$Core$show$go$(_term$1, 0n, List$nil);
        return $7380;
    };
    const Kind$Core$show = x0 => Kind$Core$show$(x0);

    function Bool$show$(_b$1) {
        var self = _b$1;
        if (self) {
            var $7382 = "Bool.true";
            var $7381 = $7382;
        } else {
            var $7383 = "Bool.false";
            var $7381 = $7383;
        };
        return $7381;
    };
    const Bool$show = x0 => Bool$show$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $7385 = self.eras;
                var $7386 = self.self;
                var $7387 = self.name;
                var $7388 = self.xtyp;
                var $7389 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7391 = self.slice(0, -1);
                        var $7392 = Kind$Term$all$($7385, $7386, $7387, Kind$Term$patch_at$($7391, $7388, _fn$3), $7389);
                        var $7390 = $7392;
                        break;
                    case 'i':
                        var $7393 = self.slice(0, -1);
                        var $7394 = Kind$Term$all$($7385, $7386, $7387, $7388, (_s$10 => _x$11 => {
                            var $7395 = Kind$Term$patch_at$($7393, $7389(_s$10)(_x$11), _fn$3);
                            return $7395;
                        }));
                        var $7390 = $7394;
                        break;
                    case 'e':
                        var $7396 = _fn$3(_term$2);
                        var $7390 = $7396;
                        break;
                };
                var $7384 = $7390;
                break;
            case 'Kind.Term.lam':
                var $7397 = self.name;
                var $7398 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7400 = _fn$3(_term$2);
                        var $7399 = $7400;
                        break;
                    case 'o':
                    case 'i':
                        var $7401 = Kind$Term$lam$($7397, (_x$7 => {
                            var $7402 = Kind$Term$patch_at$(Bits$tail$(_path$1), $7398(_x$7), _fn$3);
                            return $7402;
                        }));
                        var $7399 = $7401;
                        break;
                };
                var $7384 = $7399;
                break;
            case 'Kind.Term.app':
                var $7403 = self.func;
                var $7404 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7406 = self.slice(0, -1);
                        var $7407 = Kind$Term$app$(Kind$Term$patch_at$($7406, $7403, _fn$3), $7404);
                        var $7405 = $7407;
                        break;
                    case 'i':
                        var $7408 = self.slice(0, -1);
                        var $7409 = Kind$Term$app$($7403, Kind$Term$patch_at$($7408, $7404, _fn$3));
                        var $7405 = $7409;
                        break;
                    case 'e':
                        var $7410 = _fn$3(_term$2);
                        var $7405 = $7410;
                        break;
                };
                var $7384 = $7405;
                break;
            case 'Kind.Term.let':
                var $7411 = self.name;
                var $7412 = self.expr;
                var $7413 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7415 = self.slice(0, -1);
                        var $7416 = Kind$Term$let$($7411, Kind$Term$patch_at$($7415, $7412, _fn$3), $7413);
                        var $7414 = $7416;
                        break;
                    case 'i':
                        var $7417 = self.slice(0, -1);
                        var $7418 = Kind$Term$let$($7411, $7412, (_x$8 => {
                            var $7419 = Kind$Term$patch_at$($7417, $7413(_x$8), _fn$3);
                            return $7419;
                        }));
                        var $7414 = $7418;
                        break;
                    case 'e':
                        var $7420 = _fn$3(_term$2);
                        var $7414 = $7420;
                        break;
                };
                var $7384 = $7414;
                break;
            case 'Kind.Term.def':
                var $7421 = self.name;
                var $7422 = self.expr;
                var $7423 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7425 = self.slice(0, -1);
                        var $7426 = Kind$Term$def$($7421, Kind$Term$patch_at$($7425, $7422, _fn$3), $7423);
                        var $7424 = $7426;
                        break;
                    case 'i':
                        var $7427 = self.slice(0, -1);
                        var $7428 = Kind$Term$def$($7421, $7422, (_x$8 => {
                            var $7429 = Kind$Term$patch_at$($7427, $7423(_x$8), _fn$3);
                            return $7429;
                        }));
                        var $7424 = $7428;
                        break;
                    case 'e':
                        var $7430 = _fn$3(_term$2);
                        var $7424 = $7430;
                        break;
                };
                var $7384 = $7424;
                break;
            case 'Kind.Term.ann':
                var $7431 = self.done;
                var $7432 = self.term;
                var $7433 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7435 = self.slice(0, -1);
                        var $7436 = Kind$Term$ann$($7431, Kind$Term$patch_at$($7435, $7432, _fn$3), $7433);
                        var $7434 = $7436;
                        break;
                    case 'i':
                        var $7437 = self.slice(0, -1);
                        var $7438 = Kind$Term$ann$($7431, $7432, Kind$Term$patch_at$($7437, $7433, _fn$3));
                        var $7434 = $7438;
                        break;
                    case 'e':
                        var $7439 = _fn$3(_term$2);
                        var $7434 = $7439;
                        break;
                };
                var $7384 = $7434;
                break;
            case 'Kind.Term.ori':
                var $7440 = self.orig;
                var $7441 = self.expr;
                var $7442 = Kind$Term$ori$($7440, Kind$Term$patch_at$(_path$1, $7441, _fn$3));
                var $7384 = $7442;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7444 = _fn$3(_term$2);
                        var $7443 = $7444;
                        break;
                    case 'o':
                    case 'i':
                        var $7445 = _term$2;
                        var $7443 = $7445;
                        break;
                };
                var $7384 = $7443;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7447 = _fn$3(_term$2);
                        var $7446 = $7447;
                        break;
                    case 'o':
                    case 'i':
                        var $7448 = _term$2;
                        var $7446 = $7448;
                        break;
                };
                var $7384 = $7446;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7450 = _fn$3(_term$2);
                        var $7449 = $7450;
                        break;
                    case 'o':
                    case 'i':
                        var $7451 = _term$2;
                        var $7449 = $7451;
                        break;
                };
                var $7384 = $7449;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7453 = _fn$3(_term$2);
                        var $7452 = $7453;
                        break;
                    case 'o':
                    case 'i':
                        var $7454 = _term$2;
                        var $7452 = $7454;
                        break;
                };
                var $7384 = $7452;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7456 = _fn$3(_term$2);
                        var $7455 = $7456;
                        break;
                    case 'o':
                    case 'i':
                        var $7457 = _term$2;
                        var $7455 = $7457;
                        break;
                };
                var $7384 = $7455;
                break;
        };
        return $7384;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $7459 = self.head;
                var $7460 = self.tail;
                var self = $7459;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $7462 = self.name;
                        var $7463 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $7464 = _m$bind$15;
                            return $7464;
                        }))(Kind$Synth$one$($7462, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7466 = self.value;
                                    var $7467 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7466, $7460, Bool$true);
                                    var $7465 = $7467;
                                    break;
                                case 'Maybe.none':
                                    var $7468 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7460, _fixd$11);
                                    var $7465 = $7468;
                                    break;
                            };
                            return $7465;
                        }));
                        var $7461 = $7463;
                        break;
                    case 'Kind.Error.patch':
                        var $7469 = self.path;
                        var $7470 = self.term;
                        var self = $7469;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $7472 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($7472, _term$5, (_x$17 => {
                                    var $7474 = $7470;
                                    return $7474;
                                }));
                                var $7473 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $7460, Bool$true);
                                var $7471 = $7473;
                                break;
                            case 'i':
                                var $7475 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($7475, _type$6, (_x$17 => {
                                    var $7477 = $7470;
                                    return $7477;
                                }));
                                var $7476 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $7460, Bool$true);
                                var $7471 = $7476;
                                break;
                            case 'e':
                                var $7478 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $7479 = _m$pure$17;
                                    return $7479;
                                }))(Maybe$none);
                                var $7471 = $7478;
                                break;
                        };
                        var $7461 = $7471;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $7480 = self.name;
                        var $7481 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $7482 = _m$bind$16;
                            return $7482;
                        }))(Kind$Synth$one$($7480, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7484 = self.value;
                                    var $7485 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7484, $7460, Bool$true);
                                    var $7483 = $7485;
                                    break;
                                case 'Maybe.none':
                                    var $7486 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7460, _fixd$11);
                                    var $7483 = $7486;
                                    break;
                            };
                            return $7483;
                        }));
                        var $7461 = $7481;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $7487 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7460, _fixd$11);
                        var $7461 = $7487;
                        break;
                };
                var $7458 = $7461;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $7490 = (_x$12 + '1');
                        return $7490;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $7491 = (_x$13 + '0');
                        return $7491;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $7489 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $7492 = _m$pure$16;
                        return $7492;
                    }))(Maybe$some$(_defs$14));
                    var $7488 = $7489;
                } else {
                    var $7493 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $7494 = _m$pure$13;
                        return $7494;
                    }))(Maybe$none);
                    var $7488 = $7493;
                };
                var $7458 = $7488;
                break;
        };
        return $7458;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $7495 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $7495;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $7497 = self.value;
                var self = $7497;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7499 = self.file;
                        var $7500 = self.code;
                        var $7501 = self.orig;
                        var $7502 = self.name;
                        var $7503 = self.term;
                        var $7504 = self.type;
                        var $7505 = self.isct;
                        var $7506 = self.arit;
                        var $7507 = self.stat;
                        var _file$13 = $7499;
                        var _code$14 = $7500;
                        var _orig$15 = $7501;
                        var _name$16 = $7502;
                        var _term$17 = $7503;
                        var _type$18 = $7504;
                        var _isct$19 = $7505;
                        var _arit$20 = $7506;
                        var _stat$21 = $7507;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7510 = self.value;
                                        var $7511 = self.errors;
                                        var self = $7510;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7513 = Kind$Check$result$(Maybe$none, $7511);
                                                var $7512 = $7513;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7515 = self.value;
                                                        var $7516 = self.errors;
                                                        var self = $7515;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $7518 = Kind$Check$result$(Maybe$none, $7516);
                                                                var $7517 = $7518;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $7520 = self.value;
                                                                        var $7521 = self.errors;
                                                                        var $7522 = Kind$Check$result$($7520, List$concat$($7516, $7521));
                                                                        var $7519 = $7522;
                                                                        break;
                                                                };
                                                                var $7517 = $7519;
                                                                break;
                                                        };
                                                        var self = $7517;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7523 = self.value;
                                                        var $7524 = self.errors;
                                                        var $7525 = Kind$Check$result$($7523, List$concat$($7511, $7524));
                                                        var $7514 = $7525;
                                                        break;
                                                };
                                                var $7512 = $7514;
                                                break;
                                        };
                                        var _checked$23 = $7512;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7526 = self.errors;
                                        var self = List$is_empty$($7526);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $7528 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $7529 = _m$bind$27;
                                                return $7529;
                                            }))(IO$get_file_mtime$(_file$13))((_time$27 => {
                                                var $7530 = IO$monad$((_m$bind$28 => _m$pure$29 => {
                                                    var $7531 = _m$bind$28;
                                                    return $7531;
                                                }))(IO$set_file$((".cache/" + (_name$16 + ".term")), Kind$Core$show$(_term$17)))((_$28 => {
                                                    var $7532 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                        var $7533 = _m$bind$29;
                                                        return $7533;
                                                    }))(IO$set_file$((".cache/" + (_name$16 + ".type")), Kind$Core$show$(_type$18)))((_$29 => {
                                                        var $7534 = IO$monad$((_m$bind$30 => _m$pure$31 => {
                                                            var $7535 = _m$bind$30;
                                                            return $7535;
                                                        }))(IO$set_file$((".cache/" + (_name$16 + ".isct")), Bool$show$(_isct$19)))((_$30 => {
                                                            var $7536 = IO$monad$((_m$bind$31 => _m$pure$32 => {
                                                                var $7537 = _m$bind$31;
                                                                return $7537;
                                                            }))(IO$set_file$((".cache/" + (_name$16 + ".arit")), Nat$show$(_arit$20)))((_$31 => {
                                                                var $7538 = IO$monad$((_m$bind$32 => _m$pure$33 => {
                                                                    var $7539 = _m$bind$32;
                                                                    return $7539;
                                                                }))(IO$set_file$((".cache/" + (_name$16 + ".time")), _time$27))((_$32 => {
                                                                    var $7540 = IO$monad$((_m$bind$33 => _m$pure$34 => {
                                                                        var $7541 = _m$bind$33;
                                                                        return $7541;
                                                                    }))(IO$set_file$((".cache/" + (_name$16 + ".file")), _file$13))((_$33 => {
                                                                        var $7542 = IO$monad$((_m$bind$34 => _m$pure$35 => {
                                                                            var $7543 = _m$pure$35;
                                                                            return $7543;
                                                                        }))(Maybe$some$(_defs$26));
                                                                        return $7542;
                                                                    }));
                                                                    return $7540;
                                                                }));
                                                                return $7538;
                                                            }));
                                                            return $7536;
                                                        }));
                                                        return $7534;
                                                    }));
                                                    return $7532;
                                                }));
                                                return $7530;
                                            }));
                                            var $7527 = $7528;
                                        } else {
                                            var $7544 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $7545 = _m$bind$26;
                                                return $7545;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $7526, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7547 = self.value;
                                                        var $7548 = Kind$Synth$one$(_name$16, $7547);
                                                        var $7546 = $7548;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($7526);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $7549 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $7550 = _m$pure$30;
                                                            return $7550;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $7546 = $7549;
                                                        break;
                                                };
                                                return $7546;
                                            }));
                                            var $7527 = $7544;
                                        };
                                        var $7509 = $7527;
                                        break;
                                };
                                var $7508 = $7509;
                                break;
                            case 'Kind.Status.wait':
                            case 'Kind.Status.done':
                                var $7551 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $7552 = _m$pure$23;
                                    return $7552;
                                }))(Maybe$some$(_defs$2));
                                var $7508 = $7551;
                                break;
                            case 'Kind.Status.fail':
                                var $7553 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $7554 = _m$pure$24;
                                    return $7554;
                                }))(Maybe$some$(_defs$2));
                                var $7508 = $7553;
                                break;
                        };
                        var $7498 = $7508;
                        break;
                };
                var $7496 = $7498;
                break;
            case 'Maybe.none':
                var $7555 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7556 = _m$bind$3;
                    return $7556;
                }))(IO$get_time)((_time_a$3 => {
                    var $7557 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7558 = _m$bind$4;
                        return $7558;
                    }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$4 => {
                        var self = _loaded$4;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7560 = self.value;
                                var $7561 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7562 = _m$bind$6;
                                    return $7562;
                                }))(IO$get_time)((_time_b$6 => {
                                    var $7563 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $7564 = _m$bind$7;
                                        return $7564;
                                    }))(Kind$Synth$one$(_name$1, $7560))((_result$7 => {
                                        var $7565 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $7566 = _m$bind$8;
                                            return $7566;
                                        }))(IO$get_time)((_time_c$8 => {
                                            var $7567 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $7568 = _m$pure$10;
                                                return $7568;
                                            }))(_result$7);
                                            return $7567;
                                        }));
                                        return $7565;
                                    }));
                                    return $7563;
                                }));
                                var $7559 = $7561;
                                break;
                            case 'Maybe.none':
                                var $7569 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                    var $7570 = _m$pure$6;
                                    return $7570;
                                }))(Maybe$none);
                                var $7559 = $7569;
                                break;
                        };
                        return $7559;
                    }));
                    return $7557;
                }));
                var $7496 = $7555;
                break;
        };
        return $7496;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7572 = self.head;
                var $7573 = self.tail;
                var self = $7572;
                switch (self._) {
                    case 'Pair.new':
                        var $7575 = self.fst;
                        var $7576 = self.snd;
                        var $7577 = (bitsmap_set($7575, $7576, BitsMap$from_list$($7573), 'set'));
                        var $7574 = $7577;
                        break;
                };
                var $7571 = $7574;
                break;
            case 'List.nil':
                var $7578 = BitsMap$new;
                var $7571 = $7578;
                break;
        };
        return $7571;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $7580 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $7580;
        }));
        var $7579 = BitsMap$from_list$(_kvs$2);
        return $7579;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7582 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($7582)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($7582, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7585 = self.value;
                            var self = $7585;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7587 = self.term;
                                    var $7588 = Kind$Term$inline$reduce$($7587, _defs$2);
                                    var $7586 = $7588;
                                    break;
                            };
                            var $7584 = $7586;
                            break;
                        case 'Maybe.none':
                            var $7589 = Kind$Term$ref$($7582);
                            var $7584 = $7589;
                            break;
                    };
                    var $7583 = $7584;
                } else {
                    var $7590 = _term$1;
                    var $7583 = $7590;
                };
                var $7581 = $7583;
                break;
            case 'Kind.Term.app':
                var $7591 = self.func;
                var $7592 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($7591, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $7594 = self.body;
                        var $7595 = Kind$Term$inline$reduce$($7594($7592), _defs$2);
                        var $7593 = $7595;
                        break;
                    case 'Kind.Term.let':
                        var $7596 = self.name;
                        var $7597 = self.expr;
                        var $7598 = self.body;
                        var $7599 = Kind$Term$let$($7596, $7597, (_x$9 => {
                            var $7600 = Kind$Term$inline$reduce$(Kind$Term$app$($7598(_x$9), $7592), _defs$2);
                            return $7600;
                        }));
                        var $7593 = $7599;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7601 = _term$1;
                        var $7593 = $7601;
                        break;
                };
                var $7581 = $7593;
                break;
            case 'Kind.Term.ori':
                var $7602 = self.expr;
                var $7603 = Kind$Term$inline$reduce$($7602, _defs$2);
                var $7581 = $7603;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7604 = _term$1;
                var $7581 = $7604;
                break;
        };
        return $7581;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $7606 = self.name;
                var $7607 = self.indx;
                var $7608 = Kind$Term$var$($7606, $7607);
                var $7605 = $7608;
                break;
            case 'Kind.Term.ref':
                var $7609 = self.name;
                var $7610 = Kind$Term$ref$($7609);
                var $7605 = $7610;
                break;
            case 'Kind.Term.all':
                var $7611 = self.eras;
                var $7612 = self.self;
                var $7613 = self.name;
                var $7614 = self.xtyp;
                var $7615 = self.body;
                var $7616 = Kind$Term$all$($7611, $7612, $7613, Kind$Term$inline$($7614, _defs$2), (_s$8 => _x$9 => {
                    var $7617 = Kind$Term$inline$($7615(_s$8)(_x$9), _defs$2);
                    return $7617;
                }));
                var $7605 = $7616;
                break;
            case 'Kind.Term.lam':
                var $7618 = self.name;
                var $7619 = self.body;
                var $7620 = Kind$Term$lam$($7618, (_x$5 => {
                    var $7621 = Kind$Term$inline$($7619(_x$5), _defs$2);
                    return $7621;
                }));
                var $7605 = $7620;
                break;
            case 'Kind.Term.app':
                var $7622 = self.func;
                var $7623 = self.argm;
                var $7624 = Kind$Term$app$(Kind$Term$inline$($7622, _defs$2), Kind$Term$inline$($7623, _defs$2));
                var $7605 = $7624;
                break;
            case 'Kind.Term.let':
                var $7625 = self.name;
                var $7626 = self.expr;
                var $7627 = self.body;
                var $7628 = Kind$Term$let$($7625, Kind$Term$inline$($7626, _defs$2), (_x$6 => {
                    var $7629 = Kind$Term$inline$($7627(_x$6), _defs$2);
                    return $7629;
                }));
                var $7605 = $7628;
                break;
            case 'Kind.Term.def':
                var $7630 = self.name;
                var $7631 = self.expr;
                var $7632 = self.body;
                var $7633 = Kind$Term$def$($7630, Kind$Term$inline$($7631, _defs$2), (_x$6 => {
                    var $7634 = Kind$Term$inline$($7632(_x$6), _defs$2);
                    return $7634;
                }));
                var $7605 = $7633;
                break;
            case 'Kind.Term.ann':
                var $7635 = self.done;
                var $7636 = self.term;
                var $7637 = self.type;
                var $7638 = Kind$Term$ann$($7635, Kind$Term$inline$($7636, _defs$2), Kind$Term$inline$($7637, _defs$2));
                var $7605 = $7638;
                break;
            case 'Kind.Term.gol':
                var $7639 = self.name;
                var $7640 = self.dref;
                var $7641 = self.verb;
                var $7642 = Kind$Term$gol$($7639, $7640, $7641);
                var $7605 = $7642;
                break;
            case 'Kind.Term.hol':
                var $7643 = self.path;
                var $7644 = Kind$Term$hol$($7643);
                var $7605 = $7644;
                break;
            case 'Kind.Term.nat':
                var $7645 = self.natx;
                var $7646 = Kind$Term$nat$($7645);
                var $7605 = $7646;
                break;
            case 'Kind.Term.chr':
                var $7647 = self.chrx;
                var $7648 = Kind$Term$chr$($7647);
                var $7605 = $7648;
                break;
            case 'Kind.Term.str':
                var $7649 = self.strx;
                var $7650 = Kind$Term$str$($7649);
                var $7605 = $7650;
                break;
            case 'Kind.Term.ori':
                var $7651 = self.expr;
                var $7652 = Kind$Term$inline$($7651, _defs$2);
                var $7605 = $7652;
                break;
            case 'Kind.Term.typ':
                var $7653 = Kind$Term$typ;
                var $7605 = $7653;
                break;
            case 'Kind.Term.cse':
                var $7654 = _term$1;
                var $7605 = $7654;
                break;
        };
        return $7605;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7656 = self.val;
                var $7657 = self.lft;
                var $7658 = self.rgt;
                var self = $7656;
                switch (self._) {
                    case 'Maybe.some':
                        var $7660 = self.value;
                        var $7661 = List$cons$($7660, _list$3);
                        var _list0$7 = $7661;
                        break;
                    case 'Maybe.none':
                        var $7662 = _list$3;
                        var _list0$7 = $7662;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($7657, _list0$7);
                var _list2$9 = BitsMap$values$go$($7658, _list1$8);
                var $7659 = _list2$9;
                var $7655 = $7659;
                break;
            case 'BitsMap.new':
                var $7663 = _list$3;
                var $7655 = $7663;
                break;
        };
        return $7655;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $7664 = BitsMap$values$go$(_xs$2, List$nil);
        return $7664;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $7667 = _result$2;
            var $7668 = BitsMap$values$(_defs$1);
            let _result$4 = $7667;
            let _defn$3;
            while ($7668._ === 'List.cons') {
                _defn$3 = $7668.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7669 = self.name;
                        var $7670 = self.term;
                        var $7671 = self.type;
                        var $7672 = self.stat;
                        var self = $7672;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $7674 = _result$4;
                                var $7673 = $7674;
                                break;
                            case 'Kind.Status.done':
                                var _name$14 = $7669;
                                var _term$15 = Kind$Core$show$($7670);
                                var _type$16 = Kind$Core$show$($7671);
                                var $7675 = String$flatten$(List$cons$(_result$4, List$cons$(_name$14, List$cons$(" : ", List$cons$(_type$16, List$cons$(" = ", List$cons$(_term$15, List$cons$(";\u{a}", List$nil))))))));
                                var $7673 = $7675;
                                break;
                        };
                        var $7667 = $7673;
                        break;
                };
                _result$4 = $7667;
                $7668 = $7668.tail;
            }
            return _result$4;
        })();
        var $7665 = _result$3;
        return $7665;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $7676 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7677 = _m$bind$2;
            return $7677;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7679 = self.value;
                    var $7680 = $7679;
                    var _defs$3 = $7680;
                    break;
                case 'Maybe.none':
                    var $7681 = Kind$Map$new;
                    var _defs$3 = $7681;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7683 = self.file;
                        var $7684 = self.code;
                        var $7685 = self.orig;
                        var $7686 = self.name;
                        var $7687 = self.term;
                        var $7688 = self.type;
                        var $7689 = self.isct;
                        var $7690 = self.arit;
                        var $7691 = self.stat;
                        var _term$14 = Kind$Term$inline$($7687, _defs$3);
                        var _type$15 = Kind$Term$inline$($7688, _defs$3);
                        var $7692 = Kind$Def$new$($7683, $7684, $7685, $7686, _term$14, _type$15, $7689, $7690, $7691);
                        var $7682 = $7692;
                        break;
                };
                return $7682;
            }), _defs$3);
            var $7678 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $7693 = _m$pure$6;
                return $7693;
            }))(Kind$Defs$core$(_defs$4));
            return $7678;
        }));
        return $7676;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7695 = self.val;
                var $7696 = self.lft;
                var $7697 = self.rgt;
                var self = $7695;
                switch (self._) {
                    case 'Maybe.none':
                        var $7699 = _list$4;
                        var _list0$8 = $7699;
                        break;
                    case 'Maybe.some':
                        var $7700 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $7700;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($7696, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($7697, (_key$3 + '1'), _list1$9);
                var $7698 = _list2$10;
                var $7694 = $7698;
                break;
            case 'BitsMap.new':
                var $7701 = _list$4;
                var $7694 = $7701;
                break;
        };
        return $7694;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $7702 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $7702;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $7704 = self.head;
                var $7705 = self.tail;
                var $7706 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7707 = _m$bind$5;
                    return $7707;
                }))(Kind$Synth$one$($7704, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $7709 = self.value;
                            var $7710 = Kind$Synth$many$($7705, $7709);
                            var $7708 = $7710;
                            break;
                        case 'Maybe.none':
                            var $7711 = Kind$Synth$many$($7705, _defs$2);
                            var $7708 = $7711;
                            break;
                    };
                    return $7708;
                }));
                var $7703 = $7706;
                break;
            case 'List.nil':
                var $7712 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7713 = _m$pure$4;
                    return $7713;
                }))(_defs$2);
                var $7703 = $7712;
                break;
        };
        return $7703;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $7714 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7715 = _m$bind$3;
            return $7715;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $7717 = self.value;
                    var $7718 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $7719 = _m$pure$7;
                        return $7719;
                    }))(Either$left$($7717));
                    var $7716 = $7718;
                    break;
                case 'Either.right':
                    var $7720 = self.value;
                    var _file_defs$6 = $7720;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $7721 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $7722 = _m$bind$9;
                        return $7722;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $7723 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $7724 = _m$pure$11;
                            return $7724;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $7723;
                    }));
                    var $7716 = $7721;
                    break;
            };
            return $7716;
        }));
        return $7714;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $7725 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $7726 = IO$end$(Unit$new);
            return $7726;
        }));
        return $7725;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $7727 = IO$put_string$((_text$1 + "\u{a}"));
        return $7727;
    };
    const IO$print = x0 => IO$print$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7729 = self.name;
                var self = ($7729 === "Nat.zero");
                if (self) {
                    var $7731 = Maybe$some$(0n);
                    var $7730 = $7731;
                } else {
                    var $7732 = Maybe$none;
                    var $7730 = $7732;
                };
                var $7728 = $7730;
                break;
            case 'Kind.Term.app':
                var $7733 = self.func;
                var $7734 = self.argm;
                var self = $7733;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $7736 = self.name;
                        var self = ($7736 === "Nat.succ");
                        if (self) {
                            var $7738 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $7739 = _m$bind$5;
                                return $7739;
                            }))(Kind$Term$show$as_nat$go$($7734))((_pred$5 => {
                                var $7740 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7741 = _m$pure$7;
                                    return $7741;
                                }))(Nat$succ$(_pred$5));
                                return $7740;
                            }));
                            var $7737 = $7738;
                        } else {
                            var $7742 = Maybe$none;
                            var $7737 = $7742;
                        };
                        var $7735 = $7737;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7743 = Maybe$none;
                        var $7735 = $7743;
                        break;
                };
                var $7728 = $7735;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7744 = Maybe$none;
                var $7728 = $7744;
                break;
        };
        return $7728;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $7745 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $7745;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7747 = self.name;
                var $7748 = (_name$2 === $7747);
                var $7746 = $7748;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7749 = Bool$false;
                var $7746 = $7749;
                break;
        };
        return $7746;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $7751 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $7750 = $7751;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $7753 = Bool$false;
                var _wrap$6 = $7753;
            } else {
                var $7754 = self.charCodeAt(0);
                var $7755 = self.slice(1);
                var $7756 = ($7754 === 40);
                var _wrap$6 = $7756;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $7757 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $7757;
            } else {
                var $7758 = _func$5;
                var _func$8 = $7758;
            };
            var $7752 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $7750 = $7752;
        };
        return $7750;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $7759 = self.func;
                        var $7760 = self.argm;
                        var $7761 = Kind$Term$show$app$($7759, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($7760, Kind$MPath$i$(_path$2)), _args$3));
                        return $7761;
                    case 'Kind.Term.ori':
                        var $7762 = self.expr;
                        var $7763 = Kind$Term$show$app$($7762, _path$2, _args$3);
                        return $7763;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7764 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $7764;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $7765 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $7765;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $7767 = self.value;
                var $7768 = $7767;
                var $7766 = $7768;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $7770 = self.name;
                        var $7771 = Kind$Name$show$($7770);
                        var $7769 = $7771;
                        break;
                    case 'Kind.Term.ref':
                        var $7772 = self.name;
                        var _name$4 = Kind$Name$show$($7772);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7774 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($7774));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $7775 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $7773 = $7775;
                                break;
                            case 'Maybe.none':
                                var $7776 = _name$4;
                                var $7773 = $7776;
                                break;
                        };
                        var $7769 = $7773;
                        break;
                    case 'Kind.Term.all':
                        var $7777 = self.eras;
                        var $7778 = self.self;
                        var $7779 = self.name;
                        var $7780 = self.xtyp;
                        var $7781 = self.body;
                        var _eras$8 = $7777;
                        var _self$9 = Kind$Name$show$($7778);
                        var _name$10 = Kind$Name$show$($7779);
                        var _type$11 = Kind$Term$show$go$($7780, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $7783 = "<";
                            var _open$12 = $7783;
                        } else {
                            var $7784 = "(";
                            var _open$12 = $7784;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $7785 = ">";
                            var _clos$13 = $7785;
                        } else {
                            var $7786 = ")";
                            var _clos$13 = $7786;
                        };
                        var _body$14 = Kind$Term$show$go$($7781(Kind$Term$var$($7778, 0n))(Kind$Term$var$($7779, 0n)), Kind$MPath$i$(_path$2));
                        var $7782 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $7769 = $7782;
                        break;
                    case 'Kind.Term.lam':
                        var $7787 = self.name;
                        var $7788 = self.body;
                        var _name$5 = Kind$Name$show$($7787);
                        var _body$6 = Kind$Term$show$go$($7788(Kind$Term$var$($7787, 0n)), Kind$MPath$o$(_path$2));
                        var $7789 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $7769 = $7789;
                        break;
                    case 'Kind.Term.let':
                        var $7790 = self.name;
                        var $7791 = self.expr;
                        var $7792 = self.body;
                        var _name$6 = Kind$Name$show$($7790);
                        var _expr$7 = Kind$Term$show$go$($7791, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7792(Kind$Term$var$($7790, 0n)), Kind$MPath$i$(_path$2));
                        var $7793 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7769 = $7793;
                        break;
                    case 'Kind.Term.def':
                        var $7794 = self.name;
                        var $7795 = self.expr;
                        var $7796 = self.body;
                        var _name$6 = Kind$Name$show$($7794);
                        var _expr$7 = Kind$Term$show$go$($7795, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7796(Kind$Term$var$($7794, 0n)), Kind$MPath$i$(_path$2));
                        var $7797 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7769 = $7797;
                        break;
                    case 'Kind.Term.ann':
                        var $7798 = self.term;
                        var $7799 = self.type;
                        var _term$6 = Kind$Term$show$go$($7798, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($7799, Kind$MPath$i$(_path$2));
                        var $7800 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $7769 = $7800;
                        break;
                    case 'Kind.Term.gol':
                        var $7801 = self.name;
                        var _name$6 = Kind$Name$show$($7801);
                        var $7802 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $7769 = $7802;
                        break;
                    case 'Kind.Term.nat':
                        var $7803 = self.natx;
                        var $7804 = String$flatten$(List$cons$(Nat$show$($7803), List$nil));
                        var $7769 = $7804;
                        break;
                    case 'Kind.Term.chr':
                        var $7805 = self.chrx;
                        var $7806 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7805), List$cons$("\'", List$nil))));
                        var $7769 = $7806;
                        break;
                    case 'Kind.Term.str':
                        var $7807 = self.strx;
                        var $7808 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7807), List$cons$("\"", List$nil))));
                        var $7769 = $7808;
                        break;
                    case 'Kind.Term.cse':
                        var $7809 = self.expr;
                        var $7810 = self.name;
                        var $7811 = self.with;
                        var $7812 = self.cses;
                        var $7813 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($7809, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($7810);
                        var _wyth$11 = String$join$("; ", List$mapped$($7811, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $7816 = self.name;
                                    var $7817 = self.type;
                                    var self = $7817;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $7819 = self.value;
                                            var $7820 = ($7816 + (": " + Kind$Term$show$go$($7819, Maybe$none)));
                                            var $7818 = $7820;
                                            break;
                                        case 'Maybe.none':
                                            var $7821 = $7816;
                                            var $7818 = $7821;
                                            break;
                                    };
                                    var $7815 = $7818;
                                    break;
                            };
                            return $7815;
                        })));
                        var _cses$12 = BitsMap$to_list$($7812);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $7822 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $7822;
                        })));
                        var self = $7813;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7823 = self.value;
                                var $7824 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($7823, Maybe$none), List$nil)));
                                var _moti$14 = $7824;
                                break;
                            case 'Maybe.none':
                                var $7825 = "";
                                var _moti$14 = $7825;
                                break;
                        };
                        var $7814 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $7769 = $7814;
                        break;
                    case 'Kind.Term.ori':
                        var $7826 = self.expr;
                        var $7827 = Kind$Term$show$go$($7826, _path$2);
                        var $7769 = $7827;
                        break;
                    case 'Kind.Term.typ':
                        var $7828 = "Type";
                        var $7769 = $7828;
                        break;
                    case 'Kind.Term.app':
                        var $7829 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $7769 = $7829;
                        break;
                    case 'Kind.Term.hol':
                        var $7830 = "_";
                        var $7769 = $7830;
                        break;
                };
                var $7766 = $7769;
                break;
        };
        return $7766;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $7831 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $7831;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $7834 = _types$3;
            var $7835 = _names$2;
            let _types$5 = $7834;
            let _name$4;
            while ($7835._ === 'List.cons') {
                _name$4 = $7835.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $7836 = self.value;
                        var self = $7836;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7838 = self.type;
                                var $7839 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($7838) + "\u{a}"))));
                                var $7837 = $7839;
                                break;
                        };
                        var $7834 = $7837;
                        break;
                    case 'Maybe.none':
                        var $7840 = _types$5;
                        var $7834 = $7840;
                        break;
                };
                _types$5 = $7834;
                $7835 = $7835.tail;
            }
            return _types$5;
        })();
        var $7832 = _types$4;
        return $7832;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function List$filter$(_f$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $7842 = self.head;
                var $7843 = self.tail;
                var self = _f$2($7842);
                if (self) {
                    var $7845 = List$cons$($7842, List$filter$(_f$2, $7843));
                    var $7844 = $7845;
                } else {
                    var $7846 = List$filter$(_f$2, $7843);
                    var $7844 = $7846;
                };
                var $7841 = $7844;
                break;
            case 'List.nil':
                var $7847 = List$nil;
                var $7841 = $7847;
                break;
        };
        return $7841;
    };
    const List$filter = x0 => x1 => List$filter$(x0, x1);

    function Kind$Error$is_undef$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.cant_infer':
                var $7849 = Bool$false;
                var $7848 = $7849;
                break;
            case 'Kind.Error.undefined_reference':
                var $7850 = Bool$true;
                var $7848 = $7850;
                break;
        };
        return $7848;
    };
    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);

    function Kind$Error$is_mistake$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.cant_infer':
                var $7852 = Bool$true;
                var $7851 = $7852;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
                var $7853 = Bool$false;
                var $7851 = $7853;
                break;
        };
        return $7851;
    };
    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);

    function Kind$Error$is_goal$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
            case 'Kind.Error.cant_infer':
                var $7855 = Bool$false;
                var $7854 = $7855;
                break;
            case 'Kind.Error.show_goal':
                var $7856 = Bool$true;
                var $7854 = $7856;
                break;
        };
        return $7854;
    };
    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);

    function Kind$Error$relevant$(_errors$1) {
        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);
        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);
        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);
        var self = _undefs$2;
        switch (self._) {
            case 'List.nil':
                var self = _mistakes$3;
                switch (self._) {
                    case 'List.cons':
                        var $7859 = self.head;
                        var $7860 = List$concat$(List$cons$($7859, List$nil), _goals$4);
                        var $7858 = $7860;
                        break;
                    case 'List.nil':
                        var $7861 = _goals$4;
                        var $7858 = $7861;
                        break;
                };
                var $7857 = $7858;
                break;
            case 'List.cons':
                var $7862 = List$concat$(_undefs$2, _goals$4);
                var $7857 = $7862;
                break;
        };
        return $7857;
    };
    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);

    function Map$(_V$1) {
        var $7863 = null;
        return $7863;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $7865 = Bits$e;
            var $7864 = $7865;
        } else {
            var $7866 = self.charCodeAt(0);
            var $7867 = self.slice(1);
            var $7868 = (String$to_bits$($7867) + (u16_to_bits($7866)));
            var $7864 = $7868;
        };
        return $7864;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7870 = self.head;
                var $7871 = self.tail;
                var self = $7870;
                switch (self._) {
                    case 'Pair.new':
                        var $7873 = self.fst;
                        var $7874 = self.snd;
                        var $7875 = (bitsmap_set(String$to_bits$($7873), $7874, Map$from_list$($7871), 'set'));
                        var $7872 = $7875;
                        break;
                };
                var $7869 = $7872;
                break;
            case 'List.nil':
                var $7876 = BitsMap$new;
                var $7869 = $7876;
                break;
        };
        return $7869;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $7878 = self.head;
                var $7879 = self.tail;
                var self = $7878;
                switch (self._) {
                    case 'Pair.new':
                        var $7881 = self.fst;
                        var $7882 = self.snd;
                        var _name$6 = Kind$Name$show$($7881);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($7882, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($7879);
                        var $7883 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $7880 = $7883;
                        break;
                };
                var $7877 = $7880;
                break;
            case 'List.nil':
                var $7884 = "";
                var $7877 = $7884;
                break;
        };
        return $7877;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $7885 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $7887 = self.name;
                    var self = Kind$Map$get$($7887, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7889 = self.value;
                            var self = $7889;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7891 = self.term;
                                    var $7892 = $7891;
                                    var $7890 = $7892;
                                    break;
                            };
                            var $7888 = $7890;
                            break;
                        case 'Maybe.none':
                            var $7893 = Kind$Term$ref$($7887);
                            var $7888 = $7893;
                            break;
                    };
                    var $7886 = $7888;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $7894 = _term$4;
                    var $7886 = $7894;
                    break;
            };
            return $7886;
        }));
        return $7885;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7896 = self.name;
                var $7897 = self.indx;
                var $7898 = Kind$Term$var$($7896, $7897);
                var $7895 = $7898;
                break;
            case 'Kind.Term.ref':
                var $7899 = self.name;
                var self = Kind$Map$get$($7899, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $7901 = self.value;
                        var self = $7901;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7903 = self.term;
                                var $7904 = self.isct;
                                var $7905 = self.arit;
                                var self = ($7904 && (_arity$3 > $7905));
                                if (self) {
                                    var $7907 = $7903;
                                    var $7906 = $7907;
                                } else {
                                    var $7908 = Kind$Term$ref$($7899);
                                    var $7906 = $7908;
                                };
                                var $7902 = $7906;
                                break;
                        };
                        var $7900 = $7902;
                        break;
                    case 'Maybe.none':
                        var $7909 = Kind$Term$ref$($7899);
                        var $7900 = $7909;
                        break;
                };
                var $7895 = $7900;
                break;
            case 'Kind.Term.all':
                var $7910 = self.eras;
                var $7911 = self.self;
                var $7912 = self.name;
                var $7913 = self.xtyp;
                var $7914 = self.body;
                var $7915 = Kind$Term$all$($7910, $7911, $7912, Kind$Term$expand_ct$($7913, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $7916 = Kind$Term$expand_ct$($7914(_s$9)(_x$10), _defs$2, 0n);
                    return $7916;
                }));
                var $7895 = $7915;
                break;
            case 'Kind.Term.lam':
                var $7917 = self.name;
                var $7918 = self.body;
                var $7919 = Kind$Term$lam$($7917, (_x$6 => {
                    var $7920 = Kind$Term$expand_ct$($7918(_x$6), _defs$2, 0n);
                    return $7920;
                }));
                var $7895 = $7919;
                break;
            case 'Kind.Term.app':
                var $7921 = self.func;
                var $7922 = self.argm;
                var $7923 = Kind$Term$app$(Kind$Term$expand_ct$($7921, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($7922, _defs$2, 0n));
                var $7895 = $7923;
                break;
            case 'Kind.Term.let':
                var $7924 = self.name;
                var $7925 = self.expr;
                var $7926 = self.body;
                var $7927 = Kind$Term$let$($7924, Kind$Term$expand_ct$($7925, _defs$2, 0n), (_x$7 => {
                    var $7928 = Kind$Term$expand_ct$($7926(_x$7), _defs$2, 0n);
                    return $7928;
                }));
                var $7895 = $7927;
                break;
            case 'Kind.Term.def':
                var $7929 = self.name;
                var $7930 = self.expr;
                var $7931 = self.body;
                var $7932 = Kind$Term$def$($7929, Kind$Term$expand_ct$($7930, _defs$2, 0n), (_x$7 => {
                    var $7933 = Kind$Term$expand_ct$($7931(_x$7), _defs$2, 0n);
                    return $7933;
                }));
                var $7895 = $7932;
                break;
            case 'Kind.Term.ann':
                var $7934 = self.done;
                var $7935 = self.term;
                var $7936 = self.type;
                var $7937 = Kind$Term$ann$($7934, Kind$Term$expand_ct$($7935, _defs$2, 0n), Kind$Term$expand_ct$($7936, _defs$2, 0n));
                var $7895 = $7937;
                break;
            case 'Kind.Term.gol':
                var $7938 = self.name;
                var $7939 = self.dref;
                var $7940 = self.verb;
                var $7941 = Kind$Term$gol$($7938, $7939, $7940);
                var $7895 = $7941;
                break;
            case 'Kind.Term.hol':
                var $7942 = self.path;
                var $7943 = Kind$Term$hol$($7942);
                var $7895 = $7943;
                break;
            case 'Kind.Term.nat':
                var $7944 = self.natx;
                var $7945 = Kind$Term$nat$($7944);
                var $7895 = $7945;
                break;
            case 'Kind.Term.chr':
                var $7946 = self.chrx;
                var $7947 = Kind$Term$chr$($7946);
                var $7895 = $7947;
                break;
            case 'Kind.Term.str':
                var $7948 = self.strx;
                var $7949 = Kind$Term$str$($7948);
                var $7895 = $7949;
                break;
            case 'Kind.Term.ori':
                var $7950 = self.orig;
                var $7951 = self.expr;
                var $7952 = Kind$Term$ori$($7950, $7951);
                var $7895 = $7952;
                break;
            case 'Kind.Term.typ':
                var $7953 = Kind$Term$typ;
                var $7895 = $7953;
                break;
            case 'Kind.Term.cse':
                var $7954 = _term$1;
                var $7895 = $7954;
                break;
        };
        return $7895;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $7957 = _term$4;
            var $7958 = _dref$1;
            let _term$6 = $7957;
            let _path$5;
            while ($7958._ === 'List.cons') {
                _path$5 = $7958.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $7957 = _term$10;
                _term$6 = $7957;
                $7958 = $7958.tail;
            }
            return _term$6;
        })();
        var $7955 = _term$5;
        return $7955;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7960 = self.expected;
                var $7961 = self.detected;
                var $7962 = self.context;
                var self = $7960;
                switch (self._) {
                    case 'Either.left':
                        var $7964 = self.value;
                        var $7965 = $7964;
                        var _expected$7 = $7965;
                        break;
                    case 'Either.right':
                        var $7966 = self.value;
                        var $7967 = Kind$Term$show$(Kind$Term$normalize$($7966, Map$from_list$(List$nil)));
                        var _expected$7 = $7967;
                        break;
                };
                var self = $7961;
                switch (self._) {
                    case 'Either.left':
                        var $7968 = self.value;
                        var $7969 = $7968;
                        var _detected$8 = $7969;
                        break;
                    case 'Either.right':
                        var $7970 = self.value;
                        var $7971 = Kind$Term$show$(Kind$Term$normalize$($7970, Map$from_list$(List$nil)));
                        var _detected$8 = $7971;
                        break;
                };
                var $7963 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $7962;
                    switch (self._) {
                        case 'List.nil':
                            var $7972 = "";
                            return $7972;
                        case 'List.cons':
                            var $7973 = ("With context:\u{a}" + Kind$Context$show$($7962));
                            return $7973;
                    };
                })())))))));
                var $7959 = $7963;
                break;
            case 'Kind.Error.show_goal':
                var $7974 = self.name;
                var $7975 = self.dref;
                var $7976 = self.verb;
                var $7977 = self.goal;
                var $7978 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($7974) + ":\u{a}"));
                var self = $7977;
                switch (self._) {
                    case 'Maybe.some':
                        var $7980 = self.value;
                        var _goal$10 = Kind$Term$expand$($7975, $7980, _defs$2);
                        var $7981 = ("With type: " + ((() => {
                            var self = $7976;
                            if (self) {
                                var $7982 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $7983 = _x$11;
                                    return $7983;
                                })));
                                return $7982;
                            } else {
                                var $7984 = Kind$Term$show$(_goal$10);
                                return $7984;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $7981;
                        break;
                    case 'Maybe.none':
                        var $7985 = "";
                        var _with_type$9 = $7985;
                        break;
                };
                var self = $7978;
                switch (self._) {
                    case 'List.nil':
                        var $7986 = "";
                        var _with_ctxt$10 = $7986;
                        break;
                    case 'List.cons':
                        var $7987 = ("With context:\u{a}" + Kind$Context$show$($7978));
                        var _with_ctxt$10 = $7987;
                        break;
                };
                var $7979 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $7959 = $7979;
                break;
            case 'Kind.Error.waiting':
                var $7988 = self.name;
                var $7989 = ("Waiting for \'" + ($7988 + "\'."));
                var $7959 = $7989;
                break;
            case 'Kind.Error.indirect':
                var $7990 = self.name;
                var $7991 = ("Error on dependency \'" + ($7990 + "\'."));
                var $7959 = $7991;
                break;
            case 'Kind.Error.patch':
                var $7992 = self.term;
                var $7993 = ("Patching: " + Kind$Term$show$($7992));
                var $7959 = $7993;
                break;
            case 'Kind.Error.undefined_reference':
                var $7994 = self.name;
                var $7995 = ("Undefined reference: " + (Kind$Name$show$($7994) + "\u{a}"));
                var $7959 = $7995;
                break;
            case 'Kind.Error.cant_infer':
                var $7996 = self.term;
                var $7997 = self.context;
                var _term$6 = Kind$Term$show$($7996);
                var _context$7 = Kind$Context$show$($7997);
                var $7998 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With context:\u{a}" + _context$7))));
                var $7959 = $7998;
                break;
        };
        return $7959;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $8000 = self.origin;
                var $8001 = $8000;
                var $7999 = $8001;
                break;
            case 'Kind.Error.undefined_reference':
                var $8002 = self.origin;
                var $8003 = $8002;
                var $7999 = $8003;
                break;
            case 'Kind.Error.cant_infer':
                var $8004 = self.origin;
                var $8005 = $8004;
                var $7999 = $8005;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $8006 = Maybe$none;
                var $7999 = $8006;
                break;
        };
        return $7999;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $8009 = _errors$2;
            var $8010 = BitsMap$keys$(_defs$1);
            let _errors$4 = $8009;
            let _key$3;
            while ($8010._ === 'List.cons') {
                _key$3 = $8010.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $8011 = self.value;
                        var self = $8011;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8013 = self.file;
                                var $8014 = self.code;
                                var $8015 = self.name;
                                var $8016 = self.stat;
                                var self = $8016;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $8018 = self.errors;
                                        var self = $8018;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $8020 = _errors$4;
                                                var $8019 = $8020;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $8015;
                                                var _rel_errs$21 = Kind$Error$relevant$($8018);
                                                var _errors$22 = (() => {
                                                    var $8023 = _errors$4;
                                                    var $8024 = _rel_errs$21;
                                                    let _errors$23 = $8023;
                                                    let _err$22;
                                                    while ($8024._ === 'List.cons') {
                                                        _err$22 = $8024.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $8025 = self.value;
                                                                var self = $8025;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $8027 = self.fst;
                                                                        var $8028 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($8013 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($8014, $8027, $8028);
                                                                        var $8029 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $8026 = $8029;
                                                                        break;
                                                                };
                                                                var $8023 = $8026;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $8030 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $8023 = $8030;
                                                                break;
                                                        };
                                                        _errors$23 = $8023;
                                                        $8024 = $8024.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $8021 = _errors$22;
                                                var $8019 = $8021;
                                                break;
                                        };
                                        var $8017 = $8019;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $8031 = _errors$4;
                                        var $8017 = $8031;
                                        break;
                                };
                                var $8012 = $8017;
                                break;
                        };
                        var $8009 = $8012;
                        break;
                    case 'Maybe.none':
                        var $8032 = _errors$4;
                        var $8009 = $8032;
                        break;
                };
                _errors$4 = $8009;
                $8010 = $8010.tail;
            }
            return _errors$4;
        })();
        var $8007 = _errors$3;
        return $8007;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $8034 = "All terms check.";
            var _errors$5 = $8034;
        } else {
            var $8035 = self.charCodeAt(0);
            var $8036 = self.slice(1);
            var $8037 = _errors$4;
            var _errors$5 = $8037;
        };
        var $8033 = (_types$3 + ("\u{a}" + _errors$5));
        return $8033;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function Kind$api$io$check_file$(_file$1) {
        var $8038 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8039 = _m$bind$2;
            return $8039;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $8041 = self.value;
                    var $8042 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $8043 = _m$bind$4;
                        return $8043;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $8044 = IO$print$($8041);
                        return $8044;
                    }));
                    var $8040 = $8042;
                    break;
                case 'Either.right':
                    var $8045 = self.value;
                    var self = $8045;
                    switch (self._) {
                        case 'Pair.new':
                            var $8047 = self.fst;
                            var $8048 = self.snd;
                            var _nams$6 = $8047;
                            var _defs$7 = $8048;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $8050 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $8049 = $8050;
                                    break;
                                case 'List.cons':
                                    var $8051 = IO$print$(Kind$Defs$report$(_defs$7, _nams$6));
                                    var $8049 = $8051;
                                    break;
                            };
                            var $8046 = $8049;
                            break;
                    };
                    var $8040 = $8046;
                    break;
            };
            return $8040;
        }));
        return $8038;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $8053 = self.head;
                var $8054 = self.tail;
                var $8055 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $8056 = _m$bind$5;
                    return $8056;
                }))(Kind$Synth$file$($8053, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $8058 = self.value;
                            var _nams$7 = Pair$fst$($8058);
                            var _defs$8 = Pair$snd$($8058);
                            var $8059 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $8060 = _m$bind$9;
                                return $8060;
                            }))(Kind$Synth$files$go$($8054, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $8061 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $8062 = _m$pure$13;
                                    return $8062;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $8061;
                            }));
                            var $8057 = $8059;
                            break;
                        case 'Either.left':
                            var $8063 = Kind$Synth$files$go$($8054, _defs$2);
                            var $8057 = $8063;
                            break;
                    };
                    return $8057;
                }));
                var $8052 = $8055;
                break;
            case 'List.nil':
                var $8064 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8065 = _m$pure$4;
                    return $8065;
                }))(Pair$new$(List$nil, _defs$2));
                var $8052 = $8064;
                break;
        };
        return $8052;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $8067 = Kind$Map$set(_name$2)(Unit$new);
            return $8067;
        }));
        var $8066 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $8066;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $8068 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $8069 = _m$bind$3;
            return $8069;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $8070 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $8071 = _m$pure$7;
                return $8071;
            }))(Pair$new$(_nams$4, _defs$5));
            return $8070;
        }));
        return $8068;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $8072 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8073 = _m$bind$2;
            return $8073;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $8075 = IO$print$("No valid Kind file found.");
                    var $8074 = $8075;
                    break;
                case 'List.cons':
                    var $8076 = IO$print$(Kind$Defs$report$(_defs$4, _nams$3));
                    var $8074 = $8076;
                    break;
            };
            return $8074;
        }));
        return $8072;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $8077 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8078 = _m$bind$2;
            return $8078;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $8080 = self.value;
                    var $8081 = IO$print$(Kind$Defs$report$($8080, List$cons$(_name$1, List$nil)));
                    var $8079 = $8081;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $8083 = ("\'" + (_x$4 + "\'"));
                        return $8083;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $8082 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $8079 = $8082;
                    break;
            };
            return $8079;
        }));
        return $8077;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $8084 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8085 = _m$bind$2;
            return $8085;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8086 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8087 = self.value;
                        var _defs$4 = $8087;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8089 = self.value;
                                var self = $8089;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8091 = self.term;
                                        var _term$16 = $8091;
                                        var $8092 = Kind$Term$show$(_term$16);
                                        var $8090 = $8092;
                                        break;
                                };
                                var $8088 = $8090;
                                break;
                            case 'Maybe.none':
                                var $8093 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8088 = $8093;
                                break;
                        };
                        return $8088;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8095 = ("\'" + (_x$4 + "\'"));
                            return $8095;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8094 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8094;
                };
            })());
            return $8086;
        }));
        return $8084;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $8096 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8097 = _m$bind$2;
            return $8097;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8098 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8099 = self.value;
                        var _defs$4 = $8099;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8101 = self.value;
                                var self = $8101;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8103 = self.term;
                                        var _term$16 = $8103;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $8104 = Kind$Term$show$(_norm$17);
                                        var $8102 = $8104;
                                        break;
                                };
                                var $8100 = $8102;
                                break;
                            case 'Maybe.none':
                                var $8105 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8100 = $8105;
                                break;
                        };
                        return $8100;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8107 = ("\'" + (_x$4 + "\'"));
                            return $8107;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8106 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8106;
                };
            })());
            return $8098;
        }));
        return $8096;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $8108 = self.value;
                        var $8109 = $8108;
                        return $8109;
                    case 'IO.ask':
                        var $8110 = self.then;
                        var $8111 = IO$purify$($8110(""));
                        return $8111;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $8113 = self.value;
                var $8114 = $8113;
                var $8112 = $8114;
                break;
            case 'Either.right':
                var $8115 = self.value;
                var $8116 = IO$purify$((() => {
                    var _defs$3 = $8115;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $8117 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $8118 = _m$bind$5;
                        return $8118;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $8119 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $8120 = _m$pure$7;
                            return $8120;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $8119;
                    }));
                    return $8117;
                })());
                var $8112 = $8116;
                break;
        };
        return $8112;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $8122 = self.val;
                var $8123 = Maybe$some$($8122);
                var $8121 = $8123;
                break;
            case 'Parser.Reply.error':
                var $8124 = Maybe$none;
                var $8121 = $8124;
                break;
        };
        return $8121;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $8125 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $8126 = _m$pure$10;
            return $8126;
        }))(Unit$new);
        return $8125;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'Word.zero': Word$zero,
        'Nat.to_word': Nat$to_word,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'Parser.Reply': Parser$Reply,
        'List': List,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser.Reply.value': Parser$Reply$value,
        'List.nil': List$nil,
        'List.cons': List$cons,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Parser.many1': Parser$many1,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Nat.read': Nat$read,
        'IO.get_time': IO$get_time,
        'Maybe.some': Maybe$some,
        'IO.get_file': IO$get_file,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'Bool.not': Bool$not,
        'String.is_empty': String$is_empty,
        'IO.get_file_mtime': IO$get_file_mtime,
        'String.eql': String$eql,
        'Pair.new': Pair$new,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Pair': Pair,
        'Unit.new': Unit$new,
        'Bool.or': Bool$or,
        'Kind.Core.read.spaces': Kind$Core$read$spaces,
        'Kind.Term.ref': Kind$Term$ref,
        'Char.eql': Char$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Cmp.as_gte': Cmp$as_gte,
        'Word.gte': Word$gte,
        'U16.gte': U16$gte,
        'Cmp.as_ltn': Cmp$as_ltn,
        'Word.ltn': Word$ltn,
        'U16.ltn': U16$ltn,
        'Kind.Core.read.is_name': Kind$Core$read$is_name,
        'Kind.Core.read.name': Kind$Core$read$name,
        'Kind.Core.read.char': Kind$Core$read$char,
        'Kind.Term.all': Kind$Term$all,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Term.ann': Kind$Term$ann,
        'String.starts_with': String$starts_with,
        'String.nil': String$nil,
        'String.drop': String$drop,
        'Char.is_hex': Char$is_hex,
        'Word.shift_left1.aux': Word$shift_left1$aux,
        'Word.shift_left1': Word$shift_left1,
        'Word.mul.go': Word$mul$go,
        'Word.to_zero': Word$to_zero,
        'Word.mul': Word$mul,
        'U16.mul': U16$mul,
        'U16.inc': U16$inc,
        'U16.zero': U16$zero,
        'Char.hex_value16': Char$hex_value16,
        'Kind.Core.read.u16': Kind$Core$read$u16,
        'Kind.Core.read.chrx': Kind$Core$read$chrx,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Core.read.strx': Kind$Core$read$strx,
        'Kind.Term.str': Kind$Term$str,
        'Char.dec_value': Char$dec_value,
        'Kind.Core.read.natx': Kind$Core$read$natx,
        'Kind.Term.nat': Kind$Term$nat,
        'Pair.fst': Pair$fst,
        'Nat.eql': Nat$eql,
        'Nat.pred': Nat$pred,
        'Kind.Core.read.find': Kind$Core$read$find,
        'Pair.snd': Pair$snd,
        'Kind.Core.read.term': Kind$Core$read$term,
        'Kind.Core.read': Kind$Core$read,
        'Bool.read': Bool$read,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Synth.load.cached.def': Kind$Synth$load$cached$def,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.new': BitsMap$new,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Map': Kind$Map,
        'Kind.Core.dependencies.go': Kind$Core$dependencies$go,
        'List.mapped': List$mapped,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'List.fold': List$fold,
        'Word.from_bits': Word$from_bits,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Map.to_list': Kind$Map$to_list,
        'Kind.Map.keys': Kind$Map$keys,
        'Kind.Synth.load.cached': Kind$Synth$load$cached,
        'Parser.is_eof': Parser$is_eof,
        'Parser': Parser,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.eof': Parser$eof,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.not': Kind$Parser$not,
        'Kind.Parser.left': Kind$Parser$left,
        'Kind.Parser.right': Kind$Parser$right,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'Kind.Parser.float.sign': Kind$Parser$float$sign,
        'List.any': List$any,
        'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,
        'String.from_list': String$from_list,
        'Kind.Parser.float.64': Kind$Parser$float$64,
        'Kind.Parser.float.32': Kind$Parser$float$32,
        'Either': Either,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'List.at': List$at,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Kind.Parser.int_pos': Kind$Parser$int_pos,
        'Kind.Parser.int_neg': Kind$Parser$int_neg,
        'Kind.Parser.int': Kind$Parser$int,
        'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,
        'Parser.hex_digit': Parser$hex_digit,
        'Parser.hex_nat': Parser$hex_nat,
        'Kind.Parser.nat': Kind$Parser$nat,
        'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u8': Kind$Parser$u8,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'Trampoline.call': Trampoline$call,
        'Trampoline': Trampoline,
        'Trampoline.wrap': Trampoline$wrap,
        'BitsMap.set_if_empty.cps.go': BitsMap$set_if_empty$cps$go,
        'Trampoline.done': Trampoline$done,
        'BitsMap.set_if_empty.cps': BitsMap$set_if_empty$cps,
        'BitsMap.set_if_empty': BitsMap$set_if_empty,
        'Kind.Map.set_if_empty': Kind$Map$set_if_empty,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Kind.Code.color': Kind$Code$color,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.go': Kind$Term$serialize$go,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal.go': Kind$Term$equal$go,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'IO.set_file': IO$set_file,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show.go': Kind$Core$show$go,
        'Kind.Core.show': Kind$Core$show,
        'Bool.show': Bool$show,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'List.filter': List$filter,
        'Kind.Error.is_undef': Kind$Error$is_undef,
        'Kind.Error.is_mistake': Kind$Error$is_mistake,
        'Kind.Error.is_goal': Kind$Error$is_goal,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();