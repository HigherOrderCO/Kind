module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(1);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'put_string':
                            process.stdout.write(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_time':
                            run_io(lib, p.then(String(Date.now()))).then(res).catch(err);
                            break;
                        case 'get_line':
                            lib.rl.question('', (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(get_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'set_file':
                            try {
                                run_io(lib, p.then(set_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'del_file':
                            try {
                                run_io(lib, p.then(del_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_dir':
                            try {
                                run_io(lib, p.then(get_dir(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function BitsMap$get$(_bits$2, _map$3) {
        var BitsMap$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var BitsMap$get = _bits$2 => _map$3 => BitsMap$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $37 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $39 = self.lft;
                                var $40 = BitsMap$get$($37, $39);
                                var $38 = $40;
                                break;
                            case 'BitsMap.new':
                                var $41 = Maybe$none;
                                var $38 = $41;
                                break;
                        };
                        return $38;
                    case 'i':
                        var $42 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $44 = self.rgt;
                                var $45 = BitsMap$get$($42, $44);
                                var $43 = $45;
                                break;
                            case 'BitsMap.new':
                                var $46 = Maybe$none;
                                var $43 = $46;
                                break;
                        };
                        return $43;
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $48 = self.val;
                                var $49 = $48;
                                var $47 = $49;
                                break;
                            case 'BitsMap.new':
                                var $50 = Maybe$none;
                                var $47 = $50;
                                break;
                        };
                        return $47;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$get = x0 => x1 => BitsMap$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $52 = Bool$true;
                var $51 = $52;
                break;
            case 'Cmp.gtn':
                var $53 = Bool$false;
                var $51 = $53;
                break;
        };
        return $51;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $55 = self.pred;
                var $56 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $57 = $59;
                            break;
                        case 'Word.i':
                            var $61 = self.pred;
                            var $62 = (_a$pred$10 => {
                                var $63 = Word$cmp$go$(_a$pred$10, $61, Cmp$ltn);
                                return $63;
                            });
                            var $57 = $62;
                            break;
                        case 'Word.e':
                            var $64 = (_a$pred$8 => {
                                var $65 = _c$4;
                                return $65;
                            });
                            var $57 = $64;
                            break;
                    };
                    var $57 = $57($55);
                    return $57;
                });
                var $54 = $56;
                break;
            case 'Word.i':
                var $66 = self.pred;
                var $67 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, Cmp$gtn);
                                return $71;
                            });
                            var $68 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, _c$4);
                                return $74;
                            });
                            var $68 = $73;
                            break;
                        case 'Word.e':
                            var $75 = (_a$pred$8 => {
                                var $76 = _c$4;
                                return $76;
                            });
                            var $68 = $75;
                            break;
                    };
                    var $68 = $68($66);
                    return $68;
                });
                var $54 = $67;
                break;
            case 'Word.e':
                var $77 = (_b$5 => {
                    var $78 = _c$4;
                    return $78;
                });
                var $54 = $77;
                break;
        };
        var $54 = $54(_b$3);
        return $54;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $79 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $79;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $80 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $80;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $81 = 1n + _pred$1;
        return $81;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $82 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $82;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $83 = word_to_u16(_value$1);
        return $83;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $84 = null;
        return $84;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $85 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $85;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $86 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $86;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $88 = self.pred;
                var $89 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $91 = self.pred;
                            var $92 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $94 = Word$i$(Word$subber$(_a$pred$10, $91, Bool$true));
                                    var $93 = $94;
                                } else {
                                    var $95 = Word$o$(Word$subber$(_a$pred$10, $91, Bool$false));
                                    var $93 = $95;
                                };
                                return $93;
                            });
                            var $90 = $92;
                            break;
                        case 'Word.i':
                            var $96 = self.pred;
                            var $97 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $99 = Word$o$(Word$subber$(_a$pred$10, $96, Bool$true));
                                    var $98 = $99;
                                } else {
                                    var $100 = Word$i$(Word$subber$(_a$pred$10, $96, Bool$true));
                                    var $98 = $100;
                                };
                                return $98;
                            });
                            var $90 = $97;
                            break;
                        case 'Word.e':
                            var $101 = (_a$pred$8 => {
                                var $102 = Word$e;
                                return $102;
                            });
                            var $90 = $101;
                            break;
                    };
                    var $90 = $90($88);
                    return $90;
                });
                var $87 = $89;
                break;
            case 'Word.i':
                var $103 = self.pred;
                var $104 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $106 = self.pred;
                            var $107 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $109 = Word$o$(Word$subber$(_a$pred$10, $106, Bool$false));
                                    var $108 = $109;
                                } else {
                                    var $110 = Word$i$(Word$subber$(_a$pred$10, $106, Bool$false));
                                    var $108 = $110;
                                };
                                return $108;
                            });
                            var $105 = $107;
                            break;
                        case 'Word.i':
                            var $111 = self.pred;
                            var $112 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $114 = Word$i$(Word$subber$(_a$pred$10, $111, Bool$true));
                                    var $113 = $114;
                                } else {
                                    var $115 = Word$o$(Word$subber$(_a$pred$10, $111, Bool$false));
                                    var $113 = $115;
                                };
                                return $113;
                            });
                            var $105 = $112;
                            break;
                        case 'Word.e':
                            var $116 = (_a$pred$8 => {
                                var $117 = Word$e;
                                return $117;
                            });
                            var $105 = $116;
                            break;
                    };
                    var $105 = $105($103);
                    return $105;
                });
                var $87 = $104;
                break;
            case 'Word.e':
                var $118 = (_b$5 => {
                    var $119 = Word$e;
                    return $119;
                });
                var $87 = $118;
                break;
        };
        var $87 = $87(_b$3);
        return $87;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $120 = Word$subber$(_a$2, _b$3, Bool$false);
        return $120;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $121 = _x$4;
                    return $121;
                } else {
                    var $122 = (self - 1n);
                    var $123 = Nat$apply$($122, _f$3, _f$3(_x$4));
                    return $123;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $125 = self.pred;
                var $126 = Word$i$($125);
                var $124 = $126;
                break;
            case 'Word.i':
                var $127 = self.pred;
                var $128 = Word$o$(Word$inc$($127));
                var $124 = $128;
                break;
            case 'Word.e':
                var $129 = Word$e;
                var $124 = $129;
                break;
        };
        return $124;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function U16$inc$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $131 = u16_to_word(self);
                var $132 = U16$new$(Word$inc$($131));
                var $130 = $132;
                break;
        };
        return $130;
    };
    const U16$inc = x0 => U16$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $134 = Word$e;
            var $133 = $134;
        } else {
            var $135 = (self - 1n);
            var $136 = Word$o$(Word$zero$($135));
            var $133 = $136;
        };
        return $133;
    };
    const Word$zero = x0 => Word$zero$(x0);
    const U16$zero = U16$new$(Word$zero$(16n));
    const Nat$to_u16 = a0 => (Number(a0));

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $138 = self.pred;
                var $139 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $141 = self.pred;
                            var $142 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $144 = Word$i$(Word$adder$(_a$pred$10, $141, Bool$false));
                                    var $143 = $144;
                                } else {
                                    var $145 = Word$o$(Word$adder$(_a$pred$10, $141, Bool$false));
                                    var $143 = $145;
                                };
                                return $143;
                            });
                            var $140 = $142;
                            break;
                        case 'Word.i':
                            var $146 = self.pred;
                            var $147 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $149 = Word$o$(Word$adder$(_a$pred$10, $146, Bool$true));
                                    var $148 = $149;
                                } else {
                                    var $150 = Word$i$(Word$adder$(_a$pred$10, $146, Bool$false));
                                    var $148 = $150;
                                };
                                return $148;
                            });
                            var $140 = $147;
                            break;
                        case 'Word.e':
                            var $151 = (_a$pred$8 => {
                                var $152 = Word$e;
                                return $152;
                            });
                            var $140 = $151;
                            break;
                    };
                    var $140 = $140($138);
                    return $140;
                });
                var $137 = $139;
                break;
            case 'Word.i':
                var $153 = self.pred;
                var $154 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $156 = self.pred;
                            var $157 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $159 = Word$o$(Word$adder$(_a$pred$10, $156, Bool$true));
                                    var $158 = $159;
                                } else {
                                    var $160 = Word$i$(Word$adder$(_a$pred$10, $156, Bool$false));
                                    var $158 = $160;
                                };
                                return $158;
                            });
                            var $155 = $157;
                            break;
                        case 'Word.i':
                            var $161 = self.pred;
                            var $162 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $164 = Word$i$(Word$adder$(_a$pred$10, $161, Bool$true));
                                    var $163 = $164;
                                } else {
                                    var $165 = Word$o$(Word$adder$(_a$pred$10, $161, Bool$true));
                                    var $163 = $165;
                                };
                                return $163;
                            });
                            var $155 = $162;
                            break;
                        case 'Word.e':
                            var $166 = (_a$pred$8 => {
                                var $167 = Word$e;
                                return $167;
                            });
                            var $155 = $166;
                            break;
                    };
                    var $155 = $155($153);
                    return $155;
                });
                var $137 = $154;
                break;
            case 'Word.e':
                var $168 = (_b$5 => {
                    var $169 = Word$e;
                    return $169;
                });
                var $137 = $168;
                break;
        };
        var $137 = $137(_b$3);
        return $137;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $170 = Word$adder$(_a$2, _b$3, Bool$false);
        return $170;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $172 = Bool$false;
                var $171 = $172;
                break;
            case 'Cmp.eql':
                var $173 = Bool$true;
                var $171 = $173;
                break;
        };
        return $171;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $174 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $174;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $176 = self.pred;
                var $177 = (Word$to_bits$($176) + '0');
                var $175 = $177;
                break;
            case 'Word.i':
                var $178 = self.pred;
                var $179 = (Word$to_bits$($178) + '1');
                var $175 = $179;
                break;
            case 'Word.e':
                var $180 = Bits$e;
                var $175 = $180;
                break;
        };
        return $175;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $182 = Word$e;
            var $181 = $182;
        } else {
            var $183 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.o':
                    var $185 = self.pred;
                    var $186 = Word$o$(Word$trim$($183, $185));
                    var $184 = $186;
                    break;
                case 'Word.i':
                    var $187 = self.pred;
                    var $188 = Word$i$(Word$trim$($183, $187));
                    var $184 = $188;
                    break;
                case 'Word.e':
                    var $189 = Word$o$(Word$trim$($183, Word$e));
                    var $184 = $189;
                    break;
            };
            var $181 = $184;
        };
        return $181;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $190 = self.slice(0, -1);
                        var $191 = Bits$reverse$tco$($190, (_r$2 + '0'));
                        return $191;
                    case 'i':
                        var $192 = self.slice(0, -1);
                        var $193 = Bits$reverse$tco$($192, (_r$2 + '1'));
                        return $193;
                    case 'e':
                        var $194 = _r$2;
                        return $194;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $195 = Bits$reverse$tco$(_a$1, Bits$e);
        return $195;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $196 = BitsMap$get$((kind_name_to_bits(_name$2)), _map$3);
        return $196;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function IO$get_file$(_name$1) {
        var $197 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $198 = IO$end$(_file$2);
            return $198;
        }));
        return $197;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $199 = null;
        return $199;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $200 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $200;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $202 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $201 = $202;
        } else {
            var $203 = self.charCodeAt(0);
            var $204 = self.slice(1);
            var $205 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $201 = $205;
        };
        return $201;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $206 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $206;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $207 = null;
        return $207;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $208 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $208;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $209 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $209;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $211 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $213 = self.value;
                        var self = $211;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $215 = self.idx;
                                var self = $213;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $217 = self.idx;
                                        var self = ($215 > $217);
                                        if (self) {
                                            var $219 = _a$1;
                                            var $218 = $219;
                                        } else {
                                            var $220 = _b$2;
                                            var $218 = $220;
                                        };
                                        var $216 = $218;
                                        break;
                                };
                                var $214 = $216;
                                break;
                        };
                        var $212 = $214;
                        break;
                    case 'Maybe.none':
                        var $221 = _a$1;
                        var $212 = $221;
                        break;
                };
                var $210 = $212;
                break;
            case 'Maybe.none':
                var $222 = _b$2;
                var $210 = $222;
                break;
        };
        return $210;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $223 = self.head;
                        var $224 = self.tail;
                        var _parsed$8 = $223(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $226 = self.idx;
                                var $227 = self.code;
                                var $228 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($226, $227, $228));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $229 = Parser$first_of$go$($224, _err$13, _idx$4, _code$5);
                                var $225 = $229;
                                break;
                            case 'Parser.Reply.value':
                                var $230 = self.idx;
                                var $231 = self.code;
                                var $232 = self.val;
                                var $233 = Parser$Reply$value$($230, $231, $232);
                                var $225 = $233;
                                break;
                        };
                        return $225;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $235 = self.value;
                                var self = $235;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $237 = self.idx;
                                        var $238 = self.code;
                                        var $239 = self.err;
                                        var $240 = Parser$Reply$error$($237, $238, $239);
                                        var $236 = $240;
                                        break;
                                };
                                var $234 = $236;
                                break;
                            case 'Maybe.none':
                                var $241 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $234 = $241;
                                break;
                        };
                        return $234;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $242 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $242;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $243 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $243;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $244 = null;
        return $244;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $245 = self.idx;
                        var $246 = self.code;
                        var $247 = self.val;
                        var $248 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $249 = _values$3(List$cons$($247, _xs$9));
                            return $249;
                        }), $245, $246);
                        return $248;
                    case 'Parser.Reply.error':
                        var $250 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $250;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $251 = Parser$many$go(_parser$2)((_x$3 => {
            var $252 = _x$3;
            return $252;
        }));
        return $251;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = 1;

    function String$cons$(_head$1, _tail$2) {
        var $253 = (String.fromCharCode(_head$1) + _tail$2);
        return $253;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $254 = self.head;
                        var $255 = self.tail;
                        var $256 = String$flatten$go$($255, (_res$2 + $254));
                        return $256;
                    case 'List.nil':
                        var $257 = _res$2;
                        return $257;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $258 = String$flatten$go$(_xs$1, "");
        return $258;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $260 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $259 = $260;
        } else {
            var $261 = self.charCodeAt(0);
            var $262 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $264 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $263 = $264;
            } else {
                var $265 = self.charCodeAt(0);
                var $266 = self.slice(1);
                var self = ($261 === $265);
                if (self) {
                    var $268 = Parser$text$($262, Nat$succ$(_idx$2), $266);
                    var $267 = $268;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($265, String$nil), List$cons$("\'.", List$nil))))));
                    var $269 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $267 = $269;
                };
                var $263 = $267;
            };
            var $259 = $263;
        };
        return $259;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $271 = self.err;
                var $272 = Parser$Reply$error$(_idx$2, _code$3, $271);
                var $270 = $272;
                break;
            case 'Parser.Reply.value':
                var $273 = self.idx;
                var $274 = self.code;
                var $275 = self.val;
                var $276 = Parser$Reply$value$($273, $274, $275);
                var $270 = $276;
                break;
        };
        return $270;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $277 = self.head;
                        var $278 = self.tail;
                        var $279 = List$reverse$go$($278, List$cons$($277, _res$3));
                        return $279;
                    case 'List.nil':
                        var $280 = _res$3;
                        return $280;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $281 = List$reverse$go$(_xs$2, List$nil);
        return $281;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $283 = self.idx;
                        var $284 = self.code;
                        var $285 = Parser$Reply$value$($283, $284, List$reverse$(_values$4));
                        var $282 = $285;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $287 = self.idx;
                                var $288 = self.code;
                                var $289 = self.err;
                                var $290 = Parser$Reply$error$($287, $288, $289);
                                var $286 = $290;
                                break;
                            case 'Parser.Reply.value':
                                var $291 = self.idx;
                                var $292 = self.code;
                                var $293 = self.val;
                                var $294 = Parser$until$go$(_until$2, _parse$3, List$cons$($293, _values$4), $291, $292);
                                var $286 = $294;
                                break;
                        };
                        var $282 = $286;
                        break;
                };
                return $282;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $295 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $295;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $297 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $296 = $297;
        } else {
            var $298 = self.charCodeAt(0);
            var $299 = self.slice(1);
            var $300 = Parser$Reply$value$(Nat$succ$(_idx$1), $299, $298);
            var $296 = $300;
        };
        return $296;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $302 = self.idx;
                var $303 = self.code;
                var $304 = self.err;
                var $305 = Parser$Reply$error$($302, $303, $304);
                var $301 = $305;
                break;
            case 'Parser.Reply.value':
                var $306 = self.idx;
                var $307 = self.code;
                var self = Parser$until$(Parser$text("\u{a}"), Parser$one)($306)($307);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $309 = self.idx;
                        var $310 = self.code;
                        var $311 = self.err;
                        var $312 = Parser$Reply$error$($309, $310, $311);
                        var $308 = $312;
                        break;
                    case 'Parser.Reply.value':
                        var $313 = self.idx;
                        var $314 = self.code;
                        var $315 = Parser$Reply$value$($313, $314, Unit$new);
                        var $308 = $315;
                        break;
                };
                var $301 = $308;
                break;
        };
        return $301;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $316 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $316;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $318 = self.idx;
                var $319 = self.code;
                var $320 = self.err;
                var $321 = Parser$Reply$error$($318, $319, $320);
                var $317 = $321;
                break;
            case 'Parser.Reply.value':
                var $322 = self.idx;
                var $323 = self.code;
                var self = Parser$get_index$($322, $323);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $325 = self.idx;
                        var $326 = self.code;
                        var $327 = self.err;
                        var $328 = Parser$Reply$error$($325, $326, $327);
                        var $324 = $328;
                        break;
                    case 'Parser.Reply.value':
                        var $329 = self.idx;
                        var $330 = self.code;
                        var $331 = self.val;
                        var $332 = Parser$Reply$value$($329, $330, $331);
                        var $324 = $332;
                        break;
                };
                var $317 = $324;
                break;
        };
        return $317;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $334 = self.idx;
                var $335 = self.code;
                var $336 = self.err;
                var $337 = Parser$Reply$error$($334, $335, $336);
                var $333 = $337;
                break;
            case 'Parser.Reply.value':
                var $338 = self.idx;
                var $339 = self.code;
                var $340 = self.val;
                var self = Parser$many$(_parser$2)($338)($339);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $342 = self.idx;
                        var $343 = self.code;
                        var $344 = self.err;
                        var $345 = Parser$Reply$error$($342, $343, $344);
                        var $341 = $345;
                        break;
                    case 'Parser.Reply.value':
                        var $346 = self.idx;
                        var $347 = self.code;
                        var $348 = self.val;
                        var $349 = Parser$Reply$value$($346, $347, List$cons$($340, $348));
                        var $341 = $349;
                        break;
                };
                var $333 = $341;
                break;
        };
        return $333;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $351 = Bool$true;
            var $350 = $351;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $353 = Bool$true;
                var $352 = $353;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $355 = Bool$true;
                    var $354 = $355;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $357 = Bool$true;
                        var $356 = $357;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $359 = Bool$true;
                            var $358 = $359;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $361 = Bool$true;
                                var $360 = $361;
                            } else {
                                var $362 = Bool$false;
                                var $360 = $362;
                            };
                            var $358 = $360;
                        };
                        var $356 = $358;
                    };
                    var $354 = $356;
                };
                var $352 = $354;
            };
            var $350 = $352;
        };
        return $350;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $364 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $363 = $364;
        } else {
            var $365 = self.charCodeAt(0);
            var $366 = self.slice(1);
            var self = Kind$Name$is_letter$($365);
            if (self) {
                var $368 = Parser$Reply$value$(Nat$succ$(_idx$1), $366, $365);
                var $367 = $368;
            } else {
                var $369 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $367 = $369;
            };
            var $363 = $367;
        };
        return $363;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $371 = self.head;
                var $372 = self.tail;
                var $373 = _cons$5($371)(List$fold$($372, _nil$4, _cons$5));
                var $370 = $373;
                break;
            case 'List.nil':
                var $374 = _nil$4;
                var $370 = $374;
                break;
        };
        return $370;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $376 = self.idx;
                var $377 = self.code;
                var $378 = self.err;
                var $379 = Parser$Reply$error$($376, $377, $378);
                var $375 = $379;
                break;
            case 'Parser.Reply.value':
                var $380 = self.idx;
                var $381 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $380, $381);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $383 = self.idx;
                        var $384 = self.code;
                        var $385 = self.err;
                        var $386 = Parser$Reply$error$($383, $384, $385);
                        var $382 = $386;
                        break;
                    case 'Parser.Reply.value':
                        var $387 = self.idx;
                        var $388 = self.code;
                        var $389 = self.val;
                        var $390 = Parser$Reply$value$($387, $388, List$fold$($389, String$nil, String$cons));
                        var $382 = $390;
                        break;
                };
                var $375 = $382;
                break;
        };
        return $375;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $392 = self.idx;
                var $393 = self.code;
                var $394 = self.err;
                var $395 = Parser$Reply$error$($392, $393, $394);
                var $391 = $395;
                break;
            case 'Parser.Reply.value':
                var $396 = self.idx;
                var $397 = self.code;
                var $398 = Parser$text$(_text$1, $396, $397);
                var $391 = $398;
                break;
        };
        return $391;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $400 = self.idx;
                var $401 = self.code;
                var $402 = self.err;
                var $403 = Parser$Reply$error$($400, $401, $402);
                var $399 = $403;
                break;
            case 'Parser.Reply.value':
                var $404 = self.idx;
                var $405 = self.code;
                var $406 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($404)($405);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $408 = self.idx;
                        var $409 = self.code;
                        var $410 = self.err;
                        var $411 = Parser$Reply$error$($408, $409, $410);
                        var $407 = $411;
                        break;
                    case 'Parser.Reply.value':
                        var $412 = self.idx;
                        var $413 = self.code;
                        var $414 = self.val;
                        var $415 = Parser$Reply$value$($412, $413, List$cons$($406, $414));
                        var $407 = $415;
                        break;
                };
                var $399 = $407;
                break;
        };
        return $399;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $416 = null;
        return $416;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $418 = self.idx;
                var $419 = self.code;
                var $420 = self.val;
                var $421 = Parser$Reply$value$($418, $419, Maybe$some$($420));
                var $417 = $421;
                break;
            case 'Parser.Reply.error':
                var $422 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $417 = $422;
                break;
        };
        return $417;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $424 = self.idx;
                var $425 = self.code;
                var $426 = self.err;
                var $427 = Parser$Reply$error$($424, $425, $426);
                var $423 = $427;
                break;
            case 'Parser.Reply.value':
                var $428 = self.idx;
                var $429 = self.code;
                var self = _parser$2($428)($429);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $431 = self.idx;
                        var $432 = self.code;
                        var $433 = self.err;
                        var $434 = Parser$Reply$error$($431, $432, $433);
                        var $430 = $434;
                        break;
                    case 'Parser.Reply.value':
                        var $435 = self.idx;
                        var $436 = self.code;
                        var $437 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $435, $436);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $439 = self.idx;
                                var $440 = self.code;
                                var $441 = self.err;
                                var $442 = Parser$Reply$error$($439, $440, $441);
                                var $438 = $442;
                                break;
                            case 'Parser.Reply.value':
                                var $443 = self.idx;
                                var $444 = self.code;
                                var $445 = Parser$Reply$value$($443, $444, $437);
                                var $438 = $445;
                                break;
                        };
                        var $430 = $438;
                        break;
                };
                var $423 = $430;
                break;
        };
        return $423;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $447 = self.idx;
                var $448 = self.code;
                var $449 = self.err;
                var $450 = Parser$Reply$error$($447, $448, $449);
                var $446 = $450;
                break;
            case 'Parser.Reply.value':
                var $451 = self.idx;
                var $452 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($451)($452);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $454 = self.idx;
                        var $455 = self.code;
                        var $456 = self.err;
                        var $457 = Parser$Reply$error$($454, $455, $456);
                        var $453 = $457;
                        break;
                    case 'Parser.Reply.value':
                        var $458 = self.idx;
                        var $459 = self.code;
                        var $460 = self.val;
                        var $461 = Parser$Reply$value$($458, $459, List$fold$($460, String$nil, String$cons));
                        var $453 = $461;
                        break;
                };
                var $446 = $453;
                break;
        };
        return $446;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $462 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $462;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Pair$new$(_fst$3, _snd$4) {
        var $463 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $463;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $465 = self.idx;
                var $466 = self.code;
                var $467 = self.err;
                var $468 = Parser$Reply$error$($465, $466, $467);
                var $464 = $468;
                break;
            case 'Parser.Reply.value':
                var $469 = self.idx;
                var $470 = self.code;
                var $471 = self.val;
                var _orig$7 = Pair$new$(_from$1, $471);
                var $472 = Parser$Reply$value$($469, $470, _orig$7);
                var $464 = $472;
                break;
        };
        return $464;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $473 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $473;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $475 = self.idx;
                var $476 = self.code;
                var $477 = self.err;
                var $478 = Parser$Reply$error$($475, $476, $477);
                var $474 = $478;
                break;
            case 'Parser.Reply.value':
                var $479 = self.idx;
                var $480 = self.code;
                var $481 = self.val;
                var self = Kind$Parser$name$($479, $480);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $483 = self.idx;
                        var $484 = self.code;
                        var $485 = self.err;
                        var $486 = Parser$Reply$error$($483, $484, $485);
                        var $482 = $486;
                        break;
                    case 'Parser.Reply.value':
                        var $487 = self.idx;
                        var $488 = self.code;
                        var $489 = self.val;
                        var self = Kind$Parser$binder$(":", $487, $488);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $491 = self.idx;
                                var $492 = self.code;
                                var $493 = self.err;
                                var $494 = Parser$Reply$error$($491, $492, $493);
                                var $490 = $494;
                                break;
                            case 'Parser.Reply.value':
                                var $495 = self.idx;
                                var $496 = self.code;
                                var $497 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $495, $496);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $499 = self.idx;
                                        var $500 = self.code;
                                        var $501 = self.err;
                                        var $502 = Parser$Reply$error$($499, $500, $501);
                                        var $498 = $502;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $503 = self.idx;
                                        var $504 = self.code;
                                        var self = Kind$Parser$term$($503, $504);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $506 = self.idx;
                                                var $507 = self.code;
                                                var $508 = self.err;
                                                var $509 = Parser$Reply$error$($506, $507, $508);
                                                var $505 = $509;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $510 = self.idx;
                                                var $511 = self.code;
                                                var $512 = self.val;
                                                var _term$18 = List$fold$($497, $512, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $515 = self.eras;
                                                            var $516 = self.name;
                                                            var $517 = self.term;
                                                            var $518 = Kind$Term$all$($515, "", $516, $517, (_s$23 => _x$24 => {
                                                                var $519 = _t$19;
                                                                return $519;
                                                            }));
                                                            var $514 = $518;
                                                            break;
                                                    };
                                                    return $514;
                                                }));
                                                var self = Kind$Parser$stop$($481, $510, $511);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $520 = self.idx;
                                                        var $521 = self.code;
                                                        var $522 = self.err;
                                                        var $523 = Parser$Reply$error$($520, $521, $522);
                                                        var $513 = $523;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $524 = self.idx;
                                                        var $525 = self.code;
                                                        var $526 = self.val;
                                                        var $527 = Parser$Reply$value$($524, $525, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $528 = self.eras;
                                                                    var $529 = self.name;
                                                                    var $530 = self.xtyp;
                                                                    var $531 = self.body;
                                                                    var $532 = Kind$Term$ori$($526, Kind$Term$all$($528, $489, $529, $530, $531));
                                                                    return $532;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $533 = _term$18;
                                                                    return $533;
                                                            };
                                                        })());
                                                        var $513 = $527;
                                                        break;
                                                };
                                                var $505 = $513;
                                                break;
                                        };
                                        var $498 = $505;
                                        break;
                                };
                                var $490 = $498;
                                break;
                        };
                        var $482 = $490;
                        break;
                };
                var $474 = $482;
                break;
        };
        return $474;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $534 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $534;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $536 = self.head;
                var $537 = self.tail;
                var $538 = Kind$Term$lam$($536, (_x$5 => {
                    var $539 = Kind$Parser$make_lambda$($537, _body$2);
                    return $539;
                }));
                var $535 = $538;
                break;
            case 'List.nil':
                var $540 = _body$2;
                var $535 = $540;
                break;
        };
        return $535;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $542 = self.idx;
                var $543 = self.code;
                var $544 = self.err;
                var $545 = Parser$Reply$error$($542, $543, $544);
                var $541 = $545;
                break;
            case 'Parser.Reply.value':
                var $546 = self.idx;
                var $547 = self.code;
                var $548 = self.val;
                var self = Kind$Parser$text$("(", $546, $547);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $550 = self.idx;
                        var $551 = self.code;
                        var $552 = self.err;
                        var $553 = Parser$Reply$error$($550, $551, $552);
                        var $549 = $553;
                        break;
                    case 'Parser.Reply.value':
                        var $554 = self.idx;
                        var $555 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $554, $555);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $557 = self.idx;
                                var $558 = self.code;
                                var $559 = self.err;
                                var $560 = Parser$Reply$error$($557, $558, $559);
                                var $556 = $560;
                                break;
                            case 'Parser.Reply.value':
                                var $561 = self.idx;
                                var $562 = self.code;
                                var $563 = self.val;
                                var self = Kind$Parser$term$($561, $562);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $565 = self.idx;
                                        var $566 = self.code;
                                        var $567 = self.err;
                                        var $568 = Parser$Reply$error$($565, $566, $567);
                                        var $564 = $568;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $569 = self.idx;
                                        var $570 = self.code;
                                        var $571 = self.val;
                                        var self = Kind$Parser$stop$($548, $569, $570);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $573 = self.idx;
                                                var $574 = self.code;
                                                var $575 = self.err;
                                                var $576 = Parser$Reply$error$($573, $574, $575);
                                                var $572 = $576;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $577 = self.idx;
                                                var $578 = self.code;
                                                var $579 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($563, $571);
                                                var $580 = Parser$Reply$value$($577, $578, Kind$Term$ori$($579, _expr$18));
                                                var $572 = $580;
                                                break;
                                        };
                                        var $564 = $572;
                                        break;
                                };
                                var $556 = $564;
                                break;
                        };
                        var $549 = $556;
                        break;
                };
                var $541 = $549;
                break;
        };
        return $541;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $582 = self.idx;
                var $583 = self.code;
                var $584 = self.err;
                var $585 = Parser$Reply$error$($582, $583, $584);
                var $581 = $585;
                break;
            case 'Parser.Reply.value':
                var $586 = self.idx;
                var $587 = self.code;
                var $588 = self.val;
                var self = Kind$Parser$text$("<", $586, $587);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $590 = self.idx;
                        var $591 = self.code;
                        var $592 = self.err;
                        var $593 = Parser$Reply$error$($590, $591, $592);
                        var $589 = $593;
                        break;
                    case 'Parser.Reply.value':
                        var $594 = self.idx;
                        var $595 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $594, $595);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $597 = self.idx;
                                var $598 = self.code;
                                var $599 = self.err;
                                var $600 = Parser$Reply$error$($597, $598, $599);
                                var $596 = $600;
                                break;
                            case 'Parser.Reply.value':
                                var $601 = self.idx;
                                var $602 = self.code;
                                var $603 = self.val;
                                var self = Kind$Parser$term$($601, $602);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $605 = self.idx;
                                        var $606 = self.code;
                                        var $607 = self.err;
                                        var $608 = Parser$Reply$error$($605, $606, $607);
                                        var $604 = $608;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $609 = self.idx;
                                        var $610 = self.code;
                                        var $611 = self.val;
                                        var self = Kind$Parser$stop$($588, $609, $610);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $613 = self.idx;
                                                var $614 = self.code;
                                                var $615 = self.err;
                                                var $616 = Parser$Reply$error$($613, $614, $615);
                                                var $612 = $616;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $617 = self.idx;
                                                var $618 = self.code;
                                                var $619 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($603, $611);
                                                var $620 = Parser$Reply$value$($617, $618, Kind$Term$ori$($619, _expr$18));
                                                var $612 = $620;
                                                break;
                                        };
                                        var $604 = $612;
                                        break;
                                };
                                var $596 = $604;
                                break;
                        };
                        var $589 = $596;
                        break;
                };
                var $581 = $589;
                break;
        };
        return $581;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $622 = self.idx;
                var $623 = self.code;
                var $624 = self.err;
                var $625 = Parser$Reply$error$($622, $623, $624);
                var $621 = $625;
                break;
            case 'Parser.Reply.value':
                var $626 = self.idx;
                var $627 = self.code;
                var $628 = self.val;
                var self = Kind$Parser$text$("()", $626, $627);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $630 = self.idx;
                        var $631 = self.code;
                        var $632 = self.err;
                        var $633 = Parser$Reply$error$($630, $631, $632);
                        var $629 = $633;
                        break;
                    case 'Parser.Reply.value':
                        var $634 = self.idx;
                        var $635 = self.code;
                        var self = Kind$Parser$term$($634, $635);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $637 = self.idx;
                                var $638 = self.code;
                                var $639 = self.err;
                                var $640 = Parser$Reply$error$($637, $638, $639);
                                var $636 = $640;
                                break;
                            case 'Parser.Reply.value':
                                var $641 = self.idx;
                                var $642 = self.code;
                                var $643 = self.val;
                                var self = Kind$Parser$stop$($628, $641, $642);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $645 = self.idx;
                                        var $646 = self.code;
                                        var $647 = self.err;
                                        var $648 = Parser$Reply$error$($645, $646, $647);
                                        var $644 = $648;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $649 = self.idx;
                                        var $650 = self.code;
                                        var $651 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $653 = $643;
                                            return $653;
                                        }));
                                        var $652 = Parser$Reply$value$($649, $650, Kind$Term$ori$($651, _expr$15));
                                        var $644 = $652;
                                        break;
                                };
                                var $636 = $644;
                                break;
                        };
                        var $629 = $636;
                        break;
                };
                var $621 = $629;
                break;
        };
        return $621;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("(", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $655 = self.idx;
                var $656 = self.code;
                var $657 = self.err;
                var $658 = Parser$Reply$error$($655, $656, $657);
                var $654 = $658;
                break;
            case 'Parser.Reply.value':
                var $659 = self.idx;
                var $660 = self.code;
                var self = Kind$Parser$term$($659, $660);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $662 = self.idx;
                        var $663 = self.code;
                        var $664 = self.err;
                        var $665 = Parser$Reply$error$($662, $663, $664);
                        var $661 = $665;
                        break;
                    case 'Parser.Reply.value':
                        var $666 = self.idx;
                        var $667 = self.code;
                        var $668 = self.val;
                        var self = Kind$Parser$text$(")", $666, $667);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $670 = self.idx;
                                var $671 = self.code;
                                var $672 = self.err;
                                var $673 = Parser$Reply$error$($670, $671, $672);
                                var $669 = $673;
                                break;
                            case 'Parser.Reply.value':
                                var $674 = self.idx;
                                var $675 = self.code;
                                var $676 = Parser$Reply$value$($674, $675, $668);
                                var $669 = $676;
                                break;
                        };
                        var $661 = $669;
                        break;
                };
                var $654 = $661;
                break;
        };
        return $654;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$ref$(_name$1) {
        var $677 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $677;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $678 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $678;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $679 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $679;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $680 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $680;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $682 = self.idx;
                var $683 = self.code;
                var $684 = self.err;
                var $685 = Parser$Reply$error$($682, $683, $684);
                var $681 = $685;
                break;
            case 'Parser.Reply.value':
                var $686 = self.idx;
                var $687 = self.code;
                var $688 = self.val;
                var self = Kind$Parser$text$("let ", $686, $687);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $690 = self.idx;
                        var $691 = self.code;
                        var $692 = self.err;
                        var $693 = Parser$Reply$error$($690, $691, $692);
                        var $689 = $693;
                        break;
                    case 'Parser.Reply.value':
                        var $694 = self.idx;
                        var $695 = self.code;
                        var self = Kind$Parser$name1$($694, $695);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $697 = self.idx;
                                var $698 = self.code;
                                var $699 = self.err;
                                var $700 = Parser$Reply$error$($697, $698, $699);
                                var $696 = $700;
                                break;
                            case 'Parser.Reply.value':
                                var $701 = self.idx;
                                var $702 = self.code;
                                var $703 = self.val;
                                var self = Kind$Parser$text$("=", $701, $702);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $705 = self.idx;
                                        var $706 = self.code;
                                        var $707 = self.err;
                                        var $708 = Parser$Reply$error$($705, $706, $707);
                                        var $704 = $708;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $709 = self.idx;
                                        var $710 = self.code;
                                        var self = Kind$Parser$text$("for ", $709, $710);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $712 = self.idx;
                                                var $713 = self.code;
                                                var $714 = self.err;
                                                var $715 = Parser$Reply$error$($712, $713, $714);
                                                var $711 = $715;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $716 = self.idx;
                                                var $717 = self.code;
                                                var self = Kind$Parser$name1$($716, $717);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $719 = self.idx;
                                                        var $720 = self.code;
                                                        var $721 = self.err;
                                                        var $722 = Parser$Reply$error$($719, $720, $721);
                                                        var $718 = $722;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $723 = self.idx;
                                                        var $724 = self.code;
                                                        var $725 = self.val;
                                                        var self = Kind$Parser$text$(":", $723, $724);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $727 = self.idx;
                                                                var $728 = self.code;
                                                                var $729 = self.err;
                                                                var $730 = Parser$Reply$error$($727, $728, $729);
                                                                var $726 = $730;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $731 = self.idx;
                                                                var $732 = self.code;
                                                                var self = Kind$Parser$text$("U32", $731, $732);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $734 = self.idx;
                                                                        var $735 = self.code;
                                                                        var $736 = self.err;
                                                                        var $737 = Parser$Reply$error$($734, $735, $736);
                                                                        var $733 = $737;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $738 = self.idx;
                                                                        var $739 = self.code;
                                                                        var self = Kind$Parser$text$("from", $738, $739);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $741 = self.idx;
                                                                                var $742 = self.code;
                                                                                var $743 = self.err;
                                                                                var $744 = Parser$Reply$error$($741, $742, $743);
                                                                                var $740 = $744;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $745 = self.idx;
                                                                                var $746 = self.code;
                                                                                var self = Kind$Parser$term$($745, $746);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $748 = self.idx;
                                                                                        var $749 = self.code;
                                                                                        var $750 = self.err;
                                                                                        var $751 = Parser$Reply$error$($748, $749, $750);
                                                                                        var $747 = $751;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $752 = self.idx;
                                                                                        var $753 = self.code;
                                                                                        var $754 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $752, $753);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $756 = self.idx;
                                                                                                var $757 = self.code;
                                                                                                var $758 = self.err;
                                                                                                var $759 = Parser$Reply$error$($756, $757, $758);
                                                                                                var $755 = $759;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $760 = self.idx;
                                                                                                var $761 = self.code;
                                                                                                var self = Kind$Parser$term$($760, $761);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $763 = self.idx;
                                                                                                        var $764 = self.code;
                                                                                                        var $765 = self.err;
                                                                                                        var $766 = Parser$Reply$error$($763, $764, $765);
                                                                                                        var $762 = $766;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $767 = self.idx;
                                                                                                        var $768 = self.code;
                                                                                                        var $769 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $767, $768);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $771 = self.idx;
                                                                                                                var $772 = self.code;
                                                                                                                var $773 = self.err;
                                                                                                                var $774 = Parser$Reply$error$($771, $772, $773);
                                                                                                                var $770 = $774;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $775 = self.idx;
                                                                                                                var $776 = self.code;
                                                                                                                var self = Kind$Parser$term$($775, $776);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $778 = self.idx;
                                                                                                                        var $779 = self.code;
                                                                                                                        var $780 = self.err;
                                                                                                                        var $781 = Parser$Reply$error$($778, $779, $780);
                                                                                                                        var $777 = $781;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $782 = self.idx;
                                                                                                                        var $783 = self.code;
                                                                                                                        var $784 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $782, $783);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $786 = self.idx;
                                                                                                                                var $787 = self.code;
                                                                                                                                var $788 = self.err;
                                                                                                                                var $789 = Parser$Reply$error$($786, $787, $788);
                                                                                                                                var $785 = $789;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $790 = self.idx;
                                                                                                                                var $791 = self.code;
                                                                                                                                var self = Kind$Parser$term$($790, $791);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $793 = self.idx;
                                                                                                                                        var $794 = self.code;
                                                                                                                                        var $795 = self.err;
                                                                                                                                        var $796 = Parser$Reply$error$($793, $794, $795);
                                                                                                                                        var $792 = $796;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $797 = self.idx;
                                                                                                                                        var $798 = self.code;
                                                                                                                                        var $799 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($688, $797, $798);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $801 = self.idx;
                                                                                                                                                var $802 = self.code;
                                                                                                                                                var $803 = self.err;
                                                                                                                                                var $804 = Parser$Reply$error$($801, $802, $803);
                                                                                                                                                var $800 = $804;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $805 = self.idx;
                                                                                                                                                var $806 = self.code;
                                                                                                                                                var $807 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($703));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $754);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $769);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($725, (_e$59 => {
                                                                                                                                                    var $809 = Kind$Term$lam$($703, (_s$60 => {
                                                                                                                                                        var $810 = $784;
                                                                                                                                                        return $810;
                                                                                                                                                    }));
                                                                                                                                                    return $809;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($703, _term$60, (_x$61 => {
                                                                                                                                                    var $811 = $799;
                                                                                                                                                    return $811;
                                                                                                                                                }));
                                                                                                                                                var $808 = Parser$Reply$value$($805, $806, Kind$Term$ori$($807, _term$61));
                                                                                                                                                var $800 = $808;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $792 = $800;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $785 = $792;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $777 = $785;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $770 = $777;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $762 = $770;
                                                                                                        break;
                                                                                                };
                                                                                                var $755 = $762;
                                                                                                break;
                                                                                        };
                                                                                        var $747 = $755;
                                                                                        break;
                                                                                };
                                                                                var $740 = $747;
                                                                                break;
                                                                        };
                                                                        var $733 = $740;
                                                                        break;
                                                                };
                                                                var $726 = $733;
                                                                break;
                                                        };
                                                        var $718 = $726;
                                                        break;
                                                };
                                                var $711 = $718;
                                                break;
                                        };
                                        var $704 = $711;
                                        break;
                                };
                                var $696 = $704;
                                break;
                        };
                        var $689 = $696;
                        break;
                };
                var $681 = $689;
                break;
        };
        return $681;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $813 = self.idx;
                var $814 = self.code;
                var $815 = self.err;
                var $816 = Parser$Reply$error$($813, $814, $815);
                var $812 = $816;
                break;
            case 'Parser.Reply.value':
                var $817 = self.idx;
                var $818 = self.code;
                var $819 = self.val;
                var self = Kind$Parser$text$("for ", $817, $818);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $821 = self.idx;
                        var $822 = self.code;
                        var $823 = self.err;
                        var $824 = Parser$Reply$error$($821, $822, $823);
                        var $820 = $824;
                        break;
                    case 'Parser.Reply.value':
                        var $825 = self.idx;
                        var $826 = self.code;
                        var self = Kind$Parser$name1$($825, $826);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $828 = self.idx;
                                var $829 = self.code;
                                var $830 = self.err;
                                var $831 = Parser$Reply$error$($828, $829, $830);
                                var $827 = $831;
                                break;
                            case 'Parser.Reply.value':
                                var $832 = self.idx;
                                var $833 = self.code;
                                var $834 = self.val;
                                var self = Kind$Parser$text$(":", $832, $833);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $836 = self.idx;
                                        var $837 = self.code;
                                        var $838 = self.err;
                                        var $839 = Parser$Reply$error$($836, $837, $838);
                                        var $835 = $839;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $840 = self.idx;
                                        var $841 = self.code;
                                        var self = Kind$Parser$text$("U32", $840, $841);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $843 = self.idx;
                                                var $844 = self.code;
                                                var $845 = self.err;
                                                var $846 = Parser$Reply$error$($843, $844, $845);
                                                var $842 = $846;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $847 = self.idx;
                                                var $848 = self.code;
                                                var self = Kind$Parser$text$("from", $847, $848);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $850 = self.idx;
                                                        var $851 = self.code;
                                                        var $852 = self.err;
                                                        var $853 = Parser$Reply$error$($850, $851, $852);
                                                        var $849 = $853;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $854 = self.idx;
                                                        var $855 = self.code;
                                                        var self = Kind$Parser$term$($854, $855);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $857 = self.idx;
                                                                var $858 = self.code;
                                                                var $859 = self.err;
                                                                var $860 = Parser$Reply$error$($857, $858, $859);
                                                                var $856 = $860;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $861 = self.idx;
                                                                var $862 = self.code;
                                                                var $863 = self.val;
                                                                var self = Kind$Parser$text$("to", $861, $862);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $865 = self.idx;
                                                                        var $866 = self.code;
                                                                        var $867 = self.err;
                                                                        var $868 = Parser$Reply$error$($865, $866, $867);
                                                                        var $864 = $868;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $869 = self.idx;
                                                                        var $870 = self.code;
                                                                        var self = Kind$Parser$term$($869, $870);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $872 = self.idx;
                                                                                var $873 = self.code;
                                                                                var $874 = self.err;
                                                                                var $875 = Parser$Reply$error$($872, $873, $874);
                                                                                var $871 = $875;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $876 = self.idx;
                                                                                var $877 = self.code;
                                                                                var $878 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $876, $877);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $880 = self.idx;
                                                                                        var $881 = self.code;
                                                                                        var $882 = self.err;
                                                                                        var $883 = Parser$Reply$error$($880, $881, $882);
                                                                                        var $879 = $883;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $884 = self.idx;
                                                                                        var $885 = self.code;
                                                                                        var self = Kind$Parser$name1$($884, $885);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $887 = self.idx;
                                                                                                var $888 = self.code;
                                                                                                var $889 = self.err;
                                                                                                var $890 = Parser$Reply$error$($887, $888, $889);
                                                                                                var $886 = $890;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $891 = self.idx;
                                                                                                var $892 = self.code;
                                                                                                var $893 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $891, $892);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $895 = self.idx;
                                                                                                        var $896 = self.code;
                                                                                                        var $897 = self.err;
                                                                                                        var $898 = Parser$Reply$error$($895, $896, $897);
                                                                                                        var $894 = $898;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $899 = self.idx;
                                                                                                        var $900 = self.code;
                                                                                                        var self = Kind$Parser$term$($899, $900);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $902 = self.idx;
                                                                                                                var $903 = self.code;
                                                                                                                var $904 = self.err;
                                                                                                                var $905 = Parser$Reply$error$($902, $903, $904);
                                                                                                                var $901 = $905;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $906 = self.idx;
                                                                                                                var $907 = self.code;
                                                                                                                var $908 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $906, $907);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $910 = self.idx;
                                                                                                                        var $911 = self.code;
                                                                                                                        var $912 = self.err;
                                                                                                                        var $913 = Parser$Reply$error$($910, $911, $912);
                                                                                                                        var $909 = $913;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $914 = self.idx;
                                                                                                                        var $915 = self.code;
                                                                                                                        var self = Kind$Parser$term$($914, $915);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $917 = self.idx;
                                                                                                                                var $918 = self.code;
                                                                                                                                var $919 = self.err;
                                                                                                                                var $920 = Parser$Reply$error$($917, $918, $919);
                                                                                                                                var $916 = $920;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $921 = self.idx;
                                                                                                                                var $922 = self.code;
                                                                                                                                var $923 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($819, $921, $922);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $925 = self.idx;
                                                                                                                                        var $926 = self.code;
                                                                                                                                        var $927 = self.err;
                                                                                                                                        var $928 = Parser$Reply$error$($925, $926, $927);
                                                                                                                                        var $924 = $928;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $929 = self.idx;
                                                                                                                                        var $930 = self.code;
                                                                                                                                        var $931 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($893));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $863);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $878);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($834, (_e$56 => {
                                                                                                                                            var $933 = Kind$Term$lam$($893, (_s$57 => {
                                                                                                                                                var $934 = $908;
                                                                                                                                                return $934;
                                                                                                                                            }));
                                                                                                                                            return $933;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($893, _term$57, (_x$58 => {
                                                                                                                                            var $935 = $923;
                                                                                                                                            return $935;
                                                                                                                                        }));
                                                                                                                                        var $932 = Parser$Reply$value$($929, $930, Kind$Term$ori$($931, _term$58));
                                                                                                                                        var $924 = $932;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $916 = $924;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $909 = $916;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $901 = $909;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $894 = $901;
                                                                                                        break;
                                                                                                };
                                                                                                var $886 = $894;
                                                                                                break;
                                                                                        };
                                                                                        var $879 = $886;
                                                                                        break;
                                                                                };
                                                                                var $871 = $879;
                                                                                break;
                                                                        };
                                                                        var $864 = $871;
                                                                        break;
                                                                };
                                                                var $856 = $864;
                                                                break;
                                                        };
                                                        var $849 = $856;
                                                        break;
                                                };
                                                var $842 = $849;
                                                break;
                                        };
                                        var $835 = $842;
                                        break;
                                };
                                var $827 = $835;
                                break;
                        };
                        var $820 = $827;
                        break;
                };
                var $812 = $820;
                break;
        };
        return $812;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $937 = self.idx;
                var $938 = self.code;
                var $939 = self.err;
                var $940 = Parser$Reply$error$($937, $938, $939);
                var $936 = $940;
                break;
            case 'Parser.Reply.value':
                var $941 = self.idx;
                var $942 = self.code;
                var $943 = self.val;
                var self = Kind$Parser$text$("let ", $941, $942);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $945 = self.idx;
                        var $946 = self.code;
                        var $947 = self.err;
                        var $948 = Parser$Reply$error$($945, $946, $947);
                        var $944 = $948;
                        break;
                    case 'Parser.Reply.value':
                        var $949 = self.idx;
                        var $950 = self.code;
                        var self = Kind$Parser$name1$($949, $950);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $952 = self.idx;
                                var $953 = self.code;
                                var $954 = self.err;
                                var $955 = Parser$Reply$error$($952, $953, $954);
                                var $951 = $955;
                                break;
                            case 'Parser.Reply.value':
                                var $956 = self.idx;
                                var $957 = self.code;
                                var $958 = self.val;
                                var self = Kind$Parser$text$("=", $956, $957);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $960 = self.idx;
                                        var $961 = self.code;
                                        var $962 = self.err;
                                        var $963 = Parser$Reply$error$($960, $961, $962);
                                        var $959 = $963;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $964 = self.idx;
                                        var $965 = self.code;
                                        var self = Kind$Parser$text$("for ", $964, $965);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $967 = self.idx;
                                                var $968 = self.code;
                                                var $969 = self.err;
                                                var $970 = Parser$Reply$error$($967, $968, $969);
                                                var $966 = $970;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $971 = self.idx;
                                                var $972 = self.code;
                                                var self = Kind$Parser$name1$($971, $972);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $974 = self.idx;
                                                        var $975 = self.code;
                                                        var $976 = self.err;
                                                        var $977 = Parser$Reply$error$($974, $975, $976);
                                                        var $973 = $977;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $978 = self.idx;
                                                        var $979 = self.code;
                                                        var $980 = self.val;
                                                        var self = Kind$Parser$text$("from", $978, $979);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $982 = self.idx;
                                                                var $983 = self.code;
                                                                var $984 = self.err;
                                                                var $985 = Parser$Reply$error$($982, $983, $984);
                                                                var $981 = $985;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $986 = self.idx;
                                                                var $987 = self.code;
                                                                var self = Kind$Parser$term$($986, $987);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $989 = self.idx;
                                                                        var $990 = self.code;
                                                                        var $991 = self.err;
                                                                        var $992 = Parser$Reply$error$($989, $990, $991);
                                                                        var $988 = $992;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $993 = self.idx;
                                                                        var $994 = self.code;
                                                                        var $995 = self.val;
                                                                        var self = Kind$Parser$text$("to", $993, $994);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $997 = self.idx;
                                                                                var $998 = self.code;
                                                                                var $999 = self.err;
                                                                                var $1000 = Parser$Reply$error$($997, $998, $999);
                                                                                var $996 = $1000;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1001 = self.idx;
                                                                                var $1002 = self.code;
                                                                                var self = Kind$Parser$term$($1001, $1002);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1004 = self.idx;
                                                                                        var $1005 = self.code;
                                                                                        var $1006 = self.err;
                                                                                        var $1007 = Parser$Reply$error$($1004, $1005, $1006);
                                                                                        var $1003 = $1007;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1008 = self.idx;
                                                                                        var $1009 = self.code;
                                                                                        var $1010 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1008, $1009);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1012 = self.idx;
                                                                                                var $1013 = self.code;
                                                                                                var $1014 = self.err;
                                                                                                var $1015 = Parser$Reply$error$($1012, $1013, $1014);
                                                                                                var $1011 = $1015;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1016 = self.idx;
                                                                                                var $1017 = self.code;
                                                                                                var self = Kind$Parser$term$($1016, $1017);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1019 = self.idx;
                                                                                                        var $1020 = self.code;
                                                                                                        var $1021 = self.err;
                                                                                                        var $1022 = Parser$Reply$error$($1019, $1020, $1021);
                                                                                                        var $1018 = $1022;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1023 = self.idx;
                                                                                                        var $1024 = self.code;
                                                                                                        var $1025 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1023, $1024);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1027 = self.idx;
                                                                                                                var $1028 = self.code;
                                                                                                                var $1029 = self.err;
                                                                                                                var $1030 = Parser$Reply$error$($1027, $1028, $1029);
                                                                                                                var $1026 = $1030;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1031 = self.idx;
                                                                                                                var $1032 = self.code;
                                                                                                                var self = Kind$Parser$term$($1031, $1032);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1034 = self.idx;
                                                                                                                        var $1035 = self.code;
                                                                                                                        var $1036 = self.err;
                                                                                                                        var $1037 = Parser$Reply$error$($1034, $1035, $1036);
                                                                                                                        var $1033 = $1037;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1038 = self.idx;
                                                                                                                        var $1039 = self.code;
                                                                                                                        var $1040 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($943, $1038, $1039);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1042 = self.idx;
                                                                                                                                var $1043 = self.code;
                                                                                                                                var $1044 = self.err;
                                                                                                                                var $1045 = Parser$Reply$error$($1042, $1043, $1044);
                                                                                                                                var $1041 = $1045;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1046 = self.idx;
                                                                                                                                var $1047 = self.code;
                                                                                                                                var $1048 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($958));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $995);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1010);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($980, (_e$53 => {
                                                                                                                                    var $1050 = Kind$Term$lam$($958, (_s$54 => {
                                                                                                                                        var $1051 = $1025;
                                                                                                                                        return $1051;
                                                                                                                                    }));
                                                                                                                                    return $1050;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($958, _term$54, (_x$55 => {
                                                                                                                                    var $1052 = $1040;
                                                                                                                                    return $1052;
                                                                                                                                }));
                                                                                                                                var $1049 = Parser$Reply$value$($1046, $1047, Kind$Term$ori$($1048, _term$55));
                                                                                                                                var $1041 = $1049;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1033 = $1041;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1026 = $1033;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1018 = $1026;
                                                                                                        break;
                                                                                                };
                                                                                                var $1011 = $1018;
                                                                                                break;
                                                                                        };
                                                                                        var $1003 = $1011;
                                                                                        break;
                                                                                };
                                                                                var $996 = $1003;
                                                                                break;
                                                                        };
                                                                        var $988 = $996;
                                                                        break;
                                                                };
                                                                var $981 = $988;
                                                                break;
                                                        };
                                                        var $973 = $981;
                                                        break;
                                                };
                                                var $966 = $973;
                                                break;
                                        };
                                        var $959 = $966;
                                        break;
                                };
                                var $951 = $959;
                                break;
                        };
                        var $944 = $951;
                        break;
                };
                var $936 = $944;
                break;
        };
        return $936;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1054 = self.idx;
                var $1055 = self.code;
                var $1056 = self.err;
                var $1057 = Parser$Reply$error$($1054, $1055, $1056);
                var $1053 = $1057;
                break;
            case 'Parser.Reply.value':
                var $1058 = self.idx;
                var $1059 = self.code;
                var $1060 = self.val;
                var self = Kind$Parser$text$("for ", $1058, $1059);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1062 = self.idx;
                        var $1063 = self.code;
                        var $1064 = self.err;
                        var $1065 = Parser$Reply$error$($1062, $1063, $1064);
                        var $1061 = $1065;
                        break;
                    case 'Parser.Reply.value':
                        var $1066 = self.idx;
                        var $1067 = self.code;
                        var self = Kind$Parser$name1$($1066, $1067);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1069 = self.idx;
                                var $1070 = self.code;
                                var $1071 = self.err;
                                var $1072 = Parser$Reply$error$($1069, $1070, $1071);
                                var $1068 = $1072;
                                break;
                            case 'Parser.Reply.value':
                                var $1073 = self.idx;
                                var $1074 = self.code;
                                var $1075 = self.val;
                                var self = Kind$Parser$text$("from", $1073, $1074);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1077 = self.idx;
                                        var $1078 = self.code;
                                        var $1079 = self.err;
                                        var $1080 = Parser$Reply$error$($1077, $1078, $1079);
                                        var $1076 = $1080;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1081 = self.idx;
                                        var $1082 = self.code;
                                        var self = Kind$Parser$term$($1081, $1082);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1084 = self.idx;
                                                var $1085 = self.code;
                                                var $1086 = self.err;
                                                var $1087 = Parser$Reply$error$($1084, $1085, $1086);
                                                var $1083 = $1087;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1088 = self.idx;
                                                var $1089 = self.code;
                                                var $1090 = self.val;
                                                var self = Kind$Parser$text$("to", $1088, $1089);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1092 = self.idx;
                                                        var $1093 = self.code;
                                                        var $1094 = self.err;
                                                        var $1095 = Parser$Reply$error$($1092, $1093, $1094);
                                                        var $1091 = $1095;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1096 = self.idx;
                                                        var $1097 = self.code;
                                                        var self = Kind$Parser$term$($1096, $1097);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1099 = self.idx;
                                                                var $1100 = self.code;
                                                                var $1101 = self.err;
                                                                var $1102 = Parser$Reply$error$($1099, $1100, $1101);
                                                                var $1098 = $1102;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1103 = self.idx;
                                                                var $1104 = self.code;
                                                                var $1105 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1103, $1104);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1107 = self.idx;
                                                                        var $1108 = self.code;
                                                                        var $1109 = self.err;
                                                                        var $1110 = Parser$Reply$error$($1107, $1108, $1109);
                                                                        var $1106 = $1110;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1111 = self.idx;
                                                                        var $1112 = self.code;
                                                                        var self = Kind$Parser$name1$($1111, $1112);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1114 = self.idx;
                                                                                var $1115 = self.code;
                                                                                var $1116 = self.err;
                                                                                var $1117 = Parser$Reply$error$($1114, $1115, $1116);
                                                                                var $1113 = $1117;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1118 = self.idx;
                                                                                var $1119 = self.code;
                                                                                var $1120 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1118, $1119);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1122 = self.idx;
                                                                                        var $1123 = self.code;
                                                                                        var $1124 = self.err;
                                                                                        var $1125 = Parser$Reply$error$($1122, $1123, $1124);
                                                                                        var $1121 = $1125;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1126 = self.idx;
                                                                                        var $1127 = self.code;
                                                                                        var self = Kind$Parser$term$($1126, $1127);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1129 = self.idx;
                                                                                                var $1130 = self.code;
                                                                                                var $1131 = self.err;
                                                                                                var $1132 = Parser$Reply$error$($1129, $1130, $1131);
                                                                                                var $1128 = $1132;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1133 = self.idx;
                                                                                                var $1134 = self.code;
                                                                                                var $1135 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1133, $1134);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1137 = self.idx;
                                                                                                        var $1138 = self.code;
                                                                                                        var $1139 = self.err;
                                                                                                        var $1140 = Parser$Reply$error$($1137, $1138, $1139);
                                                                                                        var $1136 = $1140;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1141 = self.idx;
                                                                                                        var $1142 = self.code;
                                                                                                        var self = Kind$Parser$term$($1141, $1142);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1144 = self.idx;
                                                                                                                var $1145 = self.code;
                                                                                                                var $1146 = self.err;
                                                                                                                var $1147 = Parser$Reply$error$($1144, $1145, $1146);
                                                                                                                var $1143 = $1147;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1148 = self.idx;
                                                                                                                var $1149 = self.code;
                                                                                                                var $1150 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1060, $1148, $1149);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1152 = self.idx;
                                                                                                                        var $1153 = self.code;
                                                                                                                        var $1154 = self.err;
                                                                                                                        var $1155 = Parser$Reply$error$($1152, $1153, $1154);
                                                                                                                        var $1151 = $1155;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1156 = self.idx;
                                                                                                                        var $1157 = self.code;
                                                                                                                        var $1158 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1120));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1090);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1105);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1075, (_e$50 => {
                                                                                                                            var $1160 = Kind$Term$lam$($1120, (_s$51 => {
                                                                                                                                var $1161 = $1135;
                                                                                                                                return $1161;
                                                                                                                            }));
                                                                                                                            return $1160;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1120, _term$51, (_x$52 => {
                                                                                                                            var $1162 = $1150;
                                                                                                                            return $1162;
                                                                                                                        }));
                                                                                                                        var $1159 = Parser$Reply$value$($1156, $1157, Kind$Term$ori$($1158, _term$52));
                                                                                                                        var $1151 = $1159;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1143 = $1151;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1136 = $1143;
                                                                                                        break;
                                                                                                };
                                                                                                var $1128 = $1136;
                                                                                                break;
                                                                                        };
                                                                                        var $1121 = $1128;
                                                                                        break;
                                                                                };
                                                                                var $1113 = $1121;
                                                                                break;
                                                                        };
                                                                        var $1106 = $1113;
                                                                        break;
                                                                };
                                                                var $1098 = $1106;
                                                                break;
                                                        };
                                                        var $1091 = $1098;
                                                        break;
                                                };
                                                var $1083 = $1091;
                                                break;
                                        };
                                        var $1076 = $1083;
                                        break;
                                };
                                var $1068 = $1076;
                                break;
                        };
                        var $1061 = $1068;
                        break;
                };
                var $1053 = $1061;
                break;
        };
        return $1053;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1164 = self.idx;
                var $1165 = self.code;
                var $1166 = self.err;
                var $1167 = Parser$Reply$error$($1164, $1165, $1166);
                var $1163 = $1167;
                break;
            case 'Parser.Reply.value':
                var $1168 = self.idx;
                var $1169 = self.code;
                var $1170 = self.val;
                var self = Kind$Parser$text$("let ", $1168, $1169);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1172 = self.idx;
                        var $1173 = self.code;
                        var $1174 = self.err;
                        var $1175 = Parser$Reply$error$($1172, $1173, $1174);
                        var $1171 = $1175;
                        break;
                    case 'Parser.Reply.value':
                        var $1176 = self.idx;
                        var $1177 = self.code;
                        var self = Kind$Parser$name1$($1176, $1177);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1179 = self.idx;
                                var $1180 = self.code;
                                var $1181 = self.err;
                                var $1182 = Parser$Reply$error$($1179, $1180, $1181);
                                var $1178 = $1182;
                                break;
                            case 'Parser.Reply.value':
                                var $1183 = self.idx;
                                var $1184 = self.code;
                                var $1185 = self.val;
                                var self = Kind$Parser$text$("=", $1183, $1184);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1187 = self.idx;
                                        var $1188 = self.code;
                                        var $1189 = self.err;
                                        var $1190 = Parser$Reply$error$($1187, $1188, $1189);
                                        var $1186 = $1190;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1191 = self.idx;
                                        var $1192 = self.code;
                                        var self = Kind$Parser$text$("for ", $1191, $1192);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1194 = self.idx;
                                                var $1195 = self.code;
                                                var $1196 = self.err;
                                                var $1197 = Parser$Reply$error$($1194, $1195, $1196);
                                                var $1193 = $1197;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1198 = self.idx;
                                                var $1199 = self.code;
                                                var self = Kind$Parser$name1$($1198, $1199);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1201 = self.idx;
                                                        var $1202 = self.code;
                                                        var $1203 = self.err;
                                                        var $1204 = Parser$Reply$error$($1201, $1202, $1203);
                                                        var $1200 = $1204;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1205 = self.idx;
                                                        var $1206 = self.code;
                                                        var $1207 = self.val;
                                                        var self = Kind$Parser$text$("in", $1205, $1206);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1209 = self.idx;
                                                                var $1210 = self.code;
                                                                var $1211 = self.err;
                                                                var $1212 = Parser$Reply$error$($1209, $1210, $1211);
                                                                var $1208 = $1212;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1213 = self.idx;
                                                                var $1214 = self.code;
                                                                var self = Kind$Parser$term$($1213, $1214);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1216 = self.idx;
                                                                        var $1217 = self.code;
                                                                        var $1218 = self.err;
                                                                        var $1219 = Parser$Reply$error$($1216, $1217, $1218);
                                                                        var $1215 = $1219;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1220 = self.idx;
                                                                        var $1221 = self.code;
                                                                        var $1222 = self.val;
                                                                        var self = Kind$Parser$text$(":", $1220, $1221);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1224 = self.idx;
                                                                                var $1225 = self.code;
                                                                                var $1226 = self.err;
                                                                                var $1227 = Parser$Reply$error$($1224, $1225, $1226);
                                                                                var $1223 = $1227;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1228 = self.idx;
                                                                                var $1229 = self.code;
                                                                                var self = Kind$Parser$term$($1228, $1229);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1231 = self.idx;
                                                                                        var $1232 = self.code;
                                                                                        var $1233 = self.err;
                                                                                        var $1234 = Parser$Reply$error$($1231, $1232, $1233);
                                                                                        var $1230 = $1234;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1235 = self.idx;
                                                                                        var $1236 = self.code;
                                                                                        var $1237 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1235, $1236);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1239 = self.idx;
                                                                                                var $1240 = self.code;
                                                                                                var $1241 = self.err;
                                                                                                var $1242 = Parser$Reply$error$($1239, $1240, $1241);
                                                                                                var $1238 = $1242;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1243 = self.idx;
                                                                                                var $1244 = self.code;
                                                                                                var self = Kind$Parser$term$($1243, $1244);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1246 = self.idx;
                                                                                                        var $1247 = self.code;
                                                                                                        var $1248 = self.err;
                                                                                                        var $1249 = Parser$Reply$error$($1246, $1247, $1248);
                                                                                                        var $1245 = $1249;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1250 = self.idx;
                                                                                                        var $1251 = self.code;
                                                                                                        var $1252 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1170, $1250, $1251);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1254 = self.idx;
                                                                                                                var $1255 = self.code;
                                                                                                                var $1256 = self.err;
                                                                                                                var $1257 = Parser$Reply$error$($1254, $1255, $1256);
                                                                                                                var $1253 = $1257;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1258 = self.idx;
                                                                                                                var $1259 = self.code;
                                                                                                                var $1260 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $1222);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($1185));
                                                                                                                var _lamb$47 = Kind$Term$lam$($1207, (_i$47 => {
                                                                                                                    var $1262 = Kind$Term$lam$($1185, (_x$48 => {
                                                                                                                        var $1263 = $1237;
                                                                                                                        return $1263;
                                                                                                                    }));
                                                                                                                    return $1262;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($1185, _term$48, (_x$49 => {
                                                                                                                    var $1264 = $1252;
                                                                                                                    return $1264;
                                                                                                                }));
                                                                                                                var $1261 = Parser$Reply$value$($1258, $1259, Kind$Term$ori$($1260, _term$49));
                                                                                                                var $1253 = $1261;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1245 = $1253;
                                                                                                        break;
                                                                                                };
                                                                                                var $1238 = $1245;
                                                                                                break;
                                                                                        };
                                                                                        var $1230 = $1238;
                                                                                        break;
                                                                                };
                                                                                var $1223 = $1230;
                                                                                break;
                                                                        };
                                                                        var $1215 = $1223;
                                                                        break;
                                                                };
                                                                var $1208 = $1215;
                                                                break;
                                                        };
                                                        var $1200 = $1208;
                                                        break;
                                                };
                                                var $1193 = $1200;
                                                break;
                                        };
                                        var $1186 = $1193;
                                        break;
                                };
                                var $1178 = $1186;
                                break;
                        };
                        var $1171 = $1178;
                        break;
                };
                var $1163 = $1171;
                break;
        };
        return $1163;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1266 = self.idx;
                var $1267 = self.code;
                var $1268 = self.err;
                var $1269 = Parser$Reply$error$($1266, $1267, $1268);
                var $1265 = $1269;
                break;
            case 'Parser.Reply.value':
                var $1270 = self.idx;
                var $1271 = self.code;
                var $1272 = self.val;
                var self = Kind$Parser$text$("for ", $1270, $1271);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1274 = self.idx;
                        var $1275 = self.code;
                        var $1276 = self.err;
                        var $1277 = Parser$Reply$error$($1274, $1275, $1276);
                        var $1273 = $1277;
                        break;
                    case 'Parser.Reply.value':
                        var $1278 = self.idx;
                        var $1279 = self.code;
                        var self = Kind$Parser$name1$($1278, $1279);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1281 = self.idx;
                                var $1282 = self.code;
                                var $1283 = self.err;
                                var $1284 = Parser$Reply$error$($1281, $1282, $1283);
                                var $1280 = $1284;
                                break;
                            case 'Parser.Reply.value':
                                var $1285 = self.idx;
                                var $1286 = self.code;
                                var $1287 = self.val;
                                var self = Kind$Parser$text$("in", $1285, $1286);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1289 = self.idx;
                                        var $1290 = self.code;
                                        var $1291 = self.err;
                                        var $1292 = Parser$Reply$error$($1289, $1290, $1291);
                                        var $1288 = $1292;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1293 = self.idx;
                                        var $1294 = self.code;
                                        var self = Kind$Parser$term$($1293, $1294);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1296 = self.idx;
                                                var $1297 = self.code;
                                                var $1298 = self.err;
                                                var $1299 = Parser$Reply$error$($1296, $1297, $1298);
                                                var $1295 = $1299;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1300 = self.idx;
                                                var $1301 = self.code;
                                                var $1302 = self.val;
                                                var self = Kind$Parser$text$("with ", $1300, $1301);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1304 = self.idx;
                                                        var $1305 = self.code;
                                                        var $1306 = self.err;
                                                        var $1307 = Parser$Reply$error$($1304, $1305, $1306);
                                                        var $1303 = $1307;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1308 = self.idx;
                                                        var $1309 = self.code;
                                                        var self = Kind$Parser$name1$($1308, $1309);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1311 = self.idx;
                                                                var $1312 = self.code;
                                                                var $1313 = self.err;
                                                                var $1314 = Parser$Reply$error$($1311, $1312, $1313);
                                                                var $1310 = $1314;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1315 = self.idx;
                                                                var $1316 = self.code;
                                                                var $1317 = self.val;
                                                                var self = Kind$Parser$text$(":", $1315, $1316);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1319 = self.idx;
                                                                        var $1320 = self.code;
                                                                        var $1321 = self.err;
                                                                        var $1322 = Parser$Reply$error$($1319, $1320, $1321);
                                                                        var $1318 = $1322;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1323 = self.idx;
                                                                        var $1324 = self.code;
                                                                        var self = Kind$Parser$term$($1323, $1324);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1326 = self.idx;
                                                                                var $1327 = self.code;
                                                                                var $1328 = self.err;
                                                                                var $1329 = Parser$Reply$error$($1326, $1327, $1328);
                                                                                var $1325 = $1329;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1330 = self.idx;
                                                                                var $1331 = self.code;
                                                                                var $1332 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1330, $1331);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1334 = self.idx;
                                                                                        var $1335 = self.code;
                                                                                        var $1336 = self.err;
                                                                                        var $1337 = Parser$Reply$error$($1334, $1335, $1336);
                                                                                        var $1333 = $1337;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1338 = self.idx;
                                                                                        var $1339 = self.code;
                                                                                        var self = Kind$Parser$term$($1338, $1339);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1341 = self.idx;
                                                                                                var $1342 = self.code;
                                                                                                var $1343 = self.err;
                                                                                                var $1344 = Parser$Reply$error$($1341, $1342, $1343);
                                                                                                var $1340 = $1344;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1345 = self.idx;
                                                                                                var $1346 = self.code;
                                                                                                var $1347 = self.val;
                                                                                                var self = Kind$Parser$stop$($1272, $1345, $1346);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1349 = self.idx;
                                                                                                        var $1350 = self.code;
                                                                                                        var $1351 = self.err;
                                                                                                        var $1352 = Parser$Reply$error$($1349, $1350, $1351);
                                                                                                        var $1348 = $1352;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1353 = self.idx;
                                                                                                        var $1354 = self.code;
                                                                                                        var $1355 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $1302);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($1317));
                                                                                                        var _lamb$44 = Kind$Term$lam$($1287, (_i$44 => {
                                                                                                            var $1357 = Kind$Term$lam$($1317, (_x$45 => {
                                                                                                                var $1358 = $1332;
                                                                                                                return $1358;
                                                                                                            }));
                                                                                                            return $1357;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($1317, _term$45, (_x$46 => {
                                                                                                            var $1359 = $1347;
                                                                                                            return $1359;
                                                                                                        }));
                                                                                                        var $1356 = Parser$Reply$value$($1353, $1354, Kind$Term$ori$($1355, _term$46));
                                                                                                        var $1348 = $1356;
                                                                                                        break;
                                                                                                };
                                                                                                var $1340 = $1348;
                                                                                                break;
                                                                                        };
                                                                                        var $1333 = $1340;
                                                                                        break;
                                                                                };
                                                                                var $1325 = $1333;
                                                                                break;
                                                                        };
                                                                        var $1318 = $1325;
                                                                        break;
                                                                };
                                                                var $1310 = $1318;
                                                                break;
                                                        };
                                                        var $1303 = $1310;
                                                        break;
                                                };
                                                var $1295 = $1303;
                                                break;
                                        };
                                        var $1288 = $1295;
                                        break;
                                };
                                var $1280 = $1288;
                                break;
                        };
                        var $1273 = $1280;
                        break;
                };
                var $1265 = $1273;
                break;
        };
        return $1265;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1361 = self.idx;
                var $1362 = self.code;
                var $1363 = self.err;
                var $1364 = Parser$Reply$error$($1361, $1362, $1363);
                var $1360 = $1364;
                break;
            case 'Parser.Reply.value':
                var $1365 = self.idx;
                var $1366 = self.code;
                var $1367 = self.val;
                var self = Kind$Parser$text$("let ", $1365, $1366);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1369 = self.idx;
                        var $1370 = self.code;
                        var $1371 = self.err;
                        var $1372 = Parser$Reply$error$($1369, $1370, $1371);
                        var $1368 = $1372;
                        break;
                    case 'Parser.Reply.value':
                        var $1373 = self.idx;
                        var $1374 = self.code;
                        var self = Kind$Parser$name1$($1373, $1374);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1376 = self.idx;
                                var $1377 = self.code;
                                var $1378 = self.err;
                                var $1379 = Parser$Reply$error$($1376, $1377, $1378);
                                var $1375 = $1379;
                                break;
                            case 'Parser.Reply.value':
                                var $1380 = self.idx;
                                var $1381 = self.code;
                                var $1382 = self.val;
                                var self = Kind$Parser$text$("=", $1380, $1381);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1384 = self.idx;
                                        var $1385 = self.code;
                                        var $1386 = self.err;
                                        var $1387 = Parser$Reply$error$($1384, $1385, $1386);
                                        var $1383 = $1387;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1388 = self.idx;
                                        var $1389 = self.code;
                                        var self = Kind$Parser$text$("while ", $1388, $1389);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1391 = self.idx;
                                                var $1392 = self.code;
                                                var $1393 = self.err;
                                                var $1394 = Parser$Reply$error$($1391, $1392, $1393);
                                                var $1390 = $1394;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1395 = self.idx;
                                                var $1396 = self.code;
                                                var self = Kind$Parser$term$($1395, $1396);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1398 = self.idx;
                                                        var $1399 = self.code;
                                                        var $1400 = self.err;
                                                        var $1401 = Parser$Reply$error$($1398, $1399, $1400);
                                                        var $1397 = $1401;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1402 = self.idx;
                                                        var $1403 = self.code;
                                                        var $1404 = self.val;
                                                        var self = Kind$Parser$text$(":", $1402, $1403);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1406 = self.idx;
                                                                var $1407 = self.code;
                                                                var $1408 = self.err;
                                                                var $1409 = Parser$Reply$error$($1406, $1407, $1408);
                                                                var $1405 = $1409;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1410 = self.idx;
                                                                var $1411 = self.code;
                                                                var self = Kind$Parser$term$($1410, $1411);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1413 = self.idx;
                                                                        var $1414 = self.code;
                                                                        var $1415 = self.err;
                                                                        var $1416 = Parser$Reply$error$($1413, $1414, $1415);
                                                                        var $1412 = $1416;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1417 = self.idx;
                                                                        var $1418 = self.code;
                                                                        var $1419 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1417, $1418);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1421 = self.idx;
                                                                                var $1422 = self.code;
                                                                                var $1423 = self.err;
                                                                                var $1424 = Parser$Reply$error$($1421, $1422, $1423);
                                                                                var $1420 = $1424;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1425 = self.idx;
                                                                                var $1426 = self.code;
                                                                                var self = Kind$Parser$term$($1425, $1426);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1428 = self.idx;
                                                                                        var $1429 = self.code;
                                                                                        var $1430 = self.err;
                                                                                        var $1431 = Parser$Reply$error$($1428, $1429, $1430);
                                                                                        var $1427 = $1431;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1432 = self.idx;
                                                                                        var $1433 = self.code;
                                                                                        var $1434 = self.val;
                                                                                        var self = Kind$Parser$stop$($1367, $1432, $1433);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1436 = self.idx;
                                                                                                var $1437 = self.code;
                                                                                                var $1438 = self.err;
                                                                                                var $1439 = Parser$Reply$error$($1436, $1437, $1438);
                                                                                                var $1435 = $1439;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1440 = self.idx;
                                                                                                var $1441 = self.code;
                                                                                                var $1442 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($1382));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($1382, (_s$39 => {
                                                                                                    var $1444 = $1404;
                                                                                                    return $1444;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($1382, (_s$40 => {
                                                                                                    var $1445 = $1419;
                                                                                                    return $1445;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($1382, _term$40, (_x$41 => {
                                                                                                    var $1446 = $1434;
                                                                                                    return $1446;
                                                                                                }));
                                                                                                var $1443 = Parser$Reply$value$($1440, $1441, Kind$Term$ori$($1442, _term$41));
                                                                                                var $1435 = $1443;
                                                                                                break;
                                                                                        };
                                                                                        var $1427 = $1435;
                                                                                        break;
                                                                                };
                                                                                var $1420 = $1427;
                                                                                break;
                                                                        };
                                                                        var $1412 = $1420;
                                                                        break;
                                                                };
                                                                var $1405 = $1412;
                                                                break;
                                                        };
                                                        var $1397 = $1405;
                                                        break;
                                                };
                                                var $1390 = $1397;
                                                break;
                                        };
                                        var $1383 = $1390;
                                        break;
                                };
                                var $1375 = $1383;
                                break;
                        };
                        var $1368 = $1375;
                        break;
                };
                var $1360 = $1368;
                break;
        };
        return $1360;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1448 = self.idx;
                var $1449 = self.code;
                var $1450 = self.err;
                var $1451 = Parser$Reply$error$($1448, $1449, $1450);
                var $1447 = $1451;
                break;
            case 'Parser.Reply.value':
                var $1452 = self.idx;
                var $1453 = self.code;
                var $1454 = self.val;
                var self = Kind$Parser$text$("while ", $1452, $1453);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1456 = self.idx;
                        var $1457 = self.code;
                        var $1458 = self.err;
                        var $1459 = Parser$Reply$error$($1456, $1457, $1458);
                        var $1455 = $1459;
                        break;
                    case 'Parser.Reply.value':
                        var $1460 = self.idx;
                        var $1461 = self.code;
                        var self = Kind$Parser$term$($1460, $1461);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1463 = self.idx;
                                var $1464 = self.code;
                                var $1465 = self.err;
                                var $1466 = Parser$Reply$error$($1463, $1464, $1465);
                                var $1462 = $1466;
                                break;
                            case 'Parser.Reply.value':
                                var $1467 = self.idx;
                                var $1468 = self.code;
                                var $1469 = self.val;
                                var self = Kind$Parser$text$("with ", $1467, $1468);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1471 = self.idx;
                                        var $1472 = self.code;
                                        var $1473 = self.err;
                                        var $1474 = Parser$Reply$error$($1471, $1472, $1473);
                                        var $1470 = $1474;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1475 = self.idx;
                                        var $1476 = self.code;
                                        var self = Kind$Parser$name1$($1475, $1476);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1478 = self.idx;
                                                var $1479 = self.code;
                                                var $1480 = self.err;
                                                var $1481 = Parser$Reply$error$($1478, $1479, $1480);
                                                var $1477 = $1481;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1482 = self.idx;
                                                var $1483 = self.code;
                                                var $1484 = self.val;
                                                var self = Kind$Parser$text$(":", $1482, $1483);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1486 = self.idx;
                                                        var $1487 = self.code;
                                                        var $1488 = self.err;
                                                        var $1489 = Parser$Reply$error$($1486, $1487, $1488);
                                                        var $1485 = $1489;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1490 = self.idx;
                                                        var $1491 = self.code;
                                                        var self = Kind$Parser$term$($1490, $1491);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1493 = self.idx;
                                                                var $1494 = self.code;
                                                                var $1495 = self.err;
                                                                var $1496 = Parser$Reply$error$($1493, $1494, $1495);
                                                                var $1492 = $1496;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1497 = self.idx;
                                                                var $1498 = self.code;
                                                                var $1499 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1497, $1498);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1501 = self.idx;
                                                                        var $1502 = self.code;
                                                                        var $1503 = self.err;
                                                                        var $1504 = Parser$Reply$error$($1501, $1502, $1503);
                                                                        var $1500 = $1504;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1505 = self.idx;
                                                                        var $1506 = self.code;
                                                                        var self = Kind$Parser$term$($1505, $1506);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1508 = self.idx;
                                                                                var $1509 = self.code;
                                                                                var $1510 = self.err;
                                                                                var $1511 = Parser$Reply$error$($1508, $1509, $1510);
                                                                                var $1507 = $1511;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1512 = self.idx;
                                                                                var $1513 = self.code;
                                                                                var $1514 = self.val;
                                                                                var self = Kind$Parser$stop$($1454, $1512, $1513);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1516 = self.idx;
                                                                                        var $1517 = self.code;
                                                                                        var $1518 = self.err;
                                                                                        var $1519 = Parser$Reply$error$($1516, $1517, $1518);
                                                                                        var $1515 = $1519;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1520 = self.idx;
                                                                                        var $1521 = self.code;
                                                                                        var $1522 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($1484));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($1484, (_s$36 => {
                                                                                            var $1524 = $1469;
                                                                                            return $1524;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($1484, (_s$37 => {
                                                                                            var $1525 = $1499;
                                                                                            return $1525;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($1484, _term$37, (_x$38 => {
                                                                                            var $1526 = $1514;
                                                                                            return $1526;
                                                                                        }));
                                                                                        var $1523 = Parser$Reply$value$($1520, $1521, Kind$Term$ori$($1522, _term$38));
                                                                                        var $1515 = $1523;
                                                                                        break;
                                                                                };
                                                                                var $1507 = $1515;
                                                                                break;
                                                                        };
                                                                        var $1500 = $1507;
                                                                        break;
                                                                };
                                                                var $1492 = $1500;
                                                                break;
                                                        };
                                                        var $1485 = $1492;
                                                        break;
                                                };
                                                var $1477 = $1485;
                                                break;
                                        };
                                        var $1470 = $1477;
                                        break;
                                };
                                var $1462 = $1470;
                                break;
                        };
                        var $1455 = $1462;
                        break;
                };
                var $1447 = $1455;
                break;
        };
        return $1447;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1528 = self.idx;
                var $1529 = self.code;
                var $1530 = self.err;
                var $1531 = Parser$Reply$error$($1528, $1529, $1530);
                var $1527 = $1531;
                break;
            case 'Parser.Reply.value':
                var $1532 = self.idx;
                var $1533 = self.code;
                var $1534 = self.val;
                var self = Kind$Parser$text$("let ", $1532, $1533);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1536 = self.idx;
                        var $1537 = self.code;
                        var $1538 = self.err;
                        var $1539 = Parser$Reply$error$($1536, $1537, $1538);
                        var $1535 = $1539;
                        break;
                    case 'Parser.Reply.value':
                        var $1540 = self.idx;
                        var $1541 = self.code;
                        var self = Kind$Parser$name$($1540, $1541);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1543 = self.idx;
                                var $1544 = self.code;
                                var $1545 = self.err;
                                var $1546 = Parser$Reply$error$($1543, $1544, $1545);
                                var $1542 = $1546;
                                break;
                            case 'Parser.Reply.value':
                                var $1547 = self.idx;
                                var $1548 = self.code;
                                var $1549 = self.val;
                                var self = Kind$Parser$text$("=", $1547, $1548);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1551 = self.idx;
                                        var $1552 = self.code;
                                        var $1553 = self.err;
                                        var $1554 = Parser$Reply$error$($1551, $1552, $1553);
                                        var $1550 = $1554;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1555 = self.idx;
                                        var $1556 = self.code;
                                        var self = Kind$Parser$term$($1555, $1556);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1558 = self.idx;
                                                var $1559 = self.code;
                                                var $1560 = self.err;
                                                var $1561 = Parser$Reply$error$($1558, $1559, $1560);
                                                var $1557 = $1561;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1562 = self.idx;
                                                var $1563 = self.code;
                                                var $1564 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1562, $1563);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1566 = self.idx;
                                                        var $1567 = self.code;
                                                        var $1568 = self.err;
                                                        var $1569 = Parser$Reply$error$($1566, $1567, $1568);
                                                        var $1565 = $1569;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1570 = self.idx;
                                                        var $1571 = self.code;
                                                        var self = Kind$Parser$term$($1570, $1571);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1573 = self.idx;
                                                                var $1574 = self.code;
                                                                var $1575 = self.err;
                                                                var $1576 = Parser$Reply$error$($1573, $1574, $1575);
                                                                var $1572 = $1576;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1577 = self.idx;
                                                                var $1578 = self.code;
                                                                var $1579 = self.val;
                                                                var self = Kind$Parser$stop$($1534, $1577, $1578);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1581 = self.idx;
                                                                        var $1582 = self.code;
                                                                        var $1583 = self.err;
                                                                        var $1584 = Parser$Reply$error$($1581, $1582, $1583);
                                                                        var $1580 = $1584;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1585 = self.idx;
                                                                        var $1586 = self.code;
                                                                        var $1587 = self.val;
                                                                        var $1588 = Parser$Reply$value$($1585, $1586, Kind$Term$ori$($1587, Kind$Term$let$($1549, $1564, (_x$27 => {
                                                                            var $1589 = $1579;
                                                                            return $1589;
                                                                        }))));
                                                                        var $1580 = $1588;
                                                                        break;
                                                                };
                                                                var $1572 = $1580;
                                                                break;
                                                        };
                                                        var $1565 = $1572;
                                                        break;
                                                };
                                                var $1557 = $1565;
                                                break;
                                        };
                                        var $1550 = $1557;
                                        break;
                                };
                                var $1542 = $1550;
                                break;
                        };
                        var $1535 = $1542;
                        break;
                };
                var $1527 = $1535;
                break;
        };
        return $1527;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1591 = self.idx;
                var $1592 = self.code;
                var $1593 = self.err;
                var $1594 = Parser$Reply$error$($1591, $1592, $1593);
                var $1590 = $1594;
                break;
            case 'Parser.Reply.value':
                var $1595 = self.idx;
                var $1596 = self.code;
                var $1597 = self.val;
                var self = Kind$Parser$name$($1595, $1596);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1599 = self.idx;
                        var $1600 = self.code;
                        var $1601 = self.err;
                        var $1602 = Parser$Reply$error$($1599, $1600, $1601);
                        var $1598 = $1602;
                        break;
                    case 'Parser.Reply.value':
                        var $1603 = self.idx;
                        var $1604 = self.code;
                        var $1605 = self.val;
                        var self = Kind$Parser$text$("= ", $1603, $1604);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1607 = self.idx;
                                var $1608 = self.code;
                                var $1609 = self.err;
                                var $1610 = Parser$Reply$error$($1607, $1608, $1609);
                                var $1606 = $1610;
                                break;
                            case 'Parser.Reply.value':
                                var $1611 = self.idx;
                                var $1612 = self.code;
                                var self = Kind$Parser$term$($1611, $1612);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1614 = self.idx;
                                        var $1615 = self.code;
                                        var $1616 = self.err;
                                        var $1617 = Parser$Reply$error$($1614, $1615, $1616);
                                        var $1613 = $1617;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1618 = self.idx;
                                        var $1619 = self.code;
                                        var $1620 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1618, $1619);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1622 = self.idx;
                                                var $1623 = self.code;
                                                var $1624 = self.err;
                                                var $1625 = Parser$Reply$error$($1622, $1623, $1624);
                                                var $1621 = $1625;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1626 = self.idx;
                                                var $1627 = self.code;
                                                var self = Kind$Parser$term$($1626, $1627);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1629 = self.idx;
                                                        var $1630 = self.code;
                                                        var $1631 = self.err;
                                                        var $1632 = Parser$Reply$error$($1629, $1630, $1631);
                                                        var $1628 = $1632;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1633 = self.idx;
                                                        var $1634 = self.code;
                                                        var $1635 = self.val;
                                                        var self = Kind$Parser$stop$($1597, $1633, $1634);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1637 = self.idx;
                                                                var $1638 = self.code;
                                                                var $1639 = self.err;
                                                                var $1640 = Parser$Reply$error$($1637, $1638, $1639);
                                                                var $1636 = $1640;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1641 = self.idx;
                                                                var $1642 = self.code;
                                                                var $1643 = self.val;
                                                                var $1644 = Parser$Reply$value$($1641, $1642, Kind$Term$ori$($1643, Kind$Term$let$($1605, $1620, (_x$24 => {
                                                                    var $1645 = $1635;
                                                                    return $1645;
                                                                }))));
                                                                var $1636 = $1644;
                                                                break;
                                                        };
                                                        var $1628 = $1636;
                                                        break;
                                                };
                                                var $1621 = $1628;
                                                break;
                                        };
                                        var $1613 = $1621;
                                        break;
                                };
                                var $1606 = $1613;
                                break;
                        };
                        var $1598 = $1606;
                        break;
                };
                var $1590 = $1598;
                break;
        };
        return $1590;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1647 = self.idx;
                var $1648 = self.code;
                var $1649 = self.err;
                var $1650 = Parser$Reply$error$($1647, $1648, $1649);
                var $1646 = $1650;
                break;
            case 'Parser.Reply.value':
                var $1651 = self.idx;
                var $1652 = self.code;
                var $1653 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $1651, $1652);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1655 = self.idx;
                        var $1656 = self.code;
                        var $1657 = self.err;
                        var $1658 = Parser$Reply$error$($1655, $1656, $1657);
                        var $1654 = $1658;
                        break;
                    case 'Parser.Reply.value':
                        var $1659 = self.idx;
                        var $1660 = self.code;
                        var self = Kind$Parser$text$("{", $1659, $1660);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1662 = self.idx;
                                var $1663 = self.code;
                                var $1664 = self.err;
                                var $1665 = Parser$Reply$error$($1662, $1663, $1664);
                                var $1661 = $1665;
                                break;
                            case 'Parser.Reply.value':
                                var $1666 = self.idx;
                                var $1667 = self.code;
                                var self = Kind$Parser$name$($1666, $1667);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1669 = self.idx;
                                        var $1670 = self.code;
                                        var $1671 = self.err;
                                        var $1672 = Parser$Reply$error$($1669, $1670, $1671);
                                        var $1668 = $1672;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1673 = self.idx;
                                        var $1674 = self.code;
                                        var $1675 = self.val;
                                        var self = Kind$Parser$text$(",", $1673, $1674);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1677 = self.idx;
                                                var $1678 = self.code;
                                                var $1679 = self.err;
                                                var $1680 = Parser$Reply$error$($1677, $1678, $1679);
                                                var $1676 = $1680;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1681 = self.idx;
                                                var $1682 = self.code;
                                                var self = Kind$Parser$name$($1681, $1682);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1684 = self.idx;
                                                        var $1685 = self.code;
                                                        var $1686 = self.err;
                                                        var $1687 = Parser$Reply$error$($1684, $1685, $1686);
                                                        var $1683 = $1687;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1688 = self.idx;
                                                        var $1689 = self.code;
                                                        var $1690 = self.val;
                                                        var self = Kind$Parser$text$("}", $1688, $1689);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1692 = self.idx;
                                                                var $1693 = self.code;
                                                                var $1694 = self.err;
                                                                var $1695 = Parser$Reply$error$($1692, $1693, $1694);
                                                                var $1691 = $1695;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1696 = self.idx;
                                                                var $1697 = self.code;
                                                                var self = Kind$Parser$text$("=", $1696, $1697);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1699 = self.idx;
                                                                        var $1700 = self.code;
                                                                        var $1701 = self.err;
                                                                        var $1702 = Parser$Reply$error$($1699, $1700, $1701);
                                                                        var $1698 = $1702;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1703 = self.idx;
                                                                        var $1704 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $1703, $1704);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1706 = self.idx;
                                                                                var $1707 = self.code;
                                                                                var $1708 = self.err;
                                                                                var $1709 = Parser$Reply$error$($1706, $1707, $1708);
                                                                                var $1705 = $1709;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1710 = self.idx;
                                                                                var $1711 = self.code;
                                                                                var self = Kind$Parser$term$($1710, $1711);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1713 = self.idx;
                                                                                        var $1714 = self.code;
                                                                                        var $1715 = self.err;
                                                                                        var $1716 = Parser$Reply$error$($1713, $1714, $1715);
                                                                                        var $1712 = $1716;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1717 = self.idx;
                                                                                        var $1718 = self.code;
                                                                                        var $1719 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1717, $1718);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1721 = self.idx;
                                                                                                var $1722 = self.code;
                                                                                                var $1723 = self.err;
                                                                                                var $1724 = Parser$Reply$error$($1721, $1722, $1723);
                                                                                                var $1720 = $1724;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1725 = self.idx;
                                                                                                var $1726 = self.code;
                                                                                                var self = Kind$Parser$term$($1725, $1726);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1728 = self.idx;
                                                                                                        var $1729 = self.code;
                                                                                                        var $1730 = self.err;
                                                                                                        var $1731 = Parser$Reply$error$($1728, $1729, $1730);
                                                                                                        var $1727 = $1731;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1732 = self.idx;
                                                                                                        var $1733 = self.code;
                                                                                                        var $1734 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1732, $1733);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1736 = self.idx;
                                                                                                                var $1737 = self.code;
                                                                                                                var $1738 = self.err;
                                                                                                                var $1739 = Parser$Reply$error$($1736, $1737, $1738);
                                                                                                                var $1735 = $1739;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1740 = self.idx;
                                                                                                                var $1741 = self.code;
                                                                                                                var self = Kind$Parser$term$($1740, $1741);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1743 = self.idx;
                                                                                                                        var $1744 = self.code;
                                                                                                                        var $1745 = self.err;
                                                                                                                        var $1746 = Parser$Reply$error$($1743, $1744, $1745);
                                                                                                                        var $1742 = $1746;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1747 = self.idx;
                                                                                                                        var $1748 = self.code;
                                                                                                                        var $1749 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1653, $1747, $1748);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1751 = self.idx;
                                                                                                                                var $1752 = self.code;
                                                                                                                                var $1753 = self.err;
                                                                                                                                var $1754 = Parser$Reply$error$($1751, $1752, $1753);
                                                                                                                                var $1750 = $1754;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1755 = self.idx;
                                                                                                                                var $1756 = self.code;
                                                                                                                                var $1757 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("x", (_x$48 => {
                                                                                                                                    var $1759 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $1759;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($1675));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($1690));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $1760 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($1675, (_x$58 => {
                                                                                                                                        var $1761 = Kind$Term$lam$($1690, (_y$59 => {
                                                                                                                                            var $1762 = $1719;
                                                                                                                                            return $1762;
                                                                                                                                        }));
                                                                                                                                        return $1761;
                                                                                                                                    })));
                                                                                                                                    return $1760;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $1763 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($1675, (_x$59 => {
                                                                                                                                        var $1764 = Kind$Term$lam$($1690, (_y$60 => {
                                                                                                                                            var $1765 = $1734;
                                                                                                                                            return $1765;
                                                                                                                                        }));
                                                                                                                                        return $1764;
                                                                                                                                    })));
                                                                                                                                    return $1763;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($1675, (_x$59 => {
                                                                                                                                    var $1766 = Kind$Term$lam$($1690, (_y$60 => {
                                                                                                                                        var $1767 = $1749;
                                                                                                                                        return $1767;
                                                                                                                                    }));
                                                                                                                                    return $1766;
                                                                                                                                })));
                                                                                                                                var $1758 = Parser$Reply$value$($1755, $1756, Kind$Term$ori$($1757, _term$59));
                                                                                                                                var $1750 = $1758;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1742 = $1750;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1735 = $1742;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1727 = $1735;
                                                                                                        break;
                                                                                                };
                                                                                                var $1720 = $1727;
                                                                                                break;
                                                                                        };
                                                                                        var $1712 = $1720;
                                                                                        break;
                                                                                };
                                                                                var $1705 = $1712;
                                                                                break;
                                                                        };
                                                                        var $1698 = $1705;
                                                                        break;
                                                                };
                                                                var $1691 = $1698;
                                                                break;
                                                        };
                                                        var $1683 = $1691;
                                                        break;
                                                };
                                                var $1676 = $1683;
                                                break;
                                        };
                                        var $1668 = $1676;
                                        break;
                                };
                                var $1661 = $1668;
                                break;
                        };
                        var $1654 = $1661;
                        break;
                };
                var $1646 = $1654;
                break;
        };
        return $1646;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1769 = self.idx;
                var $1770 = self.code;
                var $1771 = self.err;
                var $1772 = Parser$Reply$error$($1769, $1770, $1771);
                var $1768 = $1772;
                break;
            case 'Parser.Reply.value':
                var $1773 = self.idx;
                var $1774 = self.code;
                var $1775 = self.val;
                var self = Kind$Parser$text$("while ", $1773, $1774);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1777 = self.idx;
                        var $1778 = self.code;
                        var $1779 = self.err;
                        var $1780 = Parser$Reply$error$($1777, $1778, $1779);
                        var $1776 = $1780;
                        break;
                    case 'Parser.Reply.value':
                        var $1781 = self.idx;
                        var $1782 = self.code;
                        var self = Kind$Parser$term$($1781, $1782);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1784 = self.idx;
                                var $1785 = self.code;
                                var $1786 = self.err;
                                var $1787 = Parser$Reply$error$($1784, $1785, $1786);
                                var $1783 = $1787;
                                break;
                            case 'Parser.Reply.value':
                                var $1788 = self.idx;
                                var $1789 = self.code;
                                var $1790 = self.val;
                                var self = Kind$Parser$text$("with ", $1788, $1789);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1792 = self.idx;
                                        var $1793 = self.code;
                                        var $1794 = self.err;
                                        var $1795 = Parser$Reply$error$($1792, $1793, $1794);
                                        var $1791 = $1795;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1796 = self.idx;
                                        var $1797 = self.code;
                                        var self = Kind$Parser$text$("{", $1796, $1797);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1799 = self.idx;
                                                var $1800 = self.code;
                                                var $1801 = self.err;
                                                var $1802 = Parser$Reply$error$($1799, $1800, $1801);
                                                var $1798 = $1802;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1803 = self.idx;
                                                var $1804 = self.code;
                                                var self = Kind$Parser$name$($1803, $1804);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1806 = self.idx;
                                                        var $1807 = self.code;
                                                        var $1808 = self.err;
                                                        var $1809 = Parser$Reply$error$($1806, $1807, $1808);
                                                        var $1805 = $1809;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1810 = self.idx;
                                                        var $1811 = self.code;
                                                        var $1812 = self.val;
                                                        var self = Kind$Parser$text$(",", $1810, $1811);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1814 = self.idx;
                                                                var $1815 = self.code;
                                                                var $1816 = self.err;
                                                                var $1817 = Parser$Reply$error$($1814, $1815, $1816);
                                                                var $1813 = $1817;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1818 = self.idx;
                                                                var $1819 = self.code;
                                                                var self = Kind$Parser$name$($1818, $1819);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1821 = self.idx;
                                                                        var $1822 = self.code;
                                                                        var $1823 = self.err;
                                                                        var $1824 = Parser$Reply$error$($1821, $1822, $1823);
                                                                        var $1820 = $1824;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1825 = self.idx;
                                                                        var $1826 = self.code;
                                                                        var $1827 = self.val;
                                                                        var self = Kind$Parser$text$("}", $1825, $1826);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1829 = self.idx;
                                                                                var $1830 = self.code;
                                                                                var $1831 = self.err;
                                                                                var $1832 = Parser$Reply$error$($1829, $1830, $1831);
                                                                                var $1828 = $1832;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1833 = self.idx;
                                                                                var $1834 = self.code;
                                                                                var self = Kind$Parser$text$(":", $1833, $1834);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1836 = self.idx;
                                                                                        var $1837 = self.code;
                                                                                        var $1838 = self.err;
                                                                                        var $1839 = Parser$Reply$error$($1836, $1837, $1838);
                                                                                        var $1835 = $1839;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1840 = self.idx;
                                                                                        var $1841 = self.code;
                                                                                        var self = Kind$Parser$term$($1840, $1841);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1843 = self.idx;
                                                                                                var $1844 = self.code;
                                                                                                var $1845 = self.err;
                                                                                                var $1846 = Parser$Reply$error$($1843, $1844, $1845);
                                                                                                var $1842 = $1846;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1847 = self.idx;
                                                                                                var $1848 = self.code;
                                                                                                var $1849 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1847, $1848);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1851 = self.idx;
                                                                                                        var $1852 = self.code;
                                                                                                        var $1853 = self.err;
                                                                                                        var $1854 = Parser$Reply$error$($1851, $1852, $1853);
                                                                                                        var $1850 = $1854;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1855 = self.idx;
                                                                                                        var $1856 = self.code;
                                                                                                        var self = Kind$Parser$term$($1855, $1856);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1858 = self.idx;
                                                                                                                var $1859 = self.code;
                                                                                                                var $1860 = self.err;
                                                                                                                var $1861 = Parser$Reply$error$($1858, $1859, $1860);
                                                                                                                var $1857 = $1861;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1862 = self.idx;
                                                                                                                var $1863 = self.code;
                                                                                                                var $1864 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1775, $1862, $1863);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1866 = self.idx;
                                                                                                                        var $1867 = self.code;
                                                                                                                        var $1868 = self.err;
                                                                                                                        var $1869 = Parser$Reply$error$($1866, $1867, $1868);
                                                                                                                        var $1865 = $1869;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1870 = self.idx;
                                                                                                                        var $1871 = self.code;
                                                                                                                        var $1872 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("x", (_x$45 => {
                                                                                                                            var $1874 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $1874;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($1812));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($1827));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $1875 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($1812, (_x$55 => {
                                                                                                                                var $1876 = Kind$Term$lam$($1827, (_y$56 => {
                                                                                                                                    var $1877 = $1790;
                                                                                                                                    return $1877;
                                                                                                                                }));
                                                                                                                                return $1876;
                                                                                                                            })));
                                                                                                                            return $1875;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $1878 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($1812, (_x$56 => {
                                                                                                                                var $1879 = Kind$Term$lam$($1827, (_y$57 => {
                                                                                                                                    var $1880 = $1849;
                                                                                                                                    return $1880;
                                                                                                                                }));
                                                                                                                                return $1879;
                                                                                                                            })));
                                                                                                                            return $1878;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($1812, (_x$56 => {
                                                                                                                            var $1881 = Kind$Term$lam$($1827, (_y$57 => {
                                                                                                                                var $1882 = $1864;
                                                                                                                                return $1882;
                                                                                                                            }));
                                                                                                                            return $1881;
                                                                                                                        })));
                                                                                                                        var $1873 = Parser$Reply$value$($1870, $1871, Kind$Term$ori$($1872, _term$56));
                                                                                                                        var $1865 = $1873;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1857 = $1865;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1850 = $1857;
                                                                                                        break;
                                                                                                };
                                                                                                var $1842 = $1850;
                                                                                                break;
                                                                                        };
                                                                                        var $1835 = $1842;
                                                                                        break;
                                                                                };
                                                                                var $1828 = $1835;
                                                                                break;
                                                                        };
                                                                        var $1820 = $1828;
                                                                        break;
                                                                };
                                                                var $1813 = $1820;
                                                                break;
                                                        };
                                                        var $1805 = $1813;
                                                        break;
                                                };
                                                var $1798 = $1805;
                                                break;
                                        };
                                        var $1791 = $1798;
                                        break;
                                };
                                var $1783 = $1791;
                                break;
                        };
                        var $1776 = $1783;
                        break;
                };
                var $1768 = $1776;
                break;
        };
        return $1768;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1884 = self.idx;
                var $1885 = self.code;
                var $1886 = self.err;
                var $1887 = Parser$Reply$error$($1884, $1885, $1886);
                var $1883 = $1887;
                break;
            case 'Parser.Reply.value':
                var $1888 = self.idx;
                var $1889 = self.code;
                var $1890 = self.val;
                var self = Kind$Parser$text$("let ", $1888, $1889);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1892 = self.idx;
                        var $1893 = self.code;
                        var $1894 = self.err;
                        var $1895 = Parser$Reply$error$($1892, $1893, $1894);
                        var $1891 = $1895;
                        break;
                    case 'Parser.Reply.value':
                        var $1896 = self.idx;
                        var $1897 = self.code;
                        var self = Kind$Parser$text$("{", $1896, $1897);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1899 = self.idx;
                                var $1900 = self.code;
                                var $1901 = self.err;
                                var $1902 = Parser$Reply$error$($1899, $1900, $1901);
                                var $1898 = $1902;
                                break;
                            case 'Parser.Reply.value':
                                var $1903 = self.idx;
                                var $1904 = self.code;
                                var self = Kind$Parser$name$($1903, $1904);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1906 = self.idx;
                                        var $1907 = self.code;
                                        var $1908 = self.err;
                                        var $1909 = Parser$Reply$error$($1906, $1907, $1908);
                                        var $1905 = $1909;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1910 = self.idx;
                                        var $1911 = self.code;
                                        var $1912 = self.val;
                                        var self = Kind$Parser$text$(",", $1910, $1911);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1914 = self.idx;
                                                var $1915 = self.code;
                                                var $1916 = self.err;
                                                var $1917 = Parser$Reply$error$($1914, $1915, $1916);
                                                var $1913 = $1917;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1918 = self.idx;
                                                var $1919 = self.code;
                                                var self = Kind$Parser$name$($1918, $1919);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1921 = self.idx;
                                                        var $1922 = self.code;
                                                        var $1923 = self.err;
                                                        var $1924 = Parser$Reply$error$($1921, $1922, $1923);
                                                        var $1920 = $1924;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1925 = self.idx;
                                                        var $1926 = self.code;
                                                        var $1927 = self.val;
                                                        var self = Kind$Parser$text$("}", $1925, $1926);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1929 = self.idx;
                                                                var $1930 = self.code;
                                                                var $1931 = self.err;
                                                                var $1932 = Parser$Reply$error$($1929, $1930, $1931);
                                                                var $1928 = $1932;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1933 = self.idx;
                                                                var $1934 = self.code;
                                                                var self = Kind$Parser$text$("=", $1933, $1934);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1936 = self.idx;
                                                                        var $1937 = self.code;
                                                                        var $1938 = self.err;
                                                                        var $1939 = Parser$Reply$error$($1936, $1937, $1938);
                                                                        var $1935 = $1939;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1940 = self.idx;
                                                                        var $1941 = self.code;
                                                                        var self = Kind$Parser$term$($1940, $1941);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1943 = self.idx;
                                                                                var $1944 = self.code;
                                                                                var $1945 = self.err;
                                                                                var $1946 = Parser$Reply$error$($1943, $1944, $1945);
                                                                                var $1942 = $1946;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1947 = self.idx;
                                                                                var $1948 = self.code;
                                                                                var $1949 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1947, $1948);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1951 = self.idx;
                                                                                        var $1952 = self.code;
                                                                                        var $1953 = self.err;
                                                                                        var $1954 = Parser$Reply$error$($1951, $1952, $1953);
                                                                                        var $1950 = $1954;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1955 = self.idx;
                                                                                        var $1956 = self.code;
                                                                                        var self = Kind$Parser$term$($1955, $1956);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1958 = self.idx;
                                                                                                var $1959 = self.code;
                                                                                                var $1960 = self.err;
                                                                                                var $1961 = Parser$Reply$error$($1958, $1959, $1960);
                                                                                                var $1957 = $1961;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1962 = self.idx;
                                                                                                var $1963 = self.code;
                                                                                                var $1964 = self.val;
                                                                                                var self = Kind$Parser$stop$($1890, $1962, $1963);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1966 = self.idx;
                                                                                                        var $1967 = self.code;
                                                                                                        var $1968 = self.err;
                                                                                                        var $1969 = Parser$Reply$error$($1966, $1967, $1968);
                                                                                                        var $1965 = $1969;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1970 = self.idx;
                                                                                                        var $1971 = self.code;
                                                                                                        var $1972 = self.val;
                                                                                                        var _term$39 = $1949;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("x", (_x$40 => {
                                                                                                            var $1974 = Kind$Term$hol$(Bits$e);
                                                                                                            return $1974;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($1912, (_x$41 => {
                                                                                                            var $1975 = Kind$Term$lam$($1927, (_y$42 => {
                                                                                                                var $1976 = $1964;
                                                                                                                return $1976;
                                                                                                            }));
                                                                                                            return $1975;
                                                                                                        })));
                                                                                                        var $1973 = Parser$Reply$value$($1970, $1971, Kind$Term$ori$($1972, _term$41));
                                                                                                        var $1965 = $1973;
                                                                                                        break;
                                                                                                };
                                                                                                var $1957 = $1965;
                                                                                                break;
                                                                                        };
                                                                                        var $1950 = $1957;
                                                                                        break;
                                                                                };
                                                                                var $1942 = $1950;
                                                                                break;
                                                                        };
                                                                        var $1935 = $1942;
                                                                        break;
                                                                };
                                                                var $1928 = $1935;
                                                                break;
                                                        };
                                                        var $1920 = $1928;
                                                        break;
                                                };
                                                var $1913 = $1920;
                                                break;
                                        };
                                        var $1905 = $1913;
                                        break;
                                };
                                var $1898 = $1905;
                                break;
                        };
                        var $1891 = $1898;
                        break;
                };
                var $1883 = $1891;
                break;
        };
        return $1883;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1978 = self.idx;
                var $1979 = self.code;
                var $1980 = self.err;
                var $1981 = Parser$Reply$error$($1978, $1979, $1980);
                var $1977 = $1981;
                break;
            case 'Parser.Reply.value':
                var $1982 = self.idx;
                var $1983 = self.code;
                var $1984 = self.val;
                var self = Kind$Parser$text$("{", $1982, $1983);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1986 = self.idx;
                        var $1987 = self.code;
                        var $1988 = self.err;
                        var $1989 = Parser$Reply$error$($1986, $1987, $1988);
                        var $1985 = $1989;
                        break;
                    case 'Parser.Reply.value':
                        var $1990 = self.idx;
                        var $1991 = self.code;
                        var self = Kind$Parser$name$($1990, $1991);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1993 = self.idx;
                                var $1994 = self.code;
                                var $1995 = self.err;
                                var $1996 = Parser$Reply$error$($1993, $1994, $1995);
                                var $1992 = $1996;
                                break;
                            case 'Parser.Reply.value':
                                var $1997 = self.idx;
                                var $1998 = self.code;
                                var $1999 = self.val;
                                var self = Kind$Parser$text$(",", $1997, $1998);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2001 = self.idx;
                                        var $2002 = self.code;
                                        var $2003 = self.err;
                                        var $2004 = Parser$Reply$error$($2001, $2002, $2003);
                                        var $2000 = $2004;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2005 = self.idx;
                                        var $2006 = self.code;
                                        var self = Kind$Parser$name$($2005, $2006);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2008 = self.idx;
                                                var $2009 = self.code;
                                                var $2010 = self.err;
                                                var $2011 = Parser$Reply$error$($2008, $2009, $2010);
                                                var $2007 = $2011;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2012 = self.idx;
                                                var $2013 = self.code;
                                                var $2014 = self.val;
                                                var self = Kind$Parser$text$("}", $2012, $2013);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2016 = self.idx;
                                                        var $2017 = self.code;
                                                        var $2018 = self.err;
                                                        var $2019 = Parser$Reply$error$($2016, $2017, $2018);
                                                        var $2015 = $2019;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2020 = self.idx;
                                                        var $2021 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2020, $2021);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2023 = self.idx;
                                                                var $2024 = self.code;
                                                                var $2025 = self.err;
                                                                var $2026 = Parser$Reply$error$($2023, $2024, $2025);
                                                                var $2022 = $2026;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2027 = self.idx;
                                                                var $2028 = self.code;
                                                                var self = Kind$Parser$term$($2027, $2028);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2030 = self.idx;
                                                                        var $2031 = self.code;
                                                                        var $2032 = self.err;
                                                                        var $2033 = Parser$Reply$error$($2030, $2031, $2032);
                                                                        var $2029 = $2033;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2034 = self.idx;
                                                                        var $2035 = self.code;
                                                                        var $2036 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2034, $2035);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2038 = self.idx;
                                                                                var $2039 = self.code;
                                                                                var $2040 = self.err;
                                                                                var $2041 = Parser$Reply$error$($2038, $2039, $2040);
                                                                                var $2037 = $2041;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2042 = self.idx;
                                                                                var $2043 = self.code;
                                                                                var self = Kind$Parser$term$($2042, $2043);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2045 = self.idx;
                                                                                        var $2046 = self.code;
                                                                                        var $2047 = self.err;
                                                                                        var $2048 = Parser$Reply$error$($2045, $2046, $2047);
                                                                                        var $2044 = $2048;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2049 = self.idx;
                                                                                        var $2050 = self.code;
                                                                                        var $2051 = self.val;
                                                                                        var self = Kind$Parser$stop$($1984, $2049, $2050);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2053 = self.idx;
                                                                                                var $2054 = self.code;
                                                                                                var $2055 = self.err;
                                                                                                var $2056 = Parser$Reply$error$($2053, $2054, $2055);
                                                                                                var $2052 = $2056;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2057 = self.idx;
                                                                                                var $2058 = self.code;
                                                                                                var $2059 = self.val;
                                                                                                var _term$36 = $2036;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("x", (_x$37 => {
                                                                                                    var $2061 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2061;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($1999, (_x$38 => {
                                                                                                    var $2062 = Kind$Term$lam$($2014, (_y$39 => {
                                                                                                        var $2063 = $2051;
                                                                                                        return $2063;
                                                                                                    }));
                                                                                                    return $2062;
                                                                                                })));
                                                                                                var $2060 = Parser$Reply$value$($2057, $2058, Kind$Term$ori$($2059, _term$38));
                                                                                                var $2052 = $2060;
                                                                                                break;
                                                                                        };
                                                                                        var $2044 = $2052;
                                                                                        break;
                                                                                };
                                                                                var $2037 = $2044;
                                                                                break;
                                                                        };
                                                                        var $2029 = $2037;
                                                                        break;
                                                                };
                                                                var $2022 = $2029;
                                                                break;
                                                        };
                                                        var $2015 = $2022;
                                                        break;
                                                };
                                                var $2007 = $2015;
                                                break;
                                        };
                                        var $2000 = $2007;
                                        break;
                                };
                                var $1992 = $2000;
                                break;
                        };
                        var $1985 = $1992;
                        break;
                };
                var $1977 = $1985;
                break;
        };
        return $1977;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $2064 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $2064;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2066 = self.idx;
                var $2067 = self.code;
                var $2068 = self.err;
                var $2069 = Parser$Reply$error$($2066, $2067, $2068);
                var $2065 = $2069;
                break;
            case 'Parser.Reply.value':
                var $2070 = self.idx;
                var $2071 = self.code;
                var $2072 = self.val;
                var self = Kind$Parser$text$("def ", $2070, $2071);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2074 = self.idx;
                        var $2075 = self.code;
                        var $2076 = self.err;
                        var $2077 = Parser$Reply$error$($2074, $2075, $2076);
                        var $2073 = $2077;
                        break;
                    case 'Parser.Reply.value':
                        var $2078 = self.idx;
                        var $2079 = self.code;
                        var self = Kind$Parser$name$($2078, $2079);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2081 = self.idx;
                                var $2082 = self.code;
                                var $2083 = self.err;
                                var $2084 = Parser$Reply$error$($2081, $2082, $2083);
                                var $2080 = $2084;
                                break;
                            case 'Parser.Reply.value':
                                var $2085 = self.idx;
                                var $2086 = self.code;
                                var $2087 = self.val;
                                var self = Kind$Parser$text$("=", $2085, $2086);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2089 = self.idx;
                                        var $2090 = self.code;
                                        var $2091 = self.err;
                                        var $2092 = Parser$Reply$error$($2089, $2090, $2091);
                                        var $2088 = $2092;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2093 = self.idx;
                                        var $2094 = self.code;
                                        var self = Kind$Parser$term$($2093, $2094);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2096 = self.idx;
                                                var $2097 = self.code;
                                                var $2098 = self.err;
                                                var $2099 = Parser$Reply$error$($2096, $2097, $2098);
                                                var $2095 = $2099;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2100 = self.idx;
                                                var $2101 = self.code;
                                                var $2102 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2100, $2101);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2104 = self.idx;
                                                        var $2105 = self.code;
                                                        var $2106 = self.err;
                                                        var $2107 = Parser$Reply$error$($2104, $2105, $2106);
                                                        var $2103 = $2107;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2108 = self.idx;
                                                        var $2109 = self.code;
                                                        var self = Kind$Parser$term$($2108, $2109);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2111 = self.idx;
                                                                var $2112 = self.code;
                                                                var $2113 = self.err;
                                                                var $2114 = Parser$Reply$error$($2111, $2112, $2113);
                                                                var $2110 = $2114;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2115 = self.idx;
                                                                var $2116 = self.code;
                                                                var $2117 = self.val;
                                                                var self = Kind$Parser$stop$($2072, $2115, $2116);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2119 = self.idx;
                                                                        var $2120 = self.code;
                                                                        var $2121 = self.err;
                                                                        var $2122 = Parser$Reply$error$($2119, $2120, $2121);
                                                                        var $2118 = $2122;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2123 = self.idx;
                                                                        var $2124 = self.code;
                                                                        var $2125 = self.val;
                                                                        var $2126 = Parser$Reply$value$($2123, $2124, Kind$Term$ori$($2125, Kind$Term$def$($2087, $2102, (_x$27 => {
                                                                            var $2127 = $2117;
                                                                            return $2127;
                                                                        }))));
                                                                        var $2118 = $2126;
                                                                        break;
                                                                };
                                                                var $2110 = $2118;
                                                                break;
                                                        };
                                                        var $2103 = $2110;
                                                        break;
                                                };
                                                var $2095 = $2103;
                                                break;
                                        };
                                        var $2088 = $2095;
                                        break;
                                };
                                var $2080 = $2088;
                                break;
                        };
                        var $2073 = $2080;
                        break;
                };
                var $2065 = $2073;
                break;
        };
        return $2065;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2129 = self.idx;
                var $2130 = self.code;
                var $2131 = self.err;
                var $2132 = Parser$Reply$error$($2129, $2130, $2131);
                var $2128 = $2132;
                break;
            case 'Parser.Reply.value':
                var $2133 = self.idx;
                var $2134 = self.code;
                var $2135 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2133, $2134);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2137 = self.idx;
                        var $2138 = self.code;
                        var $2139 = self.err;
                        var $2140 = Parser$Reply$error$($2137, $2138, $2139);
                        var $2136 = $2140;
                        break;
                    case 'Parser.Reply.value':
                        var $2141 = self.idx;
                        var $2142 = self.code;
                        var self = Kind$Parser$name1$($2141, $2142);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2144 = self.idx;
                                var $2145 = self.code;
                                var $2146 = self.err;
                                var $2147 = Parser$Reply$error$($2144, $2145, $2146);
                                var $2143 = $2147;
                                break;
                            case 'Parser.Reply.value':
                                var $2148 = self.idx;
                                var $2149 = self.code;
                                var $2150 = self.val;
                                var self = Kind$Parser$text$("in", $2148, $2149);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2152 = self.idx;
                                        var $2153 = self.code;
                                        var $2154 = self.err;
                                        var $2155 = Parser$Reply$error$($2152, $2153, $2154);
                                        var $2151 = $2155;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2156 = self.idx;
                                        var $2157 = self.code;
                                        var self = Kind$Parser$term$($2156, $2157);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2159 = self.idx;
                                                var $2160 = self.code;
                                                var $2161 = self.err;
                                                var $2162 = Parser$Reply$error$($2159, $2160, $2161);
                                                var $2158 = $2162;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2163 = self.idx;
                                                var $2164 = self.code;
                                                var $2165 = self.val;
                                                var self = Kind$Parser$text$("with", $2163, $2164);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2167 = self.idx;
                                                        var $2168 = self.code;
                                                        var $2169 = self.err;
                                                        var $2170 = Parser$Reply$error$($2167, $2168, $2169);
                                                        var $2166 = $2170;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2171 = self.idx;
                                                        var $2172 = self.code;
                                                        var self = Kind$Parser$term$($2171, $2172);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2174 = self.idx;
                                                                var $2175 = self.code;
                                                                var $2176 = self.err;
                                                                var $2177 = Parser$Reply$error$($2174, $2175, $2176);
                                                                var $2173 = $2177;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2178 = self.idx;
                                                                var $2179 = self.code;
                                                                var $2180 = self.val;
                                                                var self = Kind$Parser$term$($2178, $2179);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2182 = self.idx;
                                                                        var $2183 = self.code;
                                                                        var $2184 = self.err;
                                                                        var $2185 = Parser$Reply$error$($2182, $2183, $2184);
                                                                        var $2181 = $2185;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2186 = self.idx;
                                                                        var $2187 = self.code;
                                                                        var $2188 = self.val;
                                                                        var self = Kind$Parser$stop$($2135, $2186, $2187);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2190 = self.idx;
                                                                                var $2191 = self.code;
                                                                                var $2192 = self.err;
                                                                                var $2193 = Parser$Reply$error$($2190, $2191, $2192);
                                                                                var $2189 = $2193;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2194 = self.idx;
                                                                                var $2195 = self.code;
                                                                                var $2196 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2150, (_s$30 => {
                                                                                    var $2198 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $2199 = $2165;
                                                                                        return $2199;
                                                                                    }));
                                                                                    return $2198;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $2180);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $2188);
                                                                                var $2197 = Parser$Reply$value$($2194, $2195, Kind$Term$ori$($2196, _term$37));
                                                                                var $2189 = $2197;
                                                                                break;
                                                                        };
                                                                        var $2181 = $2189;
                                                                        break;
                                                                };
                                                                var $2173 = $2181;
                                                                break;
                                                        };
                                                        var $2166 = $2173;
                                                        break;
                                                };
                                                var $2158 = $2166;
                                                break;
                                        };
                                        var $2151 = $2158;
                                        break;
                                };
                                var $2143 = $2151;
                                break;
                        };
                        var $2136 = $2143;
                        break;
                };
                var $2128 = $2136;
                break;
        };
        return $2128;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2201 = self.idx;
                var $2202 = self.code;
                var $2203 = self.err;
                var $2204 = Parser$Reply$error$($2201, $2202, $2203);
                var $2200 = $2204;
                break;
            case 'Parser.Reply.value':
                var $2205 = self.idx;
                var $2206 = self.code;
                var $2207 = self.val;
                var self = Kind$Parser$text$("if ", $2205, $2206);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2209 = self.idx;
                        var $2210 = self.code;
                        var $2211 = self.err;
                        var $2212 = Parser$Reply$error$($2209, $2210, $2211);
                        var $2208 = $2212;
                        break;
                    case 'Parser.Reply.value':
                        var $2213 = self.idx;
                        var $2214 = self.code;
                        var self = Kind$Parser$term$($2213, $2214);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2216 = self.idx;
                                var $2217 = self.code;
                                var $2218 = self.err;
                                var $2219 = Parser$Reply$error$($2216, $2217, $2218);
                                var $2215 = $2219;
                                break;
                            case 'Parser.Reply.value':
                                var $2220 = self.idx;
                                var $2221 = self.code;
                                var $2222 = self.val;
                                var self = Kind$Parser$text$("then", $2220, $2221);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2224 = self.idx;
                                        var $2225 = self.code;
                                        var $2226 = self.err;
                                        var $2227 = Parser$Reply$error$($2224, $2225, $2226);
                                        var $2223 = $2227;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2228 = self.idx;
                                        var $2229 = self.code;
                                        var self = Kind$Parser$term$($2228, $2229);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2231 = self.idx;
                                                var $2232 = self.code;
                                                var $2233 = self.err;
                                                var $2234 = Parser$Reply$error$($2231, $2232, $2233);
                                                var $2230 = $2234;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2235 = self.idx;
                                                var $2236 = self.code;
                                                var $2237 = self.val;
                                                var self = Kind$Parser$text$("else", $2235, $2236);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2239 = self.idx;
                                                        var $2240 = self.code;
                                                        var $2241 = self.err;
                                                        var $2242 = Parser$Reply$error$($2239, $2240, $2241);
                                                        var $2238 = $2242;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2243 = self.idx;
                                                        var $2244 = self.code;
                                                        var self = Kind$Parser$term$($2243, $2244);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2246 = self.idx;
                                                                var $2247 = self.code;
                                                                var $2248 = self.err;
                                                                var $2249 = Parser$Reply$error$($2246, $2247, $2248);
                                                                var $2245 = $2249;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2250 = self.idx;
                                                                var $2251 = self.code;
                                                                var $2252 = self.val;
                                                                var self = Kind$Parser$stop$($2207, $2250, $2251);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2254 = self.idx;
                                                                        var $2255 = self.code;
                                                                        var $2256 = self.err;
                                                                        var $2257 = Parser$Reply$error$($2254, $2255, $2256);
                                                                        var $2253 = $2257;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2258 = self.idx;
                                                                        var $2259 = self.code;
                                                                        var $2260 = self.val;
                                                                        var _term$27 = $2222;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $2262 = Kind$Term$hol$(Bits$e);
                                                                            return $2262;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $2237);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2252);
                                                                        var $2261 = Parser$Reply$value$($2258, $2259, Kind$Term$ori$($2260, _term$30));
                                                                        var $2253 = $2261;
                                                                        break;
                                                                };
                                                                var $2245 = $2253;
                                                                break;
                                                        };
                                                        var $2238 = $2245;
                                                        break;
                                                };
                                                var $2230 = $2238;
                                                break;
                                        };
                                        var $2223 = $2230;
                                        break;
                                };
                                var $2215 = $2223;
                                break;
                        };
                        var $2208 = $2215;
                        break;
                };
                var $2200 = $2208;
                break;
        };
        return $2200;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $2264 = self.head;
                var $2265 = self.tail;
                var $2266 = List$cons$(_f$4($2264), List$mapped$($2265, _f$4));
                var $2263 = $2266;
                break;
            case 'List.nil':
                var $2267 = List$nil;
                var $2263 = $2267;
                break;
        };
        return $2263;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $2269 = self.fst;
                var $2270 = self.snd;
                var $2271 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($2269, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2273 = self.idx;
                            var $2274 = self.code;
                            var $2275 = self.err;
                            var $2276 = Parser$Reply$error$($2273, $2274, $2275);
                            var $2272 = $2276;
                            break;
                        case 'Parser.Reply.value':
                            var $2277 = self.idx;
                            var $2278 = self.code;
                            var $2279 = Parser$Reply$value$($2277, $2278, $2270);
                            var $2272 = $2279;
                            break;
                    };
                    return $2272;
                });
                var $2268 = $2271;
                break;
        };
        return $2268;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Term$chr$(_chrx$1) {
        var $2280 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $2280;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2282 = self.idx;
                var $2283 = self.code;
                var $2284 = self.err;
                var $2285 = Parser$Reply$error$($2282, $2283, $2284);
                var $2281 = $2285;
                break;
            case 'Parser.Reply.value':
                var $2286 = self.idx;
                var $2287 = self.code;
                var $2288 = self.val;
                var self = Kind$Parser$text$("\'", $2286, $2287);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2290 = self.idx;
                        var $2291 = self.code;
                        var $2292 = self.err;
                        var $2293 = Parser$Reply$error$($2290, $2291, $2292);
                        var $2289 = $2293;
                        break;
                    case 'Parser.Reply.value':
                        var $2294 = self.idx;
                        var $2295 = self.code;
                        var self = Kind$Parser$char$single($2294)($2295);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2297 = self.idx;
                                var $2298 = self.code;
                                var $2299 = self.err;
                                var $2300 = Parser$Reply$error$($2297, $2298, $2299);
                                var $2296 = $2300;
                                break;
                            case 'Parser.Reply.value':
                                var $2301 = self.idx;
                                var $2302 = self.code;
                                var $2303 = self.val;
                                var self = Parser$text$("\'", $2301, $2302);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2305 = self.idx;
                                        var $2306 = self.code;
                                        var $2307 = self.err;
                                        var $2308 = Parser$Reply$error$($2305, $2306, $2307);
                                        var $2304 = $2308;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2309 = self.idx;
                                        var $2310 = self.code;
                                        var self = Kind$Parser$stop$($2288, $2309, $2310);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2312 = self.idx;
                                                var $2313 = self.code;
                                                var $2314 = self.err;
                                                var $2315 = Parser$Reply$error$($2312, $2313, $2314);
                                                var $2311 = $2315;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2316 = self.idx;
                                                var $2317 = self.code;
                                                var $2318 = self.val;
                                                var $2319 = Parser$Reply$value$($2316, $2317, Kind$Term$ori$($2318, Kind$Term$chr$($2303)));
                                                var $2311 = $2319;
                                                break;
                                        };
                                        var $2304 = $2311;
                                        break;
                                };
                                var $2296 = $2304;
                                break;
                        };
                        var $2289 = $2296;
                        break;
                };
                var $2281 = $2289;
                break;
        };
        return $2281;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $2320 = _res$2;
                    return $2320;
                } else {
                    var $2321 = self.charCodeAt(0);
                    var $2322 = self.slice(1);
                    var $2323 = String$reverse$go$($2322, String$cons$($2321, _res$2));
                    return $2323;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $2324 = String$reverse$go$(_xs$1, String$nil);
        return $2324;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_str$1, _idx$2, _code$3) {
        var Kind$Parser$string$go$ = (_str$1, _idx$2, _code$3) => ({
            ctr: 'TCO',
            arg: [_str$1, _idx$2, _code$3]
        });
        var Kind$Parser$string$go = _str$1 => _idx$2 => _code$3 => Kind$Parser$string$go$(_str$1, _idx$2, _code$3);
        var arg = [_str$1, _idx$2, _code$3];
        while (true) {
            let [_str$1, _idx$2, _code$3] = arg;
            var R = (() => {
                var self = _code$3;
                if (self.length === 0) {
                    var $2325 = Parser$Reply$error$(_idx$2, _code$3, "Non-terminating string.");
                    return $2325;
                } else {
                    var $2326 = self.charCodeAt(0);
                    var $2327 = self.slice(1);
                    var self = ($2326 === 34);
                    if (self) {
                        var $2329 = Parser$Reply$value$(Nat$succ$(_idx$2), $2327, String$reverse$(_str$1));
                        var $2328 = $2329;
                    } else {
                        var self = Kind$Parser$char$single(_idx$2)(_code$3);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2331 = self.idx;
                                var $2332 = self.code;
                                var $2333 = self.err;
                                var $2334 = Parser$Reply$error$($2331, $2332, $2333);
                                var $2330 = $2334;
                                break;
                            case 'Parser.Reply.value':
                                var $2335 = self.idx;
                                var $2336 = self.code;
                                var $2337 = self.val;
                                var $2338 = Kind$Parser$string$go$(String$cons$($2337, _str$1), $2335, $2336);
                                var $2330 = $2338;
                                break;
                        };
                        var $2328 = $2330;
                    };
                    return $2328;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => Kind$Parser$string$go$(x0, x1, x2);

    function Kind$Term$str$(_strx$1) {
        var $2339 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $2339;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Kind$Parser$string$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2341 = self.idx;
                var $2342 = self.code;
                var $2343 = self.err;
                var $2344 = Parser$Reply$error$($2341, $2342, $2343);
                var $2340 = $2344;
                break;
            case 'Parser.Reply.value':
                var $2345 = self.idx;
                var $2346 = self.code;
                var $2347 = self.val;
                var self = Kind$Parser$text$(String$cons$(34, String$nil), $2345, $2346);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2349 = self.idx;
                        var $2350 = self.code;
                        var $2351 = self.err;
                        var $2352 = Parser$Reply$error$($2349, $2350, $2351);
                        var $2348 = $2352;
                        break;
                    case 'Parser.Reply.value':
                        var $2353 = self.idx;
                        var $2354 = self.code;
                        var self = Kind$Parser$string$go$("", $2353, $2354);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2356 = self.idx;
                                var $2357 = self.code;
                                var $2358 = self.err;
                                var $2359 = Parser$Reply$error$($2356, $2357, $2358);
                                var $2355 = $2359;
                                break;
                            case 'Parser.Reply.value':
                                var $2360 = self.idx;
                                var $2361 = self.code;
                                var $2362 = self.val;
                                var self = Kind$Parser$stop$($2347, $2360, $2361);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2364 = self.idx;
                                        var $2365 = self.code;
                                        var $2366 = self.err;
                                        var $2367 = Parser$Reply$error$($2364, $2365, $2366);
                                        var $2363 = $2367;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2368 = self.idx;
                                        var $2369 = self.code;
                                        var $2370 = self.val;
                                        var $2371 = Parser$Reply$value$($2368, $2369, Kind$Term$ori$($2370, Kind$Term$str$($2362)));
                                        var $2363 = $2371;
                                        break;
                                };
                                var $2355 = $2363;
                                break;
                        };
                        var $2348 = $2355;
                        break;
                };
                var $2340 = $2348;
                break;
        };
        return $2340;
    };
    const Kind$Parser$string = x0 => x1 => Kind$Parser$string$(x0, x1);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2373 = self.idx;
                var $2374 = self.code;
                var $2375 = self.err;
                var $2376 = Parser$Reply$error$($2373, $2374, $2375);
                var $2372 = $2376;
                break;
            case 'Parser.Reply.value':
                var $2377 = self.idx;
                var $2378 = self.code;
                var $2379 = self.val;
                var self = Kind$Parser$text$("{", $2377, $2378);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2381 = self.idx;
                        var $2382 = self.code;
                        var $2383 = self.err;
                        var $2384 = Parser$Reply$error$($2381, $2382, $2383);
                        var $2380 = $2384;
                        break;
                    case 'Parser.Reply.value':
                        var $2385 = self.idx;
                        var $2386 = self.code;
                        var self = Kind$Parser$term$($2385, $2386);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2388 = self.idx;
                                var $2389 = self.code;
                                var $2390 = self.err;
                                var $2391 = Parser$Reply$error$($2388, $2389, $2390);
                                var $2387 = $2391;
                                break;
                            case 'Parser.Reply.value':
                                var $2392 = self.idx;
                                var $2393 = self.code;
                                var $2394 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $2392, $2393);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2396 = self.idx;
                                        var $2397 = self.code;
                                        var $2398 = self.err;
                                        var $2399 = Parser$Reply$error$($2396, $2397, $2398);
                                        var $2395 = $2399;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2400 = self.idx;
                                        var $2401 = self.code;
                                        var self = Kind$Parser$term$($2400, $2401);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2403 = self.idx;
                                                var $2404 = self.code;
                                                var $2405 = self.err;
                                                var $2406 = Parser$Reply$error$($2403, $2404, $2405);
                                                var $2402 = $2406;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2407 = self.idx;
                                                var $2408 = self.code;
                                                var $2409 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $2407, $2408);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2411 = self.idx;
                                                        var $2412 = self.code;
                                                        var $2413 = self.err;
                                                        var $2414 = Parser$Reply$error$($2411, $2412, $2413);
                                                        var $2410 = $2414;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2415 = self.idx;
                                                        var $2416 = self.code;
                                                        var self = Kind$Parser$text$("}", $2415, $2416);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2418 = self.idx;
                                                                var $2419 = self.code;
                                                                var $2420 = self.err;
                                                                var $2421 = Parser$Reply$error$($2418, $2419, $2420);
                                                                var $2417 = $2421;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2422 = self.idx;
                                                                var $2423 = self.code;
                                                                var self = Kind$Parser$stop$($2379, $2422, $2423);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2425 = self.idx;
                                                                        var $2426 = self.code;
                                                                        var $2427 = self.err;
                                                                        var $2428 = Parser$Reply$error$($2425, $2426, $2427);
                                                                        var $2424 = $2428;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2429 = self.idx;
                                                                        var $2430 = self.code;
                                                                        var $2431 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2394);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $2409);
                                                                        var $2432 = Parser$Reply$value$($2429, $2430, Kind$Term$ori$($2431, _term$31));
                                                                        var $2424 = $2432;
                                                                        break;
                                                                };
                                                                var $2417 = $2424;
                                                                break;
                                                        };
                                                        var $2410 = $2417;
                                                        break;
                                                };
                                                var $2402 = $2410;
                                                break;
                                        };
                                        var $2395 = $2402;
                                        break;
                                };
                                var $2387 = $2395;
                                break;
                        };
                        var $2380 = $2387;
                        break;
                };
                var $2372 = $2380;
                break;
        };
        return $2372;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2434 = self.idx;
                var $2435 = self.code;
                var $2436 = self.err;
                var $2437 = Parser$Reply$error$($2434, $2435, $2436);
                var $2433 = $2437;
                break;
            case 'Parser.Reply.value':
                var $2438 = self.idx;
                var $2439 = self.code;
                var $2440 = self.val;
                var self = Kind$Parser$text$("[", $2438, $2439);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2442 = self.idx;
                        var $2443 = self.code;
                        var $2444 = self.err;
                        var $2445 = Parser$Reply$error$($2442, $2443, $2444);
                        var $2441 = $2445;
                        break;
                    case 'Parser.Reply.value':
                        var $2446 = self.idx;
                        var $2447 = self.code;
                        var self = Kind$Parser$name1$($2446, $2447);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2449 = self.idx;
                                var $2450 = self.code;
                                var $2451 = self.err;
                                var $2452 = Parser$Reply$error$($2449, $2450, $2451);
                                var $2448 = $2452;
                                break;
                            case 'Parser.Reply.value':
                                var $2453 = self.idx;
                                var $2454 = self.code;
                                var $2455 = self.val;
                                var self = Kind$Parser$text$(":", $2453, $2454);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2457 = self.idx;
                                        var $2458 = self.code;
                                        var $2459 = self.err;
                                        var $2460 = Parser$Reply$error$($2457, $2458, $2459);
                                        var $2456 = $2460;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2461 = self.idx;
                                        var $2462 = self.code;
                                        var self = Kind$Parser$term$($2461, $2462);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2464 = self.idx;
                                                var $2465 = self.code;
                                                var $2466 = self.err;
                                                var $2467 = Parser$Reply$error$($2464, $2465, $2466);
                                                var $2463 = $2467;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2468 = self.idx;
                                                var $2469 = self.code;
                                                var $2470 = self.val;
                                                var self = Kind$Parser$text$("]", $2468, $2469);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2472 = self.idx;
                                                        var $2473 = self.code;
                                                        var $2474 = self.err;
                                                        var $2475 = Parser$Reply$error$($2472, $2473, $2474);
                                                        var $2471 = $2475;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2476 = self.idx;
                                                        var $2477 = self.code;
                                                        var self = Kind$Parser$term$($2476, $2477);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2479 = self.idx;
                                                                var $2480 = self.code;
                                                                var $2481 = self.err;
                                                                var $2482 = Parser$Reply$error$($2479, $2480, $2481);
                                                                var $2478 = $2482;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2483 = self.idx;
                                                                var $2484 = self.code;
                                                                var $2485 = self.val;
                                                                var self = Kind$Parser$stop$($2440, $2483, $2484);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2487 = self.idx;
                                                                        var $2488 = self.code;
                                                                        var $2489 = self.err;
                                                                        var $2490 = Parser$Reply$error$($2487, $2488, $2489);
                                                                        var $2486 = $2490;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2491 = self.idx;
                                                                        var $2492 = self.code;
                                                                        var $2493 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $2470);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($2455, (_x$29 => {
                                                                            var $2495 = $2485;
                                                                            return $2495;
                                                                        })));
                                                                        var $2494 = Parser$Reply$value$($2491, $2492, Kind$Term$ori$($2493, _term$29));
                                                                        var $2486 = $2494;
                                                                        break;
                                                                };
                                                                var $2478 = $2486;
                                                                break;
                                                        };
                                                        var $2471 = $2478;
                                                        break;
                                                };
                                                var $2463 = $2471;
                                                break;
                                        };
                                        var $2456 = $2463;
                                        break;
                                };
                                var $2448 = $2456;
                                break;
                        };
                        var $2441 = $2448;
                        break;
                };
                var $2433 = $2441;
                break;
        };
        return $2433;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2497 = self.idx;
                var $2498 = self.code;
                var $2499 = self.err;
                var $2500 = Parser$Reply$error$($2497, $2498, $2499);
                var $2496 = $2500;
                break;
            case 'Parser.Reply.value':
                var $2501 = self.idx;
                var $2502 = self.code;
                var $2503 = self.val;
                var self = Kind$Parser$text$("some(", $2501, $2502);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2505 = self.idx;
                        var $2506 = self.code;
                        var $2507 = self.err;
                        var $2508 = Parser$Reply$error$($2505, $2506, $2507);
                        var $2504 = $2508;
                        break;
                    case 'Parser.Reply.value':
                        var $2509 = self.idx;
                        var $2510 = self.code;
                        var self = Kind$Parser$term$($2509, $2510);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2512 = self.idx;
                                var $2513 = self.code;
                                var $2514 = self.err;
                                var $2515 = Parser$Reply$error$($2512, $2513, $2514);
                                var $2511 = $2515;
                                break;
                            case 'Parser.Reply.value':
                                var $2516 = self.idx;
                                var $2517 = self.code;
                                var $2518 = self.val;
                                var self = Kind$Parser$text$(")", $2516, $2517);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2520 = self.idx;
                                        var $2521 = self.code;
                                        var $2522 = self.err;
                                        var $2523 = Parser$Reply$error$($2520, $2521, $2522);
                                        var $2519 = $2523;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2524 = self.idx;
                                        var $2525 = self.code;
                                        var self = Kind$Parser$stop$($2503, $2524, $2525);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2527 = self.idx;
                                                var $2528 = self.code;
                                                var $2529 = self.err;
                                                var $2530 = Parser$Reply$error$($2527, $2528, $2529);
                                                var $2526 = $2530;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2531 = self.idx;
                                                var $2532 = self.code;
                                                var $2533 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $2518);
                                                var $2534 = Parser$Reply$value$($2531, $2532, Kind$Term$ori$($2533, _term$20));
                                                var $2526 = $2534;
                                                break;
                                        };
                                        var $2519 = $2526;
                                        break;
                                };
                                var $2511 = $2519;
                                break;
                        };
                        var $2504 = $2511;
                        break;
                };
                var $2496 = $2504;
                break;
        };
        return $2496;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2536 = self.idx;
                var $2537 = self.code;
                var $2538 = self.err;
                var $2539 = Parser$Reply$error$($2536, $2537, $2538);
                var $2535 = $2539;
                break;
            case 'Parser.Reply.value':
                var $2540 = self.idx;
                var $2541 = self.code;
                var $2542 = self.val;
                var self = Kind$Parser$text$("apply(", $2540, $2541);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2544 = self.idx;
                        var $2545 = self.code;
                        var $2546 = self.err;
                        var $2547 = Parser$Reply$error$($2544, $2545, $2546);
                        var $2543 = $2547;
                        break;
                    case 'Parser.Reply.value':
                        var $2548 = self.idx;
                        var $2549 = self.code;
                        var self = Kind$Parser$term$($2548, $2549);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2551 = self.idx;
                                var $2552 = self.code;
                                var $2553 = self.err;
                                var $2554 = Parser$Reply$error$($2551, $2552, $2553);
                                var $2550 = $2554;
                                break;
                            case 'Parser.Reply.value':
                                var $2555 = self.idx;
                                var $2556 = self.code;
                                var $2557 = self.val;
                                var self = Kind$Parser$text$(",", $2555, $2556);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2559 = self.idx;
                                        var $2560 = self.code;
                                        var $2561 = self.err;
                                        var $2562 = Parser$Reply$error$($2559, $2560, $2561);
                                        var $2558 = $2562;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2563 = self.idx;
                                        var $2564 = self.code;
                                        var self = Kind$Parser$term$($2563, $2564);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2566 = self.idx;
                                                var $2567 = self.code;
                                                var $2568 = self.err;
                                                var $2569 = Parser$Reply$error$($2566, $2567, $2568);
                                                var $2565 = $2569;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2570 = self.idx;
                                                var $2571 = self.code;
                                                var $2572 = self.val;
                                                var self = Kind$Parser$text$(")", $2570, $2571);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2574 = self.idx;
                                                        var $2575 = self.code;
                                                        var $2576 = self.err;
                                                        var $2577 = Parser$Reply$error$($2574, $2575, $2576);
                                                        var $2573 = $2577;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2578 = self.idx;
                                                        var $2579 = self.code;
                                                        var self = Kind$Parser$stop$($2542, $2578, $2579);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2581 = self.idx;
                                                                var $2582 = self.code;
                                                                var $2583 = self.err;
                                                                var $2584 = Parser$Reply$error$($2581, $2582, $2583);
                                                                var $2580 = $2584;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2585 = self.idx;
                                                                var $2586 = self.code;
                                                                var $2587 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $2557);
                                                                var _term$30 = Kind$Term$app$(_term$29, $2572);
                                                                var $2588 = Parser$Reply$value$($2585, $2586, Kind$Term$ori$($2587, _term$30));
                                                                var $2580 = $2588;
                                                                break;
                                                        };
                                                        var $2573 = $2580;
                                                        break;
                                                };
                                                var $2565 = $2573;
                                                break;
                                        };
                                        var $2558 = $2565;
                                        break;
                                };
                                var $2550 = $2558;
                                break;
                        };
                        var $2543 = $2550;
                        break;
                };
                var $2535 = $2543;
                break;
        };
        return $2535;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2590 = self.idx;
                var $2591 = self.code;
                var $2592 = self.err;
                var $2593 = Parser$Reply$error$($2590, $2591, $2592);
                var $2589 = $2593;
                break;
            case 'Parser.Reply.value':
                var $2594 = self.idx;
                var $2595 = self.code;
                var $2596 = self.val;
                var self = Kind$Parser$text$("chain(", $2594, $2595);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2598 = self.idx;
                        var $2599 = self.code;
                        var $2600 = self.err;
                        var $2601 = Parser$Reply$error$($2598, $2599, $2600);
                        var $2597 = $2601;
                        break;
                    case 'Parser.Reply.value':
                        var $2602 = self.idx;
                        var $2603 = self.code;
                        var self = Kind$Parser$term$($2602, $2603);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2605 = self.idx;
                                var $2606 = self.code;
                                var $2607 = self.err;
                                var $2608 = Parser$Reply$error$($2605, $2606, $2607);
                                var $2604 = $2608;
                                break;
                            case 'Parser.Reply.value':
                                var $2609 = self.idx;
                                var $2610 = self.code;
                                var $2611 = self.val;
                                var self = Kind$Parser$text$(",", $2609, $2610);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2613 = self.idx;
                                        var $2614 = self.code;
                                        var $2615 = self.err;
                                        var $2616 = Parser$Reply$error$($2613, $2614, $2615);
                                        var $2612 = $2616;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2617 = self.idx;
                                        var $2618 = self.code;
                                        var self = Kind$Parser$term$($2617, $2618);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2620 = self.idx;
                                                var $2621 = self.code;
                                                var $2622 = self.err;
                                                var $2623 = Parser$Reply$error$($2620, $2621, $2622);
                                                var $2619 = $2623;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2624 = self.idx;
                                                var $2625 = self.code;
                                                var $2626 = self.val;
                                                var self = Kind$Parser$text$(")", $2624, $2625);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2628 = self.idx;
                                                        var $2629 = self.code;
                                                        var $2630 = self.err;
                                                        var $2631 = Parser$Reply$error$($2628, $2629, $2630);
                                                        var $2627 = $2631;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2632 = self.idx;
                                                        var $2633 = self.code;
                                                        var self = Kind$Parser$stop$($2596, $2632, $2633);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2635 = self.idx;
                                                                var $2636 = self.code;
                                                                var $2637 = self.err;
                                                                var $2638 = Parser$Reply$error$($2635, $2636, $2637);
                                                                var $2634 = $2638;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2639 = self.idx;
                                                                var $2640 = self.code;
                                                                var $2641 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $2611);
                                                                var _term$30 = Kind$Term$app$(_term$29, $2626);
                                                                var $2642 = Parser$Reply$value$($2639, $2640, Kind$Term$ori$($2641, _term$30));
                                                                var $2634 = $2642;
                                                                break;
                                                        };
                                                        var $2627 = $2634;
                                                        break;
                                                };
                                                var $2619 = $2627;
                                                break;
                                        };
                                        var $2612 = $2619;
                                        break;
                                };
                                var $2604 = $2612;
                                break;
                        };
                        var $2597 = $2604;
                        break;
                };
                var $2589 = $2597;
                break;
        };
        return $2589;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2644 = self.idx;
                var $2645 = self.code;
                var $2646 = self.err;
                var $2647 = Parser$Reply$error$($2644, $2645, $2646);
                var $2643 = $2647;
                break;
            case 'Parser.Reply.value':
                var $2648 = self.idx;
                var $2649 = self.code;
                var $2650 = self.val;
                var self = Kind$Parser$text$("mirror(", $2648, $2649);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2652 = self.idx;
                        var $2653 = self.code;
                        var $2654 = self.err;
                        var $2655 = Parser$Reply$error$($2652, $2653, $2654);
                        var $2651 = $2655;
                        break;
                    case 'Parser.Reply.value':
                        var $2656 = self.idx;
                        var $2657 = self.code;
                        var self = Kind$Parser$term$($2656, $2657);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2659 = self.idx;
                                var $2660 = self.code;
                                var $2661 = self.err;
                                var $2662 = Parser$Reply$error$($2659, $2660, $2661);
                                var $2658 = $2662;
                                break;
                            case 'Parser.Reply.value':
                                var $2663 = self.idx;
                                var $2664 = self.code;
                                var $2665 = self.val;
                                var self = Kind$Parser$text$(")", $2663, $2664);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2667 = self.idx;
                                        var $2668 = self.code;
                                        var $2669 = self.err;
                                        var $2670 = Parser$Reply$error$($2667, $2668, $2669);
                                        var $2666 = $2670;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2671 = self.idx;
                                        var $2672 = self.code;
                                        var self = Kind$Parser$stop$($2650, $2671, $2672);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2674 = self.idx;
                                                var $2675 = self.code;
                                                var $2676 = self.err;
                                                var $2677 = Parser$Reply$error$($2674, $2675, $2676);
                                                var $2673 = $2677;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2678 = self.idx;
                                                var $2679 = self.code;
                                                var $2680 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $2665);
                                                var $2681 = Parser$Reply$value$($2678, $2679, Kind$Term$ori$($2680, _term$22));
                                                var $2673 = $2681;
                                                break;
                                        };
                                        var $2666 = $2673;
                                        break;
                                };
                                var $2658 = $2666;
                                break;
                        };
                        var $2651 = $2658;
                        break;
                };
                var $2643 = $2651;
                break;
        };
        return $2643;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $2682 = _str$1;
        return $2682;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2684 = self.idx;
                var $2685 = self.code;
                var $2686 = self.err;
                var $2687 = Parser$Reply$error$($2684, $2685, $2686);
                var $2683 = $2687;
                break;
            case 'Parser.Reply.value':
                var $2688 = self.idx;
                var $2689 = self.code;
                var $2690 = self.val;
                var self = Kind$Parser$text$("[", $2688, $2689);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2692 = self.idx;
                        var $2693 = self.code;
                        var $2694 = self.err;
                        var $2695 = Parser$Reply$error$($2692, $2693, $2694);
                        var $2691 = $2695;
                        break;
                    case 'Parser.Reply.value':
                        var $2696 = self.idx;
                        var $2697 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($2696)($2697);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2699 = self.idx;
                                var $2700 = self.code;
                                var $2701 = self.err;
                                var $2702 = Parser$Reply$error$($2699, $2700, $2701);
                                var $2698 = $2702;
                                break;
                            case 'Parser.Reply.value':
                                var $2703 = self.idx;
                                var $2704 = self.code;
                                var $2705 = self.val;
                                var self = Kind$Parser$stop$($2690, $2703, $2704);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2707 = self.idx;
                                        var $2708 = self.code;
                                        var $2709 = self.err;
                                        var $2710 = Parser$Reply$error$($2707, $2708, $2709);
                                        var $2706 = $2710;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2711 = self.idx;
                                        var $2712 = self.code;
                                        var $2713 = self.val;
                                        var $2714 = Parser$Reply$value$($2711, $2712, List$fold$($2705, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e)), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $2715 = Kind$Term$ori$($2713, _term$20);
                                            return $2715;
                                        })));
                                        var $2706 = $2714;
                                        break;
                                };
                                var $2698 = $2706;
                                break;
                        };
                        var $2691 = $2698;
                        break;
                };
                var $2683 = $2691;
                break;
        };
        return $2683;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2717 = self.idx;
                var $2718 = self.code;
                var $2719 = self.err;
                var $2720 = Parser$Reply$error$($2717, $2718, $2719);
                var $2716 = $2720;
                break;
            case 'Parser.Reply.value':
                var $2721 = self.idx;
                var $2722 = self.code;
                var $2723 = self.val;
                var self = Kind$Parser$text$("{", $2721, $2722);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2725 = self.idx;
                        var $2726 = self.code;
                        var $2727 = self.err;
                        var $2728 = Parser$Reply$error$($2725, $2726, $2727);
                        var $2724 = $2728;
                        break;
                    case 'Parser.Reply.value':
                        var $2729 = self.idx;
                        var $2730 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2733 = self.idx;
                                    var $2734 = self.code;
                                    var $2735 = self.err;
                                    var $2736 = Parser$Reply$error$($2733, $2734, $2735);
                                    var $2732 = $2736;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2737 = self.idx;
                                    var $2738 = self.code;
                                    var $2739 = self.val;
                                    var self = Kind$Parser$text$(":", $2737, $2738);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2741 = self.idx;
                                            var $2742 = self.code;
                                            var $2743 = self.err;
                                            var $2744 = Parser$Reply$error$($2741, $2742, $2743);
                                            var $2740 = $2744;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2745 = self.idx;
                                            var $2746 = self.code;
                                            var self = Kind$Parser$term$($2745, $2746);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2748 = self.idx;
                                                    var $2749 = self.code;
                                                    var $2750 = self.err;
                                                    var $2751 = Parser$Reply$error$($2748, $2749, $2750);
                                                    var $2747 = $2751;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2752 = self.idx;
                                                    var $2753 = self.code;
                                                    var $2754 = self.val;
                                                    var $2755 = Parser$Reply$value$($2752, $2753, Pair$new$($2739, $2754));
                                                    var $2747 = $2755;
                                                    break;
                                            };
                                            var $2740 = $2747;
                                            break;
                                    };
                                    var $2732 = $2740;
                                    break;
                            };
                            return $2732;
                        })))($2729)($2730);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2756 = self.idx;
                                var $2757 = self.code;
                                var $2758 = self.err;
                                var $2759 = Parser$Reply$error$($2756, $2757, $2758);
                                var $2731 = $2759;
                                break;
                            case 'Parser.Reply.value':
                                var $2760 = self.idx;
                                var $2761 = self.code;
                                var $2762 = self.val;
                                var self = Kind$Parser$stop$($2723, $2760, $2761);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2764 = self.idx;
                                        var $2765 = self.code;
                                        var $2766 = self.err;
                                        var $2767 = Parser$Reply$error$($2764, $2765, $2766);
                                        var $2763 = $2767;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2768 = self.idx;
                                        var $2769 = self.code;
                                        var $2770 = self.val;
                                        var _list$15 = List$fold$($2762, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e)), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $2773 = self.fst;
                                                    var $2774 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $2773);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $2774);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $2775 = Kind$Term$ori$($2770, _term$27);
                                                    var $2772 = $2775;
                                                    break;
                                            };
                                            return $2772;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $2771 = Parser$Reply$value$($2768, $2769, Kind$Term$ori$($2770, _term$18));
                                        var $2763 = $2771;
                                        break;
                                };
                                var $2731 = $2763;
                                break;
                        };
                        var $2724 = $2731;
                        break;
                };
                var $2716 = $2724;
                break;
        };
        return $2716;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2777 = self.idx;
                var $2778 = self.code;
                var $2779 = self.err;
                var $2780 = Parser$Reply$error$($2777, $2778, $2779);
                var $2776 = $2780;
                break;
            case 'Parser.Reply.value':
                var $2781 = self.idx;
                var $2782 = self.code;
                var $2783 = self.val;
                var self = Kind$Parser$text$("log(", $2781, $2782);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2785 = self.idx;
                        var $2786 = self.code;
                        var $2787 = self.err;
                        var $2788 = Parser$Reply$error$($2785, $2786, $2787);
                        var $2784 = $2788;
                        break;
                    case 'Parser.Reply.value':
                        var $2789 = self.idx;
                        var $2790 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($2789)($2790);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2792 = self.idx;
                                var $2793 = self.code;
                                var $2794 = self.err;
                                var $2795 = Parser$Reply$error$($2792, $2793, $2794);
                                var $2791 = $2795;
                                break;
                            case 'Parser.Reply.value':
                                var $2796 = self.idx;
                                var $2797 = self.code;
                                var $2798 = self.val;
                                var self = Kind$Parser$term$($2796, $2797);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2800 = self.idx;
                                        var $2801 = self.code;
                                        var $2802 = self.err;
                                        var $2803 = Parser$Reply$error$($2800, $2801, $2802);
                                        var $2799 = $2803;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2804 = self.idx;
                                        var $2805 = self.code;
                                        var $2806 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($2798, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $2808 = _arg$21;
                                            return $2808;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("x", (_x$19 => {
                                            var $2809 = $2806;
                                            return $2809;
                                        })));
                                        var self = Kind$Parser$stop$($2783, $2804, $2805);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2810 = self.idx;
                                                var $2811 = self.code;
                                                var $2812 = self.err;
                                                var $2813 = Parser$Reply$error$($2810, $2811, $2812);
                                                var $2807 = $2813;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2814 = self.idx;
                                                var $2815 = self.code;
                                                var $2816 = self.val;
                                                var $2817 = Parser$Reply$value$($2814, $2815, Kind$Term$ori$($2816, _term$19));
                                                var $2807 = $2817;
                                                break;
                                        };
                                        var $2799 = $2807;
                                        break;
                                };
                                var $2791 = $2799;
                                break;
                        };
                        var $2784 = $2791;
                        break;
                };
                var $2776 = $2784;
                break;
        };
        return $2776;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $2818 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2820 = self.idx;
                    var $2821 = self.code;
                    var $2822 = self.err;
                    var $2823 = Parser$Reply$error$($2820, $2821, $2822);
                    var $2819 = $2823;
                    break;
                case 'Parser.Reply.value':
                    var $2824 = self.idx;
                    var $2825 = self.code;
                    var $2826 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($2824)($2825);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2828 = self.idx;
                            var $2829 = self.code;
                            var $2830 = self.err;
                            var $2831 = Parser$Reply$error$($2828, $2829, $2830);
                            var $2827 = $2831;
                            break;
                        case 'Parser.Reply.value':
                            var $2832 = self.idx;
                            var $2833 = self.code;
                            var self = Kind$Parser$name1$($2832, $2833);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2835 = self.idx;
                                    var $2836 = self.code;
                                    var $2837 = self.err;
                                    var $2838 = Parser$Reply$error$($2835, $2836, $2837);
                                    var $2834 = $2838;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2839 = self.idx;
                                    var $2840 = self.code;
                                    var $2841 = self.val;
                                    var self = Kind$Parser$text$("=", $2839, $2840);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2843 = self.idx;
                                            var $2844 = self.code;
                                            var $2845 = self.err;
                                            var $2846 = Parser$Reply$error$($2843, $2844, $2845);
                                            var $2842 = $2846;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2847 = self.idx;
                                            var $2848 = self.code;
                                            var self = Kind$Parser$term$($2847, $2848);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2850 = self.idx;
                                                    var $2851 = self.code;
                                                    var $2852 = self.err;
                                                    var $2853 = Parser$Reply$error$($2850, $2851, $2852);
                                                    var $2849 = $2853;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2854 = self.idx;
                                                    var $2855 = self.code;
                                                    var $2856 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $2854, $2855);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2858 = self.idx;
                                                            var $2859 = self.code;
                                                            var $2860 = self.err;
                                                            var $2861 = Parser$Reply$error$($2858, $2859, $2860);
                                                            var $2857 = $2861;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2862 = self.idx;
                                                            var $2863 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($2862)($2863);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2865 = self.idx;
                                                                    var $2866 = self.code;
                                                                    var $2867 = self.err;
                                                                    var $2868 = Parser$Reply$error$($2865, $2866, $2867);
                                                                    var $2864 = $2868;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2869 = self.idx;
                                                                    var $2870 = self.code;
                                                                    var $2871 = self.val;
                                                                    var self = Kind$Parser$stop$($2826, $2869, $2870);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2873 = self.idx;
                                                                            var $2874 = self.code;
                                                                            var $2875 = self.err;
                                                                            var $2876 = Parser$Reply$error$($2873, $2874, $2875);
                                                                            var $2872 = $2876;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2877 = self.idx;
                                                                            var $2878 = self.code;
                                                                            var $2879 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $2856);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($2841, (_x$33 => {
                                                                                var $2881 = $2871;
                                                                                return $2881;
                                                                            })));
                                                                            var $2880 = Parser$Reply$value$($2877, $2878, Kind$Term$ori$($2879, _term$33));
                                                                            var $2872 = $2880;
                                                                            break;
                                                                    };
                                                                    var $2864 = $2872;
                                                                    break;
                                                            };
                                                            var $2857 = $2864;
                                                            break;
                                                    };
                                                    var $2849 = $2857;
                                                    break;
                                            };
                                            var $2842 = $2849;
                                            break;
                                    };
                                    var $2834 = $2842;
                                    break;
                            };
                            var $2827 = $2834;
                            break;
                    };
                    var $2819 = $2827;
                    break;
            };
            return $2819;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2883 = self.idx;
                    var $2884 = self.code;
                    var $2885 = self.err;
                    var $2886 = Parser$Reply$error$($2883, $2884, $2885);
                    var $2882 = $2886;
                    break;
                case 'Parser.Reply.value':
                    var $2887 = self.idx;
                    var $2888 = self.code;
                    var $2889 = self.val;
                    var self = Kind$Parser$text$("let ", $2887, $2888);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2891 = self.idx;
                            var $2892 = self.code;
                            var $2893 = self.err;
                            var $2894 = Parser$Reply$error$($2891, $2892, $2893);
                            var $2890 = $2894;
                            break;
                        case 'Parser.Reply.value':
                            var $2895 = self.idx;
                            var $2896 = self.code;
                            var self = Kind$Parser$name1$($2895, $2896);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2898 = self.idx;
                                    var $2899 = self.code;
                                    var $2900 = self.err;
                                    var $2901 = Parser$Reply$error$($2898, $2899, $2900);
                                    var $2897 = $2901;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2902 = self.idx;
                                    var $2903 = self.code;
                                    var $2904 = self.val;
                                    var self = Kind$Parser$text$("=", $2902, $2903);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2906 = self.idx;
                                            var $2907 = self.code;
                                            var $2908 = self.err;
                                            var $2909 = Parser$Reply$error$($2906, $2907, $2908);
                                            var $2905 = $2909;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2910 = self.idx;
                                            var $2911 = self.code;
                                            var self = Kind$Parser$term$($2910, $2911);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2913 = self.idx;
                                                    var $2914 = self.code;
                                                    var $2915 = self.err;
                                                    var $2916 = Parser$Reply$error$($2913, $2914, $2915);
                                                    var $2912 = $2916;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2917 = self.idx;
                                                    var $2918 = self.code;
                                                    var $2919 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $2917, $2918);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2921 = self.idx;
                                                            var $2922 = self.code;
                                                            var $2923 = self.err;
                                                            var $2924 = Parser$Reply$error$($2921, $2922, $2923);
                                                            var $2920 = $2924;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2925 = self.idx;
                                                            var $2926 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($2925)($2926);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2928 = self.idx;
                                                                    var $2929 = self.code;
                                                                    var $2930 = self.err;
                                                                    var $2931 = Parser$Reply$error$($2928, $2929, $2930);
                                                                    var $2927 = $2931;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2932 = self.idx;
                                                                    var $2933 = self.code;
                                                                    var $2934 = self.val;
                                                                    var self = Kind$Parser$stop$($2889, $2932, $2933);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2936 = self.idx;
                                                                            var $2937 = self.code;
                                                                            var $2938 = self.err;
                                                                            var $2939 = Parser$Reply$error$($2936, $2937, $2938);
                                                                            var $2935 = $2939;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2940 = self.idx;
                                                                            var $2941 = self.code;
                                                                            var $2942 = self.val;
                                                                            var $2943 = Parser$Reply$value$($2940, $2941, Kind$Term$ori$($2942, Kind$Term$let$($2904, $2919, (_x$28 => {
                                                                                var $2944 = $2934;
                                                                                return $2944;
                                                                            }))));
                                                                            var $2935 = $2943;
                                                                            break;
                                                                    };
                                                                    var $2927 = $2935;
                                                                    break;
                                                            };
                                                            var $2920 = $2927;
                                                            break;
                                                    };
                                                    var $2912 = $2920;
                                                    break;
                                            };
                                            var $2905 = $2912;
                                            break;
                                    };
                                    var $2897 = $2905;
                                    break;
                            };
                            var $2890 = $2897;
                            break;
                    };
                    var $2882 = $2890;
                    break;
            };
            return $2882;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2946 = self.idx;
                    var $2947 = self.code;
                    var $2948 = self.err;
                    var $2949 = Parser$Reply$error$($2946, $2947, $2948);
                    var $2945 = $2949;
                    break;
                case 'Parser.Reply.value':
                    var $2950 = self.idx;
                    var $2951 = self.code;
                    var $2952 = self.val;
                    var self = Kind$Parser$text$("return ", $2950, $2951);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2954 = self.idx;
                            var $2955 = self.code;
                            var $2956 = self.err;
                            var $2957 = Parser$Reply$error$($2954, $2955, $2956);
                            var $2953 = $2957;
                            break;
                        case 'Parser.Reply.value':
                            var $2958 = self.idx;
                            var $2959 = self.code;
                            var self = Kind$Parser$term$($2958, $2959);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2961 = self.idx;
                                    var $2962 = self.code;
                                    var $2963 = self.err;
                                    var $2964 = Parser$Reply$error$($2961, $2962, $2963);
                                    var $2960 = $2964;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2965 = self.idx;
                                    var $2966 = self.code;
                                    var $2967 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $2965, $2966);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2969 = self.idx;
                                            var $2970 = self.code;
                                            var $2971 = self.err;
                                            var $2972 = Parser$Reply$error$($2969, $2970, $2971);
                                            var $2968 = $2972;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2973 = self.idx;
                                            var $2974 = self.code;
                                            var self = Kind$Parser$stop$($2952, $2973, $2974);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2976 = self.idx;
                                                    var $2977 = self.code;
                                                    var $2978 = self.err;
                                                    var $2979 = Parser$Reply$error$($2976, $2977, $2978);
                                                    var $2975 = $2979;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2980 = self.idx;
                                                    var $2981 = self.code;
                                                    var $2982 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $2967);
                                                    var $2983 = Parser$Reply$value$($2980, $2981, Kind$Term$ori$($2982, _term$22));
                                                    var $2975 = $2983;
                                                    break;
                                            };
                                            var $2968 = $2975;
                                            break;
                                    };
                                    var $2960 = $2968;
                                    break;
                            };
                            var $2953 = $2960;
                            break;
                    };
                    var $2945 = $2953;
                    break;
            };
            return $2945;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2985 = self.idx;
                    var $2986 = self.code;
                    var $2987 = self.err;
                    var $2988 = Parser$Reply$error$($2985, $2986, $2987);
                    var $2984 = $2988;
                    break;
                case 'Parser.Reply.value':
                    var $2989 = self.idx;
                    var $2990 = self.code;
                    var $2991 = self.val;
                    var self = Kind$Parser$term$($2989, $2990);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2993 = self.idx;
                            var $2994 = self.code;
                            var $2995 = self.err;
                            var $2996 = Parser$Reply$error$($2993, $2994, $2995);
                            var $2992 = $2996;
                            break;
                        case 'Parser.Reply.value':
                            var $2997 = self.idx;
                            var $2998 = self.code;
                            var $2999 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $2997, $2998);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3001 = self.idx;
                                    var $3002 = self.code;
                                    var $3003 = self.err;
                                    var $3004 = Parser$Reply$error$($3001, $3002, $3003);
                                    var $3000 = $3004;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3005 = self.idx;
                                    var $3006 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3005)($3006);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3008 = self.idx;
                                            var $3009 = self.code;
                                            var $3010 = self.err;
                                            var $3011 = Parser$Reply$error$($3008, $3009, $3010);
                                            var $3007 = $3011;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3012 = self.idx;
                                            var $3013 = self.code;
                                            var $3014 = self.val;
                                            var self = Kind$Parser$stop$($2991, $3012, $3013);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3016 = self.idx;
                                                    var $3017 = self.code;
                                                    var $3018 = self.err;
                                                    var $3019 = Parser$Reply$error$($3016, $3017, $3018);
                                                    var $3015 = $3019;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3020 = self.idx;
                                                    var $3021 = self.code;
                                                    var $3022 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $2999);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3024 = $3014;
                                                        return $3024;
                                                    })));
                                                    var $3023 = Parser$Reply$value$($3020, $3021, Kind$Term$ori$($3022, _term$24));
                                                    var $3015 = $3023;
                                                    break;
                                            };
                                            var $3007 = $3015;
                                            break;
                                    };
                                    var $3000 = $3007;
                                    break;
                            };
                            var $2992 = $3000;
                            break;
                    };
                    var $2984 = $2992;
                    break;
            };
            return $2984;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3026 = self.idx;
                    var $3027 = self.code;
                    var $3028 = self.err;
                    var $3029 = Parser$Reply$error$($3026, $3027, $3028);
                    var $3025 = $3029;
                    break;
                case 'Parser.Reply.value':
                    var $3030 = self.idx;
                    var $3031 = self.code;
                    var $3032 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3030, $3031);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3034 = self.idx;
                            var $3035 = self.code;
                            var $3036 = self.err;
                            var $3037 = Parser$Reply$error$($3034, $3035, $3036);
                            var $3033 = $3037;
                            break;
                        case 'Parser.Reply.value':
                            var $3038 = self.idx;
                            var $3039 = self.code;
                            var $3040 = Parser$Reply$value$($3038, $3039, $3032);
                            var $3033 = $3040;
                            break;
                    };
                    var $3025 = $3033;
                    break;
            };
            return $3025;
        }), List$nil))))));
        return $2818;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3042 = self.idx;
                var $3043 = self.code;
                var $3044 = self.err;
                var $3045 = Parser$Reply$error$($3042, $3043, $3044);
                var $3041 = $3045;
                break;
            case 'Parser.Reply.value':
                var $3046 = self.idx;
                var $3047 = self.code;
                var self = Kind$Parser$name1$($3046, $3047);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3049 = self.idx;
                        var $3050 = self.code;
                        var $3051 = self.err;
                        var $3052 = Parser$Reply$error$($3049, $3050, $3051);
                        var $3048 = $3052;
                        break;
                    case 'Parser.Reply.value':
                        var $3053 = self.idx;
                        var $3054 = self.code;
                        var $3055 = self.val;
                        var self = Parser$text$(" {", $3053, $3054);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3057 = self.idx;
                                var $3058 = self.code;
                                var $3059 = self.err;
                                var $3060 = Parser$Reply$error$($3057, $3058, $3059);
                                var $3056 = $3060;
                                break;
                            case 'Parser.Reply.value':
                                var $3061 = self.idx;
                                var $3062 = self.code;
                                var self = Kind$Parser$do$statements$($3055)($3061)($3062);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3064 = self.idx;
                                        var $3065 = self.code;
                                        var $3066 = self.err;
                                        var $3067 = Parser$Reply$error$($3064, $3065, $3066);
                                        var $3063 = $3067;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3068 = self.idx;
                                        var $3069 = self.code;
                                        var $3070 = self.val;
                                        var self = Kind$Parser$text$("}", $3068, $3069);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3072 = self.idx;
                                                var $3073 = self.code;
                                                var $3074 = self.err;
                                                var $3075 = Parser$Reply$error$($3072, $3073, $3074);
                                                var $3071 = $3075;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3076 = self.idx;
                                                var $3077 = self.code;
                                                var $3078 = Parser$Reply$value$($3076, $3077, $3070);
                                                var $3071 = $3078;
                                                break;
                                        };
                                        var $3063 = $3071;
                                        break;
                                };
                                var $3056 = $3063;
                                break;
                        };
                        var $3048 = $3056;
                        break;
                };
                var $3041 = $3048;
                break;
        };
        return $3041;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3080 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $3079 = $3080;
                break;
            case 'Parser.Reply.value':
                var $3081 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $3079 = $3081;
                break;
        };
        return $3079;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3082 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3082;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3084 = self.idx;
                var $3085 = self.code;
                var $3086 = self.err;
                var $3087 = Parser$Reply$error$($3084, $3085, $3086);
                var $3083 = $3087;
                break;
            case 'Parser.Reply.value':
                var $3088 = self.idx;
                var $3089 = self.code;
                var $3090 = self.val;
                var self = $3090;
                if (self) {
                    var $3092 = Parser$fail("Avoided.");
                    var $3091 = $3092;
                } else {
                    var $3093 = _parse$3;
                    var $3091 = $3093;
                };
                var $3091 = $3091($3088)($3089);
                var $3083 = $3091;
                break;
        };
        return $3083;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $3095 = self.value;
                var $3096 = $3095;
                var $3094 = $3096;
                break;
            case 'Maybe.none':
                var $3097 = _a$3;
                var $3094 = $3097;
                break;
        };
        return $3094;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $3098 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $3098;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $3100 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $3099 = $3100;
        } else {
            var $3101 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($3101);
            var $3102 = Kind$Term$app$(_func$3, _argm$4);
            var $3099 = $3102;
        };
        return $3099;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3104 = self.slice(0, -1);
                var $3105 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($3104));
                var $3103 = $3105;
                break;
            case 'i':
                var $3106 = self.slice(0, -1);
                var $3107 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($3106));
                var $3103 = $3107;
                break;
            case 'e':
                var $3108 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $3103 = $3108;
                break;
        };
        return $3103;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $3109 = _term$6;
        return $3109;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $3111 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $3110 = $3111;
        } else {
            var $3112 = self.charCodeAt(0);
            var $3113 = self.slice(1);
            var _char$4 = Kind$Term$chr$($3112);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($3113));
            var $3114 = _term$7;
            var $3110 = $3114;
        };
        return $3110;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $3116 = self.name;
                var self = Kind$Map$get$($3116, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $3118 = self.value;
                        var self = $3118;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $3120 = self.term;
                                var $3121 = Kind$Term$reduce$($3120, _defs$2);
                                var $3119 = $3121;
                                break;
                        };
                        var $3117 = $3119;
                        break;
                    case 'Maybe.none':
                        var $3122 = Kind$Term$ref$($3116);
                        var $3117 = $3122;
                        break;
                };
                var $3115 = $3117;
                break;
            case 'Kind.Term.app':
                var $3123 = self.func;
                var $3124 = self.argm;
                var _func$5 = Kind$Term$reduce$($3123, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $3126 = self.body;
                        var $3127 = Kind$Term$reduce$($3126($3124), _defs$2);
                        var $3125 = $3127;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $3128 = _term$1;
                        var $3125 = $3128;
                        break;
                };
                var $3115 = $3125;
                break;
            case 'Kind.Term.let':
                var $3129 = self.expr;
                var $3130 = self.body;
                var $3131 = Kind$Term$reduce$($3130($3129), _defs$2);
                var $3115 = $3131;
                break;
            case 'Kind.Term.def':
                var $3132 = self.expr;
                var $3133 = self.body;
                var $3134 = Kind$Term$reduce$($3133($3132), _defs$2);
                var $3115 = $3134;
                break;
            case 'Kind.Term.ann':
                var $3135 = self.term;
                var $3136 = Kind$Term$reduce$($3135, _defs$2);
                var $3115 = $3136;
                break;
            case 'Kind.Term.nat':
                var $3137 = self.natx;
                var $3138 = Kind$Term$reduce$(Kind$Term$unroll_nat$($3137), _defs$2);
                var $3115 = $3138;
                break;
            case 'Kind.Term.chr':
                var $3139 = self.chrx;
                var $3140 = Kind$Term$reduce$(Kind$Term$unroll_chr$($3139), _defs$2);
                var $3115 = $3140;
                break;
            case 'Kind.Term.str':
                var $3141 = self.strx;
                var $3142 = Kind$Term$reduce$(Kind$Term$unroll_str$($3141), _defs$2);
                var $3115 = $3142;
                break;
            case 'Kind.Term.ori':
                var $3143 = self.expr;
                var $3144 = Kind$Term$reduce$($3143, _defs$2);
                var $3115 = $3144;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $3145 = _term$1;
                var $3115 = $3145;
                break;
        };
        return $3115;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });
    const Kind$Map$new = BitsMap$new;

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $3147 = self.name;
                var $3148 = $3147;
                var $3146 = $3148;
                break;
            case 'Kind.Term.ref':
                var $3149 = self.name;
                var $3150 = $3149;
                var $3146 = $3150;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $3151 = "self";
                var $3146 = $3151;
                break;
        };
        return $3146;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $3152 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3152;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3154 = self.idx;
                var $3155 = self.code;
                var $3156 = self.err;
                var $3157 = Parser$Reply$error$($3154, $3155, $3156);
                var $3153 = $3157;
                break;
            case 'Parser.Reply.value':
                var $3158 = self.idx;
                var $3159 = self.code;
                var $3160 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3162 = self.idx;
                            var $3163 = self.code;
                            var $3164 = self.err;
                            var $3165 = Parser$Reply$error$($3162, $3163, $3164);
                            var $3161 = $3165;
                            break;
                        case 'Parser.Reply.value':
                            var $3166 = self.idx;
                            var $3167 = self.code;
                            var $3168 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3171 = self.idx;
                                        var $3172 = self.code;
                                        var $3173 = self.err;
                                        var $3174 = Parser$Reply$error$($3171, $3172, $3173);
                                        var $3170 = $3174;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3175 = self.idx;
                                        var $3176 = self.code;
                                        var self = Kind$Parser$term$($3175, $3176);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3178 = self.idx;
                                                var $3179 = self.code;
                                                var $3180 = self.err;
                                                var $3181 = Parser$Reply$error$($3178, $3179, $3180);
                                                var $3177 = $3181;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3182 = self.idx;
                                                var $3183 = self.code;
                                                var $3184 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3182, $3183);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3186 = self.idx;
                                                        var $3187 = self.code;
                                                        var $3188 = self.err;
                                                        var $3189 = Parser$Reply$error$($3186, $3187, $3188);
                                                        var $3185 = $3189;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3190 = self.idx;
                                                        var $3191 = self.code;
                                                        var $3192 = Parser$Reply$value$($3190, $3191, $3184);
                                                        var $3185 = $3192;
                                                        break;
                                                };
                                                var $3177 = $3185;
                                                break;
                                        };
                                        var $3170 = $3177;
                                        break;
                                };
                                return $3170;
                            }), $3166, $3167);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3193 = self.idx;
                                    var $3194 = self.code;
                                    var $3195 = self.err;
                                    var $3196 = Parser$Reply$error$($3193, $3194, $3195);
                                    var $3169 = $3196;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3197 = self.idx;
                                    var $3198 = self.code;
                                    var $3199 = self.val;
                                    var $3200 = Parser$Reply$value$($3197, $3198, Kind$Ann$new$($3168, Kind$Term$ref$($3168), $3199));
                                    var $3169 = $3200;
                                    break;
                            };
                            var $3161 = $3169;
                            break;
                    };
                    return $3161;
                }))($3158)($3159);
                var $3153 = $3160;
                break;
        };
        return $3153;
    }), List$cons$((_idx$1 => _code$2 => {
        var $3201 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $3201;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3203 = self.idx;
                var $3204 = self.code;
                var $3205 = self.err;
                var $3206 = Parser$Reply$error$($3203, $3204, $3205);
                var $3202 = $3206;
                break;
            case 'Parser.Reply.value':
                var $3207 = self.idx;
                var $3208 = self.code;
                var $3209 = self.val;
                var self = Kind$Parser$term$($3207, $3208);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3211 = self.idx;
                        var $3212 = self.code;
                        var $3213 = self.err;
                        var $3214 = Parser$Reply$error$($3211, $3212, $3213);
                        var $3210 = $3214;
                        break;
                    case 'Parser.Reply.value':
                        var $3215 = self.idx;
                        var $3216 = self.code;
                        var $3217 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $3215, $3216);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3219 = self.idx;
                                var $3220 = self.code;
                                var $3221 = self.err;
                                var $3222 = Parser$Reply$error$($3219, $3220, $3221);
                                var $3218 = $3222;
                                break;
                            case 'Parser.Reply.value':
                                var $3223 = self.idx;
                                var $3224 = self.code;
                                var $3225 = Parser$Reply$value$($3223, $3224, Pair$new$($3209, $3217));
                                var $3218 = $3225;
                                break;
                        };
                        var $3210 = $3218;
                        break;
                };
                var $3202 = $3210;
                break;
        };
        return $3202;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $3227 = self.snd;
                var $3228 = $3227;
                var $3226 = $3228;
                break;
        };
        return $3226;
    };
    const Pair$snd = x0 => Pair$snd$(x0);
    const Kind$Map = null;

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $3229 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $3229;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);

    function BitsMap$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3231 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3233 = self.val;
                        var $3234 = self.lft;
                        var $3235 = self.rgt;
                        var $3236 = BitsMap$tie$($3233, BitsMap$set$($3231, _val$3, $3234), $3235);
                        var $3232 = $3236;
                        break;
                    case 'BitsMap.new':
                        var $3237 = BitsMap$tie$(Maybe$none, BitsMap$set$($3231, _val$3, BitsMap$new), BitsMap$new);
                        var $3232 = $3237;
                        break;
                };
                var $3230 = $3232;
                break;
            case 'i':
                var $3238 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3240 = self.val;
                        var $3241 = self.lft;
                        var $3242 = self.rgt;
                        var $3243 = BitsMap$tie$($3240, $3241, BitsMap$set$($3238, _val$3, $3242));
                        var $3239 = $3243;
                        break;
                    case 'BitsMap.new':
                        var $3244 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($3238, _val$3, BitsMap$new));
                        var $3239 = $3244;
                        break;
                };
                var $3230 = $3239;
                break;
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3246 = self.lft;
                        var $3247 = self.rgt;
                        var $3248 = BitsMap$tie$(Maybe$some$(_val$3), $3246, $3247);
                        var $3245 = $3248;
                        break;
                    case 'BitsMap.new':
                        var $3249 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);
                        var $3245 = $3249;
                        break;
                };
                var $3230 = $3245;
                break;
        };
        return $3230;
    };
    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $3250 = BitsMap$set$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $3250;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $3252 = self.head;
                var $3253 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $3253);
                var self = $3252;
                switch (self._) {
                    case 'Pair.new':
                        var $3255 = self.fst;
                        var $3256 = self.snd;
                        var self = $3255;
                        switch (self._) {
                            case 'List.cons':
                                var $3258 = self.head;
                                var $3259 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($3258, _map$5), List$nil);
                                var $3260 = Kind$Map$set$($3258, List$cons$(Pair$new$($3259, $3256), _rest$10), _map$5);
                                var $3257 = $3260;
                                break;
                            case 'List.nil':
                                var $3261 = _map$5;
                                var $3257 = $3261;
                                break;
                        };
                        var $3254 = $3257;
                        break;
                };
                var $3251 = $3254;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $3263 = self.value;
                        var $3264 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $3263), List$nil), Kind$Map$new);
                        var $3262 = $3264;
                        break;
                    case 'Maybe.none':
                        var $3265 = Kind$Map$new;
                        var $3262 = $3265;
                        break;
                };
                var $3251 = $3262;
                break;
        };
        return $3251;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $3267 = self.fst;
                var $3268 = $3267;
                var $3266 = $3268;
                break;
        };
        return $3266;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $3270 = self.val;
                var $3271 = self.lft;
                var $3272 = self.rgt;
                var self = $3270;
                switch (self._) {
                    case 'Maybe.some':
                        var $3274 = self.value;
                        var $3275 = Maybe$some$(_fn$3($3274));
                        var _val$8 = $3275;
                        break;
                    case 'Maybe.none':
                        var $3276 = Maybe$none;
                        var _val$8 = $3276;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $3271);
                var _rgt$10 = BitsMap$map$(_fn$3, $3272);
                var $3273 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $3269 = $3273;
                break;
            case 'BitsMap.new':
                var $3277 = BitsMap$new;
                var $3269 = $3277;
                break;
        };
        return $3269;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $3278 = BitsMap$map$(_fn$3, _map$4);
        return $3278;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $3279 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $3279;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $3281 = self.head;
                var $3282 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($3281);
                var _expr$11 = Pair$snd$($3281);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $3284 = Kind$Parser$case$build$($3282, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $3284;
                }), _group$9);
                var $3283 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $3280 = $3283;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $3286 = self.head;
                        var $3287 = Pair$snd$($3286);
                        var $3285 = $3287;
                        break;
                    case 'List.nil':
                        var $3288 = ((console.log(("MISSING CASE" + String$nil)), (_x$7 => {
                            var $3289 = Kind$Term$ref$("missing_case");
                            return $3289;
                        })()));
                        var $3285 = $3288;
                        break;
                };
                var $3280 = $3285;
                break;
        };
        return $3280;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3291 = self.idx;
                var $3292 = self.code;
                var $3293 = self.err;
                var $3294 = Parser$Reply$error$($3291, $3292, $3293);
                var $3290 = $3294;
                break;
            case 'Parser.Reply.value':
                var $3295 = self.idx;
                var $3296 = self.code;
                var $3297 = self.val;
                var self = Kind$Parser$text$("case ", $3295, $3296);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3299 = self.idx;
                        var $3300 = self.code;
                        var $3301 = self.err;
                        var $3302 = Parser$Reply$error$($3299, $3300, $3301);
                        var $3298 = $3302;
                        break;
                    case 'Parser.Reply.value':
                        var $3303 = self.idx;
                        var $3304 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3307 = self.idx;
                                    var $3308 = self.code;
                                    var $3309 = self.err;
                                    var $3310 = Parser$Reply$error$($3307, $3308, $3309);
                                    var $3306 = $3310;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3311 = self.idx;
                                    var $3312 = self.code;
                                    var $3313 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3316 = self.idx;
                                                var $3317 = self.code;
                                                var $3318 = self.err;
                                                var $3319 = Parser$Reply$error$($3316, $3317, $3318);
                                                var $3315 = $3319;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3320 = self.idx;
                                                var $3321 = self.code;
                                                var self = Kind$Parser$name1$($3320, $3321);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3323 = self.idx;
                                                        var $3324 = self.code;
                                                        var $3325 = self.err;
                                                        var $3326 = Parser$Reply$error$($3323, $3324, $3325);
                                                        var $3322 = $3326;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3327 = self.idx;
                                                        var $3328 = self.code;
                                                        var $3329 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $3327, $3328);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3331 = self.idx;
                                                                var $3332 = self.code;
                                                                var $3333 = self.err;
                                                                var $3334 = Parser$Reply$error$($3331, $3332, $3333);
                                                                var $3330 = $3334;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3335 = self.idx;
                                                                var $3336 = self.code;
                                                                var $3337 = Parser$Reply$value$($3335, $3336, $3329);
                                                                var $3330 = $3337;
                                                                break;
                                                        };
                                                        var $3322 = $3330;
                                                        break;
                                                };
                                                var $3315 = $3322;
                                                break;
                                        };
                                        return $3315;
                                    }), $3311, $3312);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3338 = self.idx;
                                            var $3339 = self.code;
                                            var $3340 = self.err;
                                            var $3341 = Parser$Reply$error$($3338, $3339, $3340);
                                            var $3314 = $3341;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3342 = self.idx;
                                            var $3343 = self.code;
                                            var $3344 = self.val;
                                            var _name$17 = Maybe$default$($3344, Kind$Term$extract_name$($3313));
                                            var $3345 = Parser$Reply$value$($3342, $3343, Pair$new$(_name$17, $3313));
                                            var $3314 = $3345;
                                            break;
                                    };
                                    var $3306 = $3314;
                                    break;
                            };
                            return $3306;
                        }), $3303, $3304);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3346 = self.idx;
                                var $3347 = self.code;
                                var $3348 = self.err;
                                var $3349 = Parser$Reply$error$($3346, $3347, $3348);
                                var $3305 = $3349;
                                break;
                            case 'Parser.Reply.value':
                                var $3350 = self.idx;
                                var $3351 = self.code;
                                var $3352 = self.val;
                                var self = Kind$Parser$case$with($3350)($3351);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3354 = self.idx;
                                        var $3355 = self.code;
                                        var $3356 = self.err;
                                        var $3357 = Parser$Reply$error$($3354, $3355, $3356);
                                        var $3353 = $3357;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3358 = self.idx;
                                        var $3359 = self.code;
                                        var $3360 = self.val;
                                        var self = Kind$Parser$text$("{", $3358, $3359);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3362 = self.idx;
                                                var $3363 = self.code;
                                                var $3364 = self.err;
                                                var $3365 = Parser$Reply$error$($3362, $3363, $3364);
                                                var $3361 = $3365;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3366 = self.idx;
                                                var $3367 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($3366)($3367);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3369 = self.idx;
                                                        var $3370 = self.code;
                                                        var $3371 = self.err;
                                                        var $3372 = Parser$Reply$error$($3369, $3370, $3371);
                                                        var $3368 = $3372;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3373 = self.idx;
                                                        var $3374 = self.code;
                                                        var $3375 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $3373, $3374);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3377 = self.idx;
                                                                var $3378 = self.code;
                                                                var $3379 = self.err;
                                                                var $3380 = Parser$Reply$error$($3377, $3378, $3379);
                                                                var $3376 = $3380;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3381 = self.idx;
                                                                var $3382 = self.code;
                                                                var $3383 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default ", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3386 = self.idx;
                                                                            var $3387 = self.code;
                                                                            var $3388 = self.err;
                                                                            var $3389 = Parser$Reply$error$($3386, $3387, $3388);
                                                                            var $3385 = $3389;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3390 = self.idx;
                                                                            var $3391 = self.code;
                                                                            var self = Kind$Parser$term$($3390, $3391);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $3393 = self.idx;
                                                                                    var $3394 = self.code;
                                                                                    var $3395 = self.err;
                                                                                    var $3396 = Parser$Reply$error$($3393, $3394, $3395);
                                                                                    var $3392 = $3396;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $3397 = self.idx;
                                                                                    var $3398 = self.code;
                                                                                    var $3399 = self.val;
                                                                                    var $3400 = Parser$Reply$value$($3397, $3398, $3399);
                                                                                    var $3392 = $3400;
                                                                                    break;
                                                                            };
                                                                            var $3385 = $3392;
                                                                            break;
                                                                    };
                                                                    return $3385;
                                                                }), $3381, $3382);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3401 = self.idx;
                                                                        var $3402 = self.code;
                                                                        var $3403 = self.err;
                                                                        var $3404 = Parser$Reply$error$($3401, $3402, $3403);
                                                                        var $3384 = $3404;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3405 = self.idx;
                                                                        var $3406 = self.code;
                                                                        var $3407 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $3410 = self.idx;
                                                                                    var $3411 = self.code;
                                                                                    var $3412 = self.err;
                                                                                    var $3413 = Parser$Reply$error$($3410, $3411, $3412);
                                                                                    var $3409 = $3413;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $3414 = self.idx;
                                                                                    var $3415 = self.code;
                                                                                    var $3416 = Kind$Parser$term$($3414, $3415);
                                                                                    var $3409 = $3416;
                                                                                    break;
                                                                            };
                                                                            return $3409;
                                                                        }), $3405, $3406);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3417 = self.idx;
                                                                                var $3418 = self.code;
                                                                                var $3419 = self.err;
                                                                                var $3420 = Parser$Reply$error$($3417, $3418, $3419);
                                                                                var $3408 = $3420;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3421 = self.idx;
                                                                                var $3422 = self.code;
                                                                                var $3423 = self.val;
                                                                                var self = $3423;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $3425 = self.value;
                                                                                        var $3426 = Maybe$some$($3425);
                                                                                        var _moti$30 = $3426;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $3383;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $3428 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $3427 = $3428;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $3429 = Maybe$none;
                                                                                                var $3427 = $3429;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $3427;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($3297, $3421, $3422);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $3430 = self.idx;
                                                                                        var $3431 = self.code;
                                                                                        var $3432 = self.err;
                                                                                        var $3433 = Parser$Reply$error$($3430, $3431, $3432);
                                                                                        var $3424 = $3433;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $3434 = self.idx;
                                                                                        var $3435 = self.code;
                                                                                        var $3436 = self.val;
                                                                                        var $3437 = Parser$Reply$value$($3434, $3435, Kind$Parser$case$build$($3352, $3360, $3375, $3407, _moti$30, $3436));
                                                                                        var $3424 = $3437;
                                                                                        break;
                                                                                };
                                                                                var $3408 = $3424;
                                                                                break;
                                                                        };
                                                                        var $3384 = $3408;
                                                                        break;
                                                                };
                                                                var $3376 = $3384;
                                                                break;
                                                        };
                                                        var $3368 = $3376;
                                                        break;
                                                };
                                                var $3361 = $3368;
                                                break;
                                        };
                                        var $3353 = $3361;
                                        break;
                                };
                                var $3305 = $3353;
                                break;
                        };
                        var $3298 = $3305;
                        break;
                };
                var $3290 = $3298;
                break;
        };
        return $3290;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3439 = self.idx;
                var $3440 = self.code;
                var $3441 = self.err;
                var $3442 = Parser$Reply$error$($3439, $3440, $3441);
                var $3438 = $3442;
                break;
            case 'Parser.Reply.value':
                var $3443 = self.idx;
                var $3444 = self.code;
                var $3445 = self.val;
                var self = Kind$Parser$text$("open ", $3443, $3444);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3447 = self.idx;
                        var $3448 = self.code;
                        var $3449 = self.err;
                        var $3450 = Parser$Reply$error$($3447, $3448, $3449);
                        var $3446 = $3450;
                        break;
                    case 'Parser.Reply.value':
                        var $3451 = self.idx;
                        var $3452 = self.code;
                        var self = Kind$Parser$spaces($3451)($3452);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3454 = self.idx;
                                var $3455 = self.code;
                                var $3456 = self.err;
                                var $3457 = Parser$Reply$error$($3454, $3455, $3456);
                                var $3453 = $3457;
                                break;
                            case 'Parser.Reply.value':
                                var $3458 = self.idx;
                                var $3459 = self.code;
                                var self = Kind$Parser$term$($3458, $3459);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3461 = self.idx;
                                        var $3462 = self.code;
                                        var $3463 = self.err;
                                        var $3464 = Parser$Reply$error$($3461, $3462, $3463);
                                        var $3460 = $3464;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3465 = self.idx;
                                        var $3466 = self.code;
                                        var $3467 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3470 = self.idx;
                                                    var $3471 = self.code;
                                                    var $3472 = self.err;
                                                    var $3473 = Parser$Reply$error$($3470, $3471, $3472);
                                                    var $3469 = $3473;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3474 = self.idx;
                                                    var $3475 = self.code;
                                                    var $3476 = Kind$Parser$name1$($3474, $3475);
                                                    var $3469 = $3476;
                                                    break;
                                            };
                                            return $3469;
                                        }), $3465, $3466);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3477 = self.idx;
                                                var $3478 = self.code;
                                                var $3479 = self.err;
                                                var $3480 = Parser$Reply$error$($3477, $3478, $3479);
                                                var $3468 = $3480;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3481 = self.idx;
                                                var $3482 = self.code;
                                                var $3483 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3481, $3482);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3485 = self.idx;
                                                        var $3486 = self.code;
                                                        var $3487 = self.err;
                                                        var $3488 = Parser$Reply$error$($3485, $3486, $3487);
                                                        var $3484 = $3488;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3489 = self.idx;
                                                        var $3490 = self.code;
                                                        var self = $3483;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $3492 = self.value;
                                                                var $3493 = $3492;
                                                                var _name$21 = $3493;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($3467, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $3495 = self.name;
                                                                        var $3496 = $3495;
                                                                        var $3494 = $3496;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $3497 = self.name;
                                                                        var $3498 = $3497;
                                                                        var $3494 = $3498;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $3499 = Kind$Name$read$("self");
                                                                        var $3494 = $3499;
                                                                        break;
                                                                };
                                                                var _name$21 = $3494;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($3489, $3490);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3500 = self.idx;
                                                                var $3501 = self.code;
                                                                var $3502 = self.err;
                                                                var $3503 = Parser$Reply$error$($3500, $3501, $3502);
                                                                var $3491 = $3503;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3504 = self.idx;
                                                                var $3505 = self.code;
                                                                var $3506 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $3506, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($3445, $3504, $3505);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3508 = self.idx;
                                                                        var $3509 = self.code;
                                                                        var $3510 = self.err;
                                                                        var $3511 = Parser$Reply$error$($3508, $3509, $3510);
                                                                        var $3507 = $3511;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3512 = self.idx;
                                                                        var $3513 = self.code;
                                                                        var $3514 = self.val;
                                                                        var $3515 = Parser$Reply$value$($3512, $3513, Kind$Term$ori$($3514, Kind$Term$cse$(Bits$e, $3467, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $3507 = $3515;
                                                                        break;
                                                                };
                                                                var $3491 = $3507;
                                                                break;
                                                        };
                                                        var $3484 = $3491;
                                                        break;
                                                };
                                                var $3468 = $3484;
                                                break;
                                        };
                                        var $3460 = $3468;
                                        break;
                                };
                                var $3453 = $3460;
                                break;
                        };
                        var $3446 = $3453;
                        break;
                };
                var $3438 = $3446;
                break;
        };
        return $3438;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3517 = self.idx;
                var $3518 = self.code;
                var $3519 = self.err;
                var $3520 = Parser$Reply$error$($3517, $3518, $3519);
                var $3516 = $3520;
                break;
            case 'Parser.Reply.value':
                var $3521 = self.idx;
                var $3522 = self.code;
                var $3523 = self.val;
                var self = Kind$Parser$text$("without ", $3521, $3522);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3525 = self.idx;
                        var $3526 = self.code;
                        var $3527 = self.err;
                        var $3528 = Parser$Reply$error$($3525, $3526, $3527);
                        var $3524 = $3528;
                        break;
                    case 'Parser.Reply.value':
                        var $3529 = self.idx;
                        var $3530 = self.code;
                        var self = Kind$Parser$name1$($3529, $3530);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3532 = self.idx;
                                var $3533 = self.code;
                                var $3534 = self.err;
                                var $3535 = Parser$Reply$error$($3532, $3533, $3534);
                                var $3531 = $3535;
                                break;
                            case 'Parser.Reply.value':
                                var $3536 = self.idx;
                                var $3537 = self.code;
                                var $3538 = self.val;
                                var self = Kind$Parser$text$(":", $3536, $3537);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3540 = self.idx;
                                        var $3541 = self.code;
                                        var $3542 = self.err;
                                        var $3543 = Parser$Reply$error$($3540, $3541, $3542);
                                        var $3539 = $3543;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3544 = self.idx;
                                        var $3545 = self.code;
                                        var self = Kind$Parser$term$($3544, $3545);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3547 = self.idx;
                                                var $3548 = self.code;
                                                var $3549 = self.err;
                                                var $3550 = Parser$Reply$error$($3547, $3548, $3549);
                                                var $3546 = $3550;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3551 = self.idx;
                                                var $3552 = self.code;
                                                var $3553 = self.val;
                                                var self = Kind$Parser$term$($3551, $3552);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3555 = self.idx;
                                                        var $3556 = self.code;
                                                        var $3557 = self.err;
                                                        var $3558 = Parser$Reply$error$($3555, $3556, $3557);
                                                        var $3554 = $3558;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3559 = self.idx;
                                                        var $3560 = self.code;
                                                        var $3561 = self.val;
                                                        var self = Kind$Parser$stop$($3523, $3559, $3560);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3563 = self.idx;
                                                                var $3564 = self.code;
                                                                var $3565 = self.err;
                                                                var $3566 = Parser$Reply$error$($3563, $3564, $3565);
                                                                var $3562 = $3566;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3567 = self.idx;
                                                                var $3568 = self.code;
                                                                var $3569 = self.val;
                                                                var _term$24 = Kind$Term$ref$($3538);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("x", (_x$25 => {
                                                                    var $3571 = Kind$Term$hol$(Bits$e);
                                                                    return $3571;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $3553);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($3538, (_x$27 => {
                                                                    var $3572 = $3561;
                                                                    return $3572;
                                                                })));
                                                                var $3570 = Parser$Reply$value$($3567, $3568, Kind$Term$ori$($3569, _term$27));
                                                                var $3562 = $3570;
                                                                break;
                                                        };
                                                        var $3554 = $3562;
                                                        break;
                                                };
                                                var $3546 = $3554;
                                                break;
                                        };
                                        var $3539 = $3546;
                                        break;
                                };
                                var $3531 = $3539;
                                break;
                        };
                        var $3524 = $3531;
                        break;
                };
                var $3516 = $3524;
                break;
        };
        return $3516;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3574 = self.idx;
                var $3575 = self.code;
                var $3576 = self.err;
                var $3577 = Parser$Reply$error$($3574, $3575, $3576);
                var $3573 = $3577;
                break;
            case 'Parser.Reply.value':
                var $3578 = self.idx;
                var $3579 = self.code;
                var $3580 = self.val;
                var self = Kind$Parser$text$(":", $3578, $3579);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3582 = self.idx;
                        var $3583 = self.code;
                        var $3584 = self.err;
                        var $3585 = Parser$Reply$error$($3582, $3583, $3584);
                        var $3581 = $3585;
                        break;
                    case 'Parser.Reply.value':
                        var $3586 = self.idx;
                        var $3587 = self.code;
                        var self = Kind$Parser$term$($3586, $3587);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3589 = self.idx;
                                var $3590 = self.code;
                                var $3591 = self.err;
                                var $3592 = Parser$Reply$error$($3589, $3590, $3591);
                                var $3588 = $3592;
                                break;
                            case 'Parser.Reply.value':
                                var $3593 = self.idx;
                                var $3594 = self.code;
                                var $3595 = self.val;
                                var $3596 = Parser$Reply$value$($3593, $3594, Pair$new$($3580, $3595));
                                var $3588 = $3596;
                                break;
                        };
                        var $3581 = $3588;
                        break;
                };
                var $3573 = $3581;
                break;
        };
        return $3573;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3598 = self.idx;
                var $3599 = self.code;
                var $3600 = self.err;
                var $3601 = Parser$Reply$error$($3598, $3599, $3600);
                var $3597 = $3601;
                break;
            case 'Parser.Reply.value':
                var $3602 = self.idx;
                var $3603 = self.code;
                var $3604 = self.val;
                var self = Kind$Parser$text$("switch ", $3602, $3603);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3606 = self.idx;
                        var $3607 = self.code;
                        var $3608 = self.err;
                        var $3609 = Parser$Reply$error$($3606, $3607, $3608);
                        var $3605 = $3609;
                        break;
                    case 'Parser.Reply.value':
                        var $3610 = self.idx;
                        var $3611 = self.code;
                        var self = Kind$Parser$term$($3610, $3611);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3613 = self.idx;
                                var $3614 = self.code;
                                var $3615 = self.err;
                                var $3616 = Parser$Reply$error$($3613, $3614, $3615);
                                var $3612 = $3616;
                                break;
                            case 'Parser.Reply.value':
                                var $3617 = self.idx;
                                var $3618 = self.code;
                                var $3619 = self.val;
                                var self = Kind$Parser$text$("{", $3617, $3618);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3621 = self.idx;
                                        var $3622 = self.code;
                                        var $3623 = self.err;
                                        var $3624 = Parser$Reply$error$($3621, $3622, $3623);
                                        var $3620 = $3624;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3625 = self.idx;
                                        var $3626 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($3625)($3626);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3628 = self.idx;
                                                var $3629 = self.code;
                                                var $3630 = self.err;
                                                var $3631 = Parser$Reply$error$($3628, $3629, $3630);
                                                var $3627 = $3631;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3632 = self.idx;
                                                var $3633 = self.code;
                                                var $3634 = self.val;
                                                var self = Kind$Parser$text$("default ", $3632, $3633);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3636 = self.idx;
                                                        var $3637 = self.code;
                                                        var $3638 = self.err;
                                                        var $3639 = Parser$Reply$error$($3636, $3637, $3638);
                                                        var $3635 = $3639;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3640 = self.idx;
                                                        var $3641 = self.code;
                                                        var self = Kind$Parser$term$($3640, $3641);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3643 = self.idx;
                                                                var $3644 = self.code;
                                                                var $3645 = self.err;
                                                                var $3646 = Parser$Reply$error$($3643, $3644, $3645);
                                                                var $3642 = $3646;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3647 = self.idx;
                                                                var $3648 = self.code;
                                                                var $3649 = self.val;
                                                                var self = Kind$Parser$stop$($3604, $3647, $3648);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3651 = self.idx;
                                                                        var $3652 = self.code;
                                                                        var $3653 = self.err;
                                                                        var $3654 = Parser$Reply$error$($3651, $3652, $3653);
                                                                        var $3650 = $3654;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3655 = self.idx;
                                                                        var $3656 = self.code;
                                                                        var $3657 = self.val;
                                                                        var _term$27 = List$fold$($3634, $3649, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $3660 = self.fst;
                                                                                    var $3661 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($3619, $3660);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $3663 = Kind$Term$hol$(Bits$e);
                                                                                        return $3663;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $3661);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $3662 = _term$34;
                                                                                    var $3659 = $3662;
                                                                                    break;
                                                                            };
                                                                            return $3659;
                                                                        }));
                                                                        var $3658 = Parser$Reply$value$($3655, $3656, Kind$Term$ori$($3657, _term$27));
                                                                        var $3650 = $3658;
                                                                        break;
                                                                };
                                                                var $3642 = $3650;
                                                                break;
                                                        };
                                                        var $3635 = $3642;
                                                        break;
                                                };
                                                var $3627 = $3635;
                                                break;
                                        };
                                        var $3620 = $3627;
                                        break;
                                };
                                var $3612 = $3620;
                                break;
                        };
                        var $3605 = $3612;
                        break;
                };
                var $3597 = $3605;
                break;
        };
        return $3597;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3665 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3664 = $3665;
        } else {
            var $3666 = self.charCodeAt(0);
            var $3667 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($3666 === 48);
            if (self) {
                var $3669 = Parser$Reply$value$(_sidx$5, $3667, 0n);
                var $3668 = $3669;
            } else {
                var self = ($3666 === 49);
                if (self) {
                    var $3671 = Parser$Reply$value$(_sidx$5, $3667, 1n);
                    var $3670 = $3671;
                } else {
                    var self = ($3666 === 50);
                    if (self) {
                        var $3673 = Parser$Reply$value$(_sidx$5, $3667, 2n);
                        var $3672 = $3673;
                    } else {
                        var self = ($3666 === 51);
                        if (self) {
                            var $3675 = Parser$Reply$value$(_sidx$5, $3667, 3n);
                            var $3674 = $3675;
                        } else {
                            var self = ($3666 === 52);
                            if (self) {
                                var $3677 = Parser$Reply$value$(_sidx$5, $3667, 4n);
                                var $3676 = $3677;
                            } else {
                                var self = ($3666 === 53);
                                if (self) {
                                    var $3679 = Parser$Reply$value$(_sidx$5, $3667, 5n);
                                    var $3678 = $3679;
                                } else {
                                    var self = ($3666 === 54);
                                    if (self) {
                                        var $3681 = Parser$Reply$value$(_sidx$5, $3667, 6n);
                                        var $3680 = $3681;
                                    } else {
                                        var self = ($3666 === 55);
                                        if (self) {
                                            var $3683 = Parser$Reply$value$(_sidx$5, $3667, 7n);
                                            var $3682 = $3683;
                                        } else {
                                            var self = ($3666 === 56);
                                            if (self) {
                                                var $3685 = Parser$Reply$value$(_sidx$5, $3667, 8n);
                                                var $3684 = $3685;
                                            } else {
                                                var self = ($3666 === 57);
                                                if (self) {
                                                    var $3687 = Parser$Reply$value$(_sidx$5, $3667, 9n);
                                                    var $3686 = $3687;
                                                } else {
                                                    var $3688 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3686 = $3688;
                                                };
                                                var $3684 = $3686;
                                            };
                                            var $3682 = $3684;
                                        };
                                        var $3680 = $3682;
                                    };
                                    var $3678 = $3680;
                                };
                                var $3676 = $3678;
                            };
                            var $3674 = $3676;
                        };
                        var $3672 = $3674;
                    };
                    var $3670 = $3672;
                };
                var $3668 = $3670;
            };
            var $3664 = $3668;
        };
        return $3664;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $3689 = self.head;
                        var $3690 = self.tail;
                        var $3691 = Nat$from_base$go$(_b$1, $3690, (_b$1 * _p$3), (($3689 * _p$3) + _res$4));
                        return $3691;
                    case 'List.nil':
                        var $3692 = _res$4;
                        return $3692;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3693 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3693;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3695 = self.idx;
                var $3696 = self.code;
                var $3697 = self.err;
                var $3698 = Parser$Reply$error$($3695, $3696, $3697);
                var $3694 = $3698;
                break;
            case 'Parser.Reply.value':
                var $3699 = self.idx;
                var $3700 = self.code;
                var $3701 = self.val;
                var $3702 = Parser$Reply$value$($3699, $3700, Nat$from_base$(10n, $3701));
                var $3694 = $3702;
                break;
        };
        return $3694;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3704 = self.slice(0, -1);
                var $3705 = $3704;
                var $3703 = $3705;
                break;
            case 'i':
                var $3706 = self.slice(0, -1);
                var $3707 = $3706;
                var $3703 = $3707;
                break;
            case 'e':
                var $3708 = Bits$e;
                var $3703 = $3708;
                break;
        };
        return $3703;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3710 = self.slice(0, -1);
                var $3711 = ($3710 + '1');
                var $3709 = $3711;
                break;
            case 'i':
                var $3712 = self.slice(0, -1);
                var $3713 = (Bits$inc$($3712) + '0');
                var $3709 = $3713;
                break;
            case 'e':
                var $3714 = (Bits$e + '1');
                var $3709 = $3714;
                break;
        };
        return $3709;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3716 = Bool$false;
                var $3715 = $3716;
                break;
            case 'Maybe.some':
                var $3717 = Bool$true;
                var $3715 = $3717;
                break;
        };
        return $3715;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3718 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3718;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3720 = self.idx;
                var $3721 = self.code;
                var $3722 = self.err;
                var $3723 = Parser$Reply$error$($3720, $3721, $3722);
                var $3719 = $3723;
                break;
            case 'Parser.Reply.value':
                var $3724 = self.idx;
                var $3725 = self.code;
                var $3726 = self.val;
                var self = Kind$Parser$text$("?", $3724, $3725);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3728 = self.idx;
                        var $3729 = self.code;
                        var $3730 = self.err;
                        var $3731 = Parser$Reply$error$($3728, $3729, $3730);
                        var $3727 = $3731;
                        break;
                    case 'Parser.Reply.value':
                        var $3732 = self.idx;
                        var $3733 = self.code;
                        var self = Kind$Parser$name$($3732, $3733);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3735 = self.idx;
                                var $3736 = self.code;
                                var $3737 = self.err;
                                var $3738 = Parser$Reply$error$($3735, $3736, $3737);
                                var $3734 = $3738;
                                break;
                            case 'Parser.Reply.value':
                                var $3739 = self.idx;
                                var $3740 = self.code;
                                var $3741 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3744 = self.idx;
                                            var $3745 = self.code;
                                            var $3746 = self.err;
                                            var $3747 = Parser$Reply$error$($3744, $3745, $3746);
                                            var $3743 = $3747;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3748 = self.idx;
                                            var $3749 = self.code;
                                            var self = Parser$nat$($3748, $3749);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3751 = self.idx;
                                                    var $3752 = self.code;
                                                    var $3753 = self.err;
                                                    var $3754 = Parser$Reply$error$($3751, $3752, $3753);
                                                    var $3750 = $3754;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3755 = self.idx;
                                                    var $3756 = self.code;
                                                    var $3757 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3757)))));
                                                    var $3758 = Parser$Reply$value$($3755, $3756, _bits$20);
                                                    var $3750 = $3758;
                                                    break;
                                            };
                                            var $3743 = $3750;
                                            break;
                                    };
                                    return $3743;
                                }))($3739)($3740);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3759 = self.idx;
                                        var $3760 = self.code;
                                        var $3761 = self.err;
                                        var $3762 = Parser$Reply$error$($3759, $3760, $3761);
                                        var $3742 = $3762;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3763 = self.idx;
                                        var $3764 = self.code;
                                        var $3765 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3763, $3764);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3767 = self.idx;
                                                var $3768 = self.code;
                                                var $3769 = self.err;
                                                var $3770 = Parser$Reply$error$($3767, $3768, $3769);
                                                var self = $3770;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3771 = self.idx;
                                                var $3772 = self.code;
                                                var $3773 = self.val;
                                                var $3774 = Parser$Reply$value$($3771, $3772, Maybe$is_some$($3773));
                                                var self = $3774;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3775 = self.idx;
                                                var $3776 = self.code;
                                                var $3777 = self.err;
                                                var $3778 = Parser$Reply$error$($3775, $3776, $3777);
                                                var $3766 = $3778;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3779 = self.idx;
                                                var $3780 = self.code;
                                                var $3781 = self.val;
                                                var self = Kind$Parser$stop$($3726, $3779, $3780);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3783 = self.idx;
                                                        var $3784 = self.code;
                                                        var $3785 = self.err;
                                                        var $3786 = Parser$Reply$error$($3783, $3784, $3785);
                                                        var $3782 = $3786;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3787 = self.idx;
                                                        var $3788 = self.code;
                                                        var $3789 = self.val;
                                                        var $3790 = Parser$Reply$value$($3787, $3788, Kind$Term$ori$($3789, Kind$Term$gol$($3741, $3765, $3781)));
                                                        var $3782 = $3790;
                                                        break;
                                                };
                                                var $3766 = $3782;
                                                break;
                                        };
                                        var $3742 = $3766;
                                        break;
                                };
                                var $3734 = $3742;
                                break;
                        };
                        var $3727 = $3734;
                        break;
                };
                var $3719 = $3727;
                break;
        };
        return $3719;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3792 = self.idx;
                var $3793 = self.code;
                var $3794 = self.err;
                var $3795 = Parser$Reply$error$($3792, $3793, $3794);
                var $3791 = $3795;
                break;
            case 'Parser.Reply.value':
                var $3796 = self.idx;
                var $3797 = self.code;
                var $3798 = self.val;
                var self = Kind$Parser$text$("_", $3796, $3797);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3800 = self.idx;
                        var $3801 = self.code;
                        var $3802 = self.err;
                        var $3803 = Parser$Reply$error$($3800, $3801, $3802);
                        var $3799 = $3803;
                        break;
                    case 'Parser.Reply.value':
                        var $3804 = self.idx;
                        var $3805 = self.code;
                        var self = Kind$Parser$stop$($3798, $3804, $3805);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3807 = self.idx;
                                var $3808 = self.code;
                                var $3809 = self.err;
                                var $3810 = Parser$Reply$error$($3807, $3808, $3809);
                                var $3806 = $3810;
                                break;
                            case 'Parser.Reply.value':
                                var $3811 = self.idx;
                                var $3812 = self.code;
                                var $3813 = self.val;
                                var $3814 = Parser$Reply$value$($3811, $3812, Kind$Term$ori$($3813, Kind$Term$hol$(Bits$e)));
                                var $3806 = $3814;
                                break;
                        };
                        var $3799 = $3806;
                        break;
                };
                var $3791 = $3799;
                break;
        };
        return $3791;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3816 = self.idx;
                var $3817 = self.code;
                var $3818 = self.err;
                var $3819 = Parser$Reply$error$($3816, $3817, $3818);
                var $3815 = $3819;
                break;
            case 'Parser.Reply.value':
                var $3820 = self.idx;
                var $3821 = self.code;
                var $3822 = self.val;
                var self = Kind$Parser$spaces($3820)($3821);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3824 = self.idx;
                        var $3825 = self.code;
                        var $3826 = self.err;
                        var $3827 = Parser$Reply$error$($3824, $3825, $3826);
                        var $3823 = $3827;
                        break;
                    case 'Parser.Reply.value':
                        var $3828 = self.idx;
                        var $3829 = self.code;
                        var self = Parser$nat$($3828, $3829);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3831 = self.idx;
                                var $3832 = self.code;
                                var $3833 = self.err;
                                var $3834 = Parser$Reply$error$($3831, $3832, $3833);
                                var $3830 = $3834;
                                break;
                            case 'Parser.Reply.value':
                                var $3835 = self.idx;
                                var $3836 = self.code;
                                var $3837 = self.val;
                                var self = Parser$text$("b", $3835, $3836);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3839 = self.idx;
                                        var $3840 = self.code;
                                        var $3841 = self.err;
                                        var $3842 = Parser$Reply$error$($3839, $3840, $3841);
                                        var $3838 = $3842;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3843 = self.idx;
                                        var $3844 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($3837));
                                        var self = Kind$Parser$stop$($3822, $3843, $3844);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3846 = self.idx;
                                                var $3847 = self.code;
                                                var $3848 = self.err;
                                                var $3849 = Parser$Reply$error$($3846, $3847, $3848);
                                                var $3845 = $3849;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3850 = self.idx;
                                                var $3851 = self.code;
                                                var $3852 = self.val;
                                                var $3853 = Parser$Reply$value$($3850, $3851, Kind$Term$ori$($3852, _term$16));
                                                var $3845 = $3853;
                                                break;
                                        };
                                        var $3838 = $3845;
                                        break;
                                };
                                var $3830 = $3838;
                                break;
                        };
                        var $3823 = $3830;
                        break;
                };
                var $3815 = $3823;
                break;
        };
        return $3815;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3855 = self.idx;
                var $3856 = self.code;
                var $3857 = self.err;
                var $3858 = Parser$Reply$error$($3855, $3856, $3857);
                var $3854 = $3858;
                break;
            case 'Parser.Reply.value':
                var $3859 = self.idx;
                var $3860 = self.code;
                var $3861 = self.val;
                var self = Kind$Parser$spaces($3859)($3860);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3863 = self.idx;
                        var $3864 = self.code;
                        var $3865 = self.err;
                        var $3866 = Parser$Reply$error$($3863, $3864, $3865);
                        var $3862 = $3866;
                        break;
                    case 'Parser.Reply.value':
                        var $3867 = self.idx;
                        var $3868 = self.code;
                        var self = Parser$nat$($3867, $3868);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3870 = self.idx;
                                var $3871 = self.code;
                                var $3872 = self.err;
                                var $3873 = Parser$Reply$error$($3870, $3871, $3872);
                                var $3869 = $3873;
                                break;
                            case 'Parser.Reply.value':
                                var $3874 = self.idx;
                                var $3875 = self.code;
                                var $3876 = self.val;
                                var self = Parser$text$("s", $3874, $3875);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3878 = self.idx;
                                        var $3879 = self.code;
                                        var $3880 = self.err;
                                        var $3881 = Parser$Reply$error$($3878, $3879, $3880);
                                        var $3877 = $3881;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3882 = self.idx;
                                        var $3883 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($3876));
                                        var self = Kind$Parser$stop$($3861, $3882, $3883);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3885 = self.idx;
                                                var $3886 = self.code;
                                                var $3887 = self.err;
                                                var $3888 = Parser$Reply$error$($3885, $3886, $3887);
                                                var $3884 = $3888;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3889 = self.idx;
                                                var $3890 = self.code;
                                                var $3891 = self.val;
                                                var $3892 = Parser$Reply$value$($3889, $3890, Kind$Term$ori$($3891, _term$16));
                                                var $3884 = $3892;
                                                break;
                                        };
                                        var $3877 = $3884;
                                        break;
                                };
                                var $3869 = $3877;
                                break;
                        };
                        var $3862 = $3869;
                        break;
                };
                var $3854 = $3862;
                break;
        };
        return $3854;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3894 = self.idx;
                var $3895 = self.code;
                var $3896 = self.err;
                var $3897 = Parser$Reply$error$($3894, $3895, $3896);
                var $3893 = $3897;
                break;
            case 'Parser.Reply.value':
                var $3898 = self.idx;
                var $3899 = self.code;
                var $3900 = self.val;
                var self = Kind$Parser$spaces($3898)($3899);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3902 = self.idx;
                        var $3903 = self.code;
                        var $3904 = self.err;
                        var $3905 = Parser$Reply$error$($3902, $3903, $3904);
                        var $3901 = $3905;
                        break;
                    case 'Parser.Reply.value':
                        var $3906 = self.idx;
                        var $3907 = self.code;
                        var self = Parser$nat$($3906, $3907);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3909 = self.idx;
                                var $3910 = self.code;
                                var $3911 = self.err;
                                var $3912 = Parser$Reply$error$($3909, $3910, $3911);
                                var $3908 = $3912;
                                break;
                            case 'Parser.Reply.value':
                                var $3913 = self.idx;
                                var $3914 = self.code;
                                var $3915 = self.val;
                                var self = Parser$text$("u", $3913, $3914);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3917 = self.idx;
                                        var $3918 = self.code;
                                        var $3919 = self.err;
                                        var $3920 = Parser$Reply$error$($3917, $3918, $3919);
                                        var $3916 = $3920;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3921 = self.idx;
                                        var $3922 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($3915));
                                        var self = Kind$Parser$stop$($3900, $3921, $3922);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3924 = self.idx;
                                                var $3925 = self.code;
                                                var $3926 = self.err;
                                                var $3927 = Parser$Reply$error$($3924, $3925, $3926);
                                                var $3923 = $3927;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3928 = self.idx;
                                                var $3929 = self.code;
                                                var $3930 = self.val;
                                                var $3931 = Parser$Reply$value$($3928, $3929, Kind$Term$ori$($3930, _term$16));
                                                var $3923 = $3931;
                                                break;
                                        };
                                        var $3916 = $3923;
                                        break;
                                };
                                var $3908 = $3916;
                                break;
                        };
                        var $3901 = $3908;
                        break;
                };
                var $3893 = $3901;
                break;
        };
        return $3893;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3933 = self.idx;
                var $3934 = self.code;
                var $3935 = self.err;
                var $3936 = Parser$Reply$error$($3933, $3934, $3935);
                var $3932 = $3936;
                break;
            case 'Parser.Reply.value':
                var $3937 = self.idx;
                var $3938 = self.code;
                var $3939 = self.val;
                var self = Kind$Parser$spaces($3937)($3938);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3941 = self.idx;
                        var $3942 = self.code;
                        var $3943 = self.err;
                        var $3944 = Parser$Reply$error$($3941, $3942, $3943);
                        var $3940 = $3944;
                        break;
                    case 'Parser.Reply.value':
                        var $3945 = self.idx;
                        var $3946 = self.code;
                        var self = Parser$nat$($3945, $3946);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3948 = self.idx;
                                var $3949 = self.code;
                                var $3950 = self.err;
                                var $3951 = Parser$Reply$error$($3948, $3949, $3950);
                                var $3947 = $3951;
                                break;
                            case 'Parser.Reply.value':
                                var $3952 = self.idx;
                                var $3953 = self.code;
                                var $3954 = self.val;
                                var self = Parser$text$("l", $3952, $3953);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3956 = self.idx;
                                        var $3957 = self.code;
                                        var $3958 = self.err;
                                        var $3959 = Parser$Reply$error$($3956, $3957, $3958);
                                        var $3955 = $3959;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3960 = self.idx;
                                        var $3961 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($3954));
                                        var self = Kind$Parser$stop$($3939, $3960, $3961);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3963 = self.idx;
                                                var $3964 = self.code;
                                                var $3965 = self.err;
                                                var $3966 = Parser$Reply$error$($3963, $3964, $3965);
                                                var $3962 = $3966;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3967 = self.idx;
                                                var $3968 = self.code;
                                                var $3969 = self.val;
                                                var $3970 = Parser$Reply$value$($3967, $3968, Kind$Term$ori$($3969, _term$16));
                                                var $3962 = $3970;
                                                break;
                                        };
                                        var $3955 = $3962;
                                        break;
                                };
                                var $3947 = $3955;
                                break;
                        };
                        var $3940 = $3947;
                        break;
                };
                var $3932 = $3940;
                break;
        };
        return $3932;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3972 = self.idx;
                var $3973 = self.code;
                var $3974 = self.err;
                var $3975 = Parser$Reply$error$($3972, $3973, $3974);
                var $3971 = $3975;
                break;
            case 'Parser.Reply.value':
                var $3976 = self.idx;
                var $3977 = self.code;
                var $3978 = self.val;
                var self = Kind$Parser$spaces($3976)($3977);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3980 = self.idx;
                        var $3981 = self.code;
                        var $3982 = self.err;
                        var $3983 = Parser$Reply$error$($3980, $3981, $3982);
                        var $3979 = $3983;
                        break;
                    case 'Parser.Reply.value':
                        var $3984 = self.idx;
                        var $3985 = self.code;
                        var self = Parser$nat$($3984, $3985);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3987 = self.idx;
                                var $3988 = self.code;
                                var $3989 = self.err;
                                var $3990 = Parser$Reply$error$($3987, $3988, $3989);
                                var $3986 = $3990;
                                break;
                            case 'Parser.Reply.value':
                                var $3991 = self.idx;
                                var $3992 = self.code;
                                var $3993 = self.val;
                                var self = Kind$Parser$stop$($3978, $3991, $3992);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3995 = self.idx;
                                        var $3996 = self.code;
                                        var $3997 = self.err;
                                        var $3998 = Parser$Reply$error$($3995, $3996, $3997);
                                        var $3994 = $3998;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3999 = self.idx;
                                        var $4000 = self.code;
                                        var $4001 = self.val;
                                        var $4002 = Parser$Reply$value$($3999, $4000, Kind$Term$ori$($4001, Kind$Term$nat$($3993)));
                                        var $3994 = $4002;
                                        break;
                                };
                                var $3986 = $3994;
                                break;
                        };
                        var $3979 = $3986;
                        break;
                };
                var $3971 = $3979;
                break;
        };
        return $3971;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4004 = self.idx;
                var $4005 = self.code;
                var $4006 = self.err;
                var $4007 = Parser$Reply$error$($4004, $4005, $4006);
                var $4003 = $4007;
                break;
            case 'Parser.Reply.value':
                var $4008 = self.idx;
                var $4009 = self.code;
                var $4010 = self.val;
                var self = Kind$Parser$name1$($4008, $4009);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4012 = self.idx;
                        var $4013 = self.code;
                        var $4014 = self.err;
                        var $4015 = Parser$Reply$error$($4012, $4013, $4014);
                        var $4011 = $4015;
                        break;
                    case 'Parser.Reply.value':
                        var $4016 = self.idx;
                        var $4017 = self.code;
                        var $4018 = self.val;
                        var self = ($4018 === "case");
                        if (self) {
                            var $4020 = Parser$fail("Reserved keyword.");
                            var $4019 = $4020;
                        } else {
                            var self = ($4018 === "do");
                            if (self) {
                                var $4022 = Parser$fail("Reserved keyword.");
                                var $4021 = $4022;
                            } else {
                                var self = ($4018 === "if");
                                if (self) {
                                    var $4024 = Parser$fail("Reserved keyword.");
                                    var $4023 = $4024;
                                } else {
                                    var self = ($4018 === "with");
                                    if (self) {
                                        var $4026 = Parser$fail("Reserved keyword.");
                                        var $4025 = $4026;
                                    } else {
                                        var self = ($4018 === "let");
                                        if (self) {
                                            var $4028 = Parser$fail("Reserved keyword.");
                                            var $4027 = $4028;
                                        } else {
                                            var self = ($4018 === "def");
                                            if (self) {
                                                var $4030 = Parser$fail("Reserved keyword.");
                                                var $4029 = $4030;
                                            } else {
                                                var self = ($4018 === "Type");
                                                if (self) {
                                                    var $4032 = (_idx$9 => _code$10 => {
                                                        var $4033 = Parser$Reply$value$(_idx$9, _code$10, Kind$Term$typ);
                                                        return $4033;
                                                    });
                                                    var $4031 = $4032;
                                                } else {
                                                    var self = ($4018 === "true");
                                                    if (self) {
                                                        var $4035 = (_idx$9 => _code$10 => {
                                                            var $4036 = Parser$Reply$value$(_idx$9, _code$10, Kind$Term$ref$("Bool.true"));
                                                            return $4036;
                                                        });
                                                        var $4034 = $4035;
                                                    } else {
                                                        var self = ($4018 === "false");
                                                        if (self) {
                                                            var $4038 = (_idx$9 => _code$10 => {
                                                                var $4039 = Parser$Reply$value$(_idx$9, _code$10, Kind$Term$ref$("Bool.false"));
                                                                return $4039;
                                                            });
                                                            var $4037 = $4038;
                                                        } else {
                                                            var self = ($4018 === "unit");
                                                            if (self) {
                                                                var $4041 = (_idx$9 => _code$10 => {
                                                                    var $4042 = Parser$Reply$value$(_idx$9, _code$10, Kind$Term$ref$("Unit.new"));
                                                                    return $4042;
                                                                });
                                                                var $4040 = $4041;
                                                            } else {
                                                                var self = ($4018 === "none");
                                                                if (self) {
                                                                    var _term$9 = Kind$Term$ref$("Maybe.none");
                                                                    var _term$10 = Kind$Term$app$(_term$9, Kind$Term$hol$(Bits$e));
                                                                    var $4044 = (_idx$11 => _code$12 => {
                                                                        var $4045 = Parser$Reply$value$(_idx$11, _code$12, _term$10);
                                                                        return $4045;
                                                                    });
                                                                    var $4043 = $4044;
                                                                } else {
                                                                    var self = ($4018 === "refl");
                                                                    if (self) {
                                                                        var _term$9 = Kind$Term$ref$("Equal.refl");
                                                                        var _term$10 = Kind$Term$app$(_term$9, Kind$Term$hol$(Bits$e));
                                                                        var _term$11 = Kind$Term$app$(_term$10, Kind$Term$hol$(Bits$e));
                                                                        var $4047 = (_idx$12 => _code$13 => {
                                                                            var $4048 = Parser$Reply$value$(_idx$12, _code$13, _term$11);
                                                                            return $4048;
                                                                        });
                                                                        var $4046 = $4047;
                                                                    } else {
                                                                        var $4049 = (_idx$9 => _code$10 => {
                                                                            var self = Kind$Parser$stop$($4010, _idx$9, _code$10);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4051 = self.idx;
                                                                                    var $4052 = self.code;
                                                                                    var $4053 = self.err;
                                                                                    var $4054 = Parser$Reply$error$($4051, $4052, $4053);
                                                                                    var $4050 = $4054;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4055 = self.idx;
                                                                                    var $4056 = self.code;
                                                                                    var $4057 = self.val;
                                                                                    var $4058 = Parser$Reply$value$($4055, $4056, Kind$Term$ori$($4057, Kind$Term$ref$($4018)));
                                                                                    var $4050 = $4058;
                                                                                    break;
                                                                            };
                                                                            return $4050;
                                                                        });
                                                                        var $4046 = $4049;
                                                                    };
                                                                    var $4043 = $4046;
                                                                };
                                                                var $4040 = $4043;
                                                            };
                                                            var $4037 = $4040;
                                                        };
                                                        var $4034 = $4037;
                                                    };
                                                    var $4031 = $4034;
                                                };
                                                var $4029 = $4031;
                                            };
                                            var $4027 = $4029;
                                        };
                                        var $4025 = $4027;
                                    };
                                    var $4023 = $4025;
                                };
                                var $4021 = $4023;
                            };
                            var $4019 = $4021;
                        };
                        var $4019 = $4019($4016)($4017);
                        var $4011 = $4019;
                        break;
                };
                var $4003 = $4011;
                break;
        };
        return $4003;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4060 = self.idx;
                var $4061 = self.code;
                var $4062 = self.err;
                var $4063 = Parser$Reply$error$($4060, $4061, $4062);
                var $4059 = $4063;
                break;
            case 'Parser.Reply.value':
                var $4064 = self.idx;
                var $4065 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $4064, $4065);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4067 = self.idx;
                        var $4068 = self.code;
                        var $4069 = self.err;
                        var $4070 = Parser$Reply$error$($4067, $4068, $4069);
                        var $4066 = $4070;
                        break;
                    case 'Parser.Reply.value':
                        var $4071 = self.idx;
                        var $4072 = self.code;
                        var $4073 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4071, $4072);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4075 = self.idx;
                                var $4076 = self.code;
                                var $4077 = self.err;
                                var $4078 = Parser$Reply$error$($4075, $4076, $4077);
                                var $4074 = $4078;
                                break;
                            case 'Parser.Reply.value':
                                var $4079 = self.idx;
                                var $4080 = self.code;
                                var $4081 = self.val;
                                var _expr$14 = (() => {
                                    var $4084 = _func$2;
                                    var $4085 = $4073;
                                    let _f$15 = $4084;
                                    let _x$14;
                                    while ($4085._ === 'List.cons') {
                                        _x$14 = $4085.head;
                                        var $4084 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $4084;
                                        $4085 = $4085.tail;
                                    }
                                    return _f$15;
                                })();
                                var $4082 = Parser$Reply$value$($4079, $4080, Kind$Term$ori$($4081, _expr$14));
                                var $4074 = $4082;
                                break;
                        };
                        var $4066 = $4074;
                        break;
                };
                var $4059 = $4066;
                break;
        };
        return $4059;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4087 = self.idx;
                var $4088 = self.code;
                var $4089 = self.err;
                var $4090 = Parser$Reply$error$($4087, $4088, $4089);
                var $4086 = $4090;
                break;
            case 'Parser.Reply.value':
                var $4091 = self.idx;
                var $4092 = self.code;
                var $4093 = Parser$text$(_text$1, $4091, $4092);
                var $4086 = $4093;
                break;
        };
        return $4086;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4095 = self.idx;
                var $4096 = self.code;
                var $4097 = self.err;
                var $4098 = Parser$Reply$error$($4095, $4096, $4097);
                var $4094 = $4098;
                break;
            case 'Parser.Reply.value':
                var $4099 = self.idx;
                var $4100 = self.code;
                var $4101 = self.val;
                var self = Parser$text$("<", $4099, $4100);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4103 = self.idx;
                        var $4104 = self.code;
                        var $4105 = self.err;
                        var $4106 = Parser$Reply$error$($4103, $4104, $4105);
                        var $4102 = $4106;
                        break;
                    case 'Parser.Reply.value':
                        var $4107 = self.idx;
                        var $4108 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $4107, $4108);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4110 = self.idx;
                                var $4111 = self.code;
                                var $4112 = self.err;
                                var $4113 = Parser$Reply$error$($4110, $4111, $4112);
                                var $4109 = $4113;
                                break;
                            case 'Parser.Reply.value':
                                var $4114 = self.idx;
                                var $4115 = self.code;
                                var $4116 = self.val;
                                var self = Kind$Parser$stop$($4101, $4114, $4115);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4118 = self.idx;
                                        var $4119 = self.code;
                                        var $4120 = self.err;
                                        var $4121 = Parser$Reply$error$($4118, $4119, $4120);
                                        var $4117 = $4121;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4122 = self.idx;
                                        var $4123 = self.code;
                                        var $4124 = self.val;
                                        var _expr$17 = (() => {
                                            var $4127 = _func$2;
                                            var $4128 = $4116;
                                            let _f$18 = $4127;
                                            let _x$17;
                                            while ($4128._ === 'List.cons') {
                                                _x$17 = $4128.head;
                                                var $4127 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $4127;
                                                $4128 = $4128.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $4125 = Parser$Reply$value$($4122, $4123, Kind$Term$ori$($4124, _expr$17));
                                        var $4117 = $4125;
                                        break;
                                };
                                var $4109 = $4117;
                                break;
                        };
                        var $4102 = $4109;
                        break;
                };
                var $4094 = $4102;
                break;
        };
        return $4094;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4130 = self.idx;
                var $4131 = self.code;
                var $4132 = self.err;
                var $4133 = Parser$Reply$error$($4130, $4131, $4132);
                var $4129 = $4133;
                break;
            case 'Parser.Reply.value':
                var $4134 = self.idx;
                var $4135 = self.code;
                var self = Kind$Parser$term$($4134, $4135);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4137 = self.idx;
                        var $4138 = self.code;
                        var $4139 = self.err;
                        var $4140 = Parser$Reply$error$($4137, $4138, $4139);
                        var $4136 = $4140;
                        break;
                    case 'Parser.Reply.value':
                        var $4141 = self.idx;
                        var $4142 = self.code;
                        var $4143 = self.val;
                        var self = Kind$Parser$text$("]", $4141, $4142);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4145 = self.idx;
                                var $4146 = self.code;
                                var $4147 = self.err;
                                var $4148 = Parser$Reply$error$($4145, $4146, $4147);
                                var $4144 = $4148;
                                break;
                            case 'Parser.Reply.value':
                                var $4149 = self.idx;
                                var $4150 = self.code;
                                var self = Kind$Parser$text$("<-", $4149, $4150);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4152 = self.idx;
                                        var $4153 = self.code;
                                        var $4154 = self.err;
                                        var $4155 = Parser$Reply$error$($4152, $4153, $4154);
                                        var $4151 = $4155;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4156 = self.idx;
                                        var $4157 = self.code;
                                        var self = Kind$Parser$term$($4156, $4157);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4159 = self.idx;
                                                var $4160 = self.code;
                                                var $4161 = self.err;
                                                var $4162 = Parser$Reply$error$($4159, $4160, $4161);
                                                var $4158 = $4162;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4163 = self.idx;
                                                var $4164 = self.code;
                                                var $4165 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $4163, $4164);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4167 = self.idx;
                                                        var $4168 = self.code;
                                                        var $4169 = self.err;
                                                        var $4170 = Parser$Reply$error$($4167, $4168, $4169);
                                                        var $4166 = $4170;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4171 = self.idx;
                                                        var $4172 = self.code;
                                                        var $4173 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $4143);
                                                        var _term$26 = Kind$Term$app$(_term$25, $4165);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $4174 = Parser$Reply$value$($4171, $4172, Kind$Term$ori$($4173, _term$27));
                                                        var $4166 = $4174;
                                                        break;
                                                };
                                                var $4158 = $4166;
                                                break;
                                        };
                                        var $4151 = $4158;
                                        break;
                                };
                                var $4144 = $4151;
                                break;
                        };
                        var $4136 = $4144;
                        break;
                };
                var $4129 = $4136;
                break;
        };
        return $4129;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4176 = self.idx;
                var $4177 = self.code;
                var $4178 = self.err;
                var $4179 = Parser$Reply$error$($4176, $4177, $4178);
                var $4175 = $4179;
                break;
            case 'Parser.Reply.value':
                var $4180 = self.idx;
                var $4181 = self.code;
                var self = Kind$Parser$term$($4180, $4181);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4183 = self.idx;
                        var $4184 = self.code;
                        var $4185 = self.err;
                        var $4186 = Parser$Reply$error$($4183, $4184, $4185);
                        var $4182 = $4186;
                        break;
                    case 'Parser.Reply.value':
                        var $4187 = self.idx;
                        var $4188 = self.code;
                        var $4189 = self.val;
                        var self = Kind$Parser$text$("]", $4187, $4188);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4191 = self.idx;
                                var $4192 = self.code;
                                var $4193 = self.err;
                                var $4194 = Parser$Reply$error$($4191, $4192, $4193);
                                var $4190 = $4194;
                                break;
                            case 'Parser.Reply.value':
                                var $4195 = self.idx;
                                var $4196 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $4195, $4196);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4198 = self.idx;
                                        var $4199 = self.code;
                                        var $4200 = self.err;
                                        var $4201 = Parser$Reply$error$($4198, $4199, $4200);
                                        var $4197 = $4201;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4202 = self.idx;
                                        var $4203 = self.code;
                                        var $4204 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $4189);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $4205 = Parser$Reply$value$($4202, $4203, Kind$Term$ori$($4204, _term$20));
                                        var $4197 = $4205;
                                        break;
                                };
                                var $4190 = $4197;
                                break;
                        };
                        var $4182 = $4190;
                        break;
                };
                var $4175 = $4182;
                break;
        };
        return $4175;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4207 = self.idx;
                var $4208 = self.code;
                var $4209 = self.err;
                var $4210 = Parser$Reply$error$($4207, $4208, $4209);
                var $4206 = $4210;
                break;
            case 'Parser.Reply.value':
                var $4211 = self.idx;
                var $4212 = self.code;
                var self = Kind$Parser$term$($4211, $4212);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4214 = self.idx;
                        var $4215 = self.code;
                        var $4216 = self.err;
                        var $4217 = Parser$Reply$error$($4214, $4215, $4216);
                        var $4213 = $4217;
                        break;
                    case 'Parser.Reply.value':
                        var $4218 = self.idx;
                        var $4219 = self.code;
                        var $4220 = self.val;
                        var self = Kind$Parser$text$("}", $4218, $4219);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4222 = self.idx;
                                var $4223 = self.code;
                                var $4224 = self.err;
                                var $4225 = Parser$Reply$error$($4222, $4223, $4224);
                                var $4221 = $4225;
                                break;
                            case 'Parser.Reply.value':
                                var $4226 = self.idx;
                                var $4227 = self.code;
                                var self = Kind$Parser$text$("<-", $4226, $4227);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4229 = self.idx;
                                        var $4230 = self.code;
                                        var $4231 = self.err;
                                        var $4232 = Parser$Reply$error$($4229, $4230, $4231);
                                        var $4228 = $4232;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4233 = self.idx;
                                        var $4234 = self.code;
                                        var self = Kind$Parser$term$($4233, $4234);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4236 = self.idx;
                                                var $4237 = self.code;
                                                var $4238 = self.err;
                                                var $4239 = Parser$Reply$error$($4236, $4237, $4238);
                                                var $4235 = $4239;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4240 = self.idx;
                                                var $4241 = self.code;
                                                var $4242 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $4240, $4241);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4244 = self.idx;
                                                        var $4245 = self.code;
                                                        var $4246 = self.err;
                                                        var $4247 = Parser$Reply$error$($4244, $4245, $4246);
                                                        var $4243 = $4247;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4248 = self.idx;
                                                        var $4249 = self.code;
                                                        var $4250 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $4220);
                                                        var _term$26 = Kind$Term$app$(_term$25, $4242);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $4251 = Parser$Reply$value$($4248, $4249, Kind$Term$ori$($4250, _term$27));
                                                        var $4243 = $4251;
                                                        break;
                                                };
                                                var $4235 = $4243;
                                                break;
                                        };
                                        var $4228 = $4235;
                                        break;
                                };
                                var $4221 = $4228;
                                break;
                        };
                        var $4213 = $4221;
                        break;
                };
                var $4206 = $4213;
                break;
        };
        return $4206;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4253 = self.idx;
                var $4254 = self.code;
                var $4255 = self.err;
                var $4256 = Parser$Reply$error$($4253, $4254, $4255);
                var $4252 = $4256;
                break;
            case 'Parser.Reply.value':
                var $4257 = self.idx;
                var $4258 = self.code;
                var self = Kind$Parser$term$($4257, $4258);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4260 = self.idx;
                        var $4261 = self.code;
                        var $4262 = self.err;
                        var $4263 = Parser$Reply$error$($4260, $4261, $4262);
                        var $4259 = $4263;
                        break;
                    case 'Parser.Reply.value':
                        var $4264 = self.idx;
                        var $4265 = self.code;
                        var $4266 = self.val;
                        var self = Kind$Parser$text$("}", $4264, $4265);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4268 = self.idx;
                                var $4269 = self.code;
                                var $4270 = self.err;
                                var $4271 = Parser$Reply$error$($4268, $4269, $4270);
                                var $4267 = $4271;
                                break;
                            case 'Parser.Reply.value':
                                var $4272 = self.idx;
                                var $4273 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $4272, $4273);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4275 = self.idx;
                                        var $4276 = self.code;
                                        var $4277 = self.err;
                                        var $4278 = Parser$Reply$error$($4275, $4276, $4277);
                                        var $4274 = $4278;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4279 = self.idx;
                                        var $4280 = self.code;
                                        var $4281 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $4266);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $4282 = Parser$Reply$value$($4279, $4280, Kind$Term$ori$($4281, _term$20));
                                        var $4274 = $4282;
                                        break;
                                };
                                var $4267 = $4274;
                                break;
                        };
                        var $4259 = $4267;
                        break;
                };
                var $4252 = $4259;
                break;
        };
        return $4252;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4284 = self.idx;
                var $4285 = self.code;
                var $4286 = self.err;
                var $4287 = Parser$Reply$error$($4284, $4285, $4286);
                var $4283 = $4287;
                break;
            case 'Parser.Reply.value':
                var $4288 = self.idx;
                var $4289 = self.code;
                var self = Kind$Parser$term$($4288, $4289);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4291 = self.idx;
                        var $4292 = self.code;
                        var $4293 = self.err;
                        var $4294 = Parser$Reply$error$($4291, $4292, $4293);
                        var $4290 = $4294;
                        break;
                    case 'Parser.Reply.value':
                        var $4295 = self.idx;
                        var $4296 = self.code;
                        var $4297 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4295, $4296);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4299 = self.idx;
                                var $4300 = self.code;
                                var $4301 = self.err;
                                var $4302 = Parser$Reply$error$($4299, $4300, $4301);
                                var $4298 = $4302;
                                break;
                            case 'Parser.Reply.value':
                                var $4303 = self.idx;
                                var $4304 = self.code;
                                var $4305 = self.val;
                                var $4306 = Parser$Reply$value$($4303, $4304, Kind$Term$ori$($4305, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $4307 = $4297;
                                    return $4307;
                                }))));
                                var $4298 = $4306;
                                break;
                        };
                        var $4290 = $4298;
                        break;
                };
                var $4283 = $4290;
                break;
        };
        return $4283;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4309 = self.idx;
                var $4310 = self.code;
                var $4311 = self.err;
                var $4312 = Parser$Reply$error$($4309, $4310, $4311);
                var $4308 = $4312;
                break;
            case 'Parser.Reply.value':
                var $4313 = self.idx;
                var $4314 = self.code;
                var self = Kind$Parser$term$($4313, $4314);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4316 = self.idx;
                        var $4317 = self.code;
                        var $4318 = self.err;
                        var $4319 = Parser$Reply$error$($4316, $4317, $4318);
                        var $4315 = $4319;
                        break;
                    case 'Parser.Reply.value':
                        var $4320 = self.idx;
                        var $4321 = self.code;
                        var $4322 = self.val;
                        var self = Kind$Parser$stop$(_init$3, $4320, $4321);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4324 = self.idx;
                                var $4325 = self.code;
                                var $4326 = self.err;
                                var $4327 = Parser$Reply$error$($4324, $4325, $4326);
                                var $4323 = $4327;
                                break;
                            case 'Parser.Reply.value':
                                var $4328 = self.idx;
                                var $4329 = self.code;
                                var $4330 = self.val;
                                var _term$16 = Kind$Term$ref$(_ref$2);
                                var _term$17 = Kind$Term$app$(_term$16, _val0$4);
                                var _term$18 = Kind$Term$app$(_term$17, $4322);
                                var $4331 = Parser$Reply$value$($4328, $4329, Kind$Term$ori$($4330, _term$18));
                                var $4323 = $4331;
                                break;
                        };
                        var $4315 = $4323;
                        break;
                };
                var $4308 = $4315;
                break;
        };
        return $4308;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4333 = self.idx;
                var $4334 = self.code;
                var $4335 = self.err;
                var $4336 = Parser$Reply$error$($4333, $4334, $4335);
                var $4332 = $4336;
                break;
            case 'Parser.Reply.value':
                var $4337 = self.idx;
                var $4338 = self.code;
                var self = Kind$Parser$term$($4337, $4338);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4340 = self.idx;
                        var $4341 = self.code;
                        var $4342 = self.err;
                        var $4343 = Parser$Reply$error$($4340, $4341, $4342);
                        var $4339 = $4343;
                        break;
                    case 'Parser.Reply.value':
                        var $4344 = self.idx;
                        var $4345 = self.code;
                        var $4346 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4344, $4345);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4348 = self.idx;
                                var $4349 = self.code;
                                var $4350 = self.err;
                                var $4351 = Parser$Reply$error$($4348, $4349, $4350);
                                var $4347 = $4351;
                                break;
                            case 'Parser.Reply.value':
                                var $4352 = self.idx;
                                var $4353 = self.code;
                                var $4354 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4346);
                                var $4355 = Parser$Reply$value$($4352, $4353, Kind$Term$ori$($4354, _term$17));
                                var $4347 = $4355;
                                break;
                        };
                        var $4339 = $4347;
                        break;
                };
                var $4332 = $4339;
                break;
        };
        return $4332;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4357 = self.idx;
                var $4358 = self.code;
                var $4359 = self.err;
                var $4360 = Parser$Reply$error$($4357, $4358, $4359);
                var $4356 = $4360;
                break;
            case 'Parser.Reply.value':
                var $4361 = self.idx;
                var $4362 = self.code;
                var self = Kind$Parser$term$($4361, $4362);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4364 = self.idx;
                        var $4365 = self.code;
                        var $4366 = self.err;
                        var $4367 = Parser$Reply$error$($4364, $4365, $4366);
                        var $4363 = $4367;
                        break;
                    case 'Parser.Reply.value':
                        var $4368 = self.idx;
                        var $4369 = self.code;
                        var $4370 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4368, $4369);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4372 = self.idx;
                                var $4373 = self.code;
                                var $4374 = self.err;
                                var $4375 = Parser$Reply$error$($4372, $4373, $4374);
                                var $4371 = $4375;
                                break;
                            case 'Parser.Reply.value':
                                var $4376 = self.idx;
                                var $4377 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4370);
                                var self = Kind$Parser$stop$(_init$1, $4376, $4377);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4379 = self.idx;
                                        var $4380 = self.code;
                                        var $4381 = self.err;
                                        var $4382 = Parser$Reply$error$($4379, $4380, $4381);
                                        var $4378 = $4382;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4383 = self.idx;
                                        var $4384 = self.code;
                                        var $4385 = self.val;
                                        var $4386 = Parser$Reply$value$($4383, $4384, Kind$Term$ori$($4385, _term$17));
                                        var $4378 = $4386;
                                        break;
                                };
                                var $4371 = $4378;
                                break;
                        };
                        var $4363 = $4371;
                        break;
                };
                var $4356 = $4363;
                break;
        };
        return $4356;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4388 = self.idx;
                var $4389 = self.code;
                var $4390 = self.err;
                var $4391 = Parser$Reply$error$($4388, $4389, $4390);
                var $4387 = $4391;
                break;
            case 'Parser.Reply.value':
                var $4392 = self.idx;
                var $4393 = self.code;
                var self = Kind$Parser$term$($4392, $4393);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4395 = self.idx;
                        var $4396 = self.code;
                        var $4397 = self.err;
                        var $4398 = Parser$Reply$error$($4395, $4396, $4397);
                        var $4394 = $4398;
                        break;
                    case 'Parser.Reply.value':
                        var $4399 = self.idx;
                        var $4400 = self.code;
                        var $4401 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4399, $4400);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4403 = self.idx;
                                var $4404 = self.code;
                                var $4405 = self.err;
                                var $4406 = Parser$Reply$error$($4403, $4404, $4405);
                                var $4402 = $4406;
                                break;
                            case 'Parser.Reply.value':
                                var $4407 = self.idx;
                                var $4408 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4401);
                                var self = Kind$Parser$stop$(_init$1, $4407, $4408);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4410 = self.idx;
                                        var $4411 = self.code;
                                        var $4412 = self.err;
                                        var $4413 = Parser$Reply$error$($4410, $4411, $4412);
                                        var $4409 = $4413;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4414 = self.idx;
                                        var $4415 = self.code;
                                        var $4416 = self.val;
                                        var $4417 = Parser$Reply$value$($4414, $4415, Kind$Term$ori$($4416, _term$17));
                                        var $4409 = $4417;
                                        break;
                                };
                                var $4402 = $4409;
                                break;
                        };
                        var $4394 = $4402;
                        break;
                };
                var $4387 = $4394;
                break;
        };
        return $4387;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4419 = self.idx;
                var $4420 = self.code;
                var $4421 = self.err;
                var $4422 = Parser$Reply$error$($4419, $4420, $4421);
                var $4418 = $4422;
                break;
            case 'Parser.Reply.value':
                var $4423 = self.idx;
                var $4424 = self.code;
                var self = Kind$Parser$term$($4423, $4424);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4426 = self.idx;
                        var $4427 = self.code;
                        var $4428 = self.err;
                        var $4429 = Parser$Reply$error$($4426, $4427, $4428);
                        var $4425 = $4429;
                        break;
                    case 'Parser.Reply.value':
                        var $4430 = self.idx;
                        var $4431 = self.code;
                        var $4432 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4430, $4431);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4434 = self.idx;
                                var $4435 = self.code;
                                var $4436 = self.err;
                                var $4437 = Parser$Reply$error$($4434, $4435, $4436);
                                var $4433 = $4437;
                                break;
                            case 'Parser.Reply.value':
                                var $4438 = self.idx;
                                var $4439 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $4432);
                                var self = Kind$Parser$stop$(_init$1, $4438, $4439);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4441 = self.idx;
                                        var $4442 = self.code;
                                        var $4443 = self.err;
                                        var $4444 = Parser$Reply$error$($4441, $4442, $4443);
                                        var $4440 = $4444;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4445 = self.idx;
                                        var $4446 = self.code;
                                        var $4447 = self.val;
                                        var $4448 = Parser$Reply$value$($4445, $4446, Kind$Term$ori$($4447, _term$16));
                                        var $4440 = $4448;
                                        break;
                                };
                                var $4433 = $4440;
                                break;
                        };
                        var $4425 = $4433;
                        break;
                };
                var $4418 = $4425;
                break;
        };
        return $4418;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4450 = self.idx;
                var $4451 = self.code;
                var $4452 = self.err;
                var $4453 = Parser$Reply$error$($4450, $4451, $4452);
                var $4449 = $4453;
                break;
            case 'Parser.Reply.value':
                var $4454 = self.idx;
                var $4455 = self.code;
                var self = Kind$Parser$term$($4454, $4455);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4457 = self.idx;
                        var $4458 = self.code;
                        var $4459 = self.err;
                        var $4460 = Parser$Reply$error$($4457, $4458, $4459);
                        var $4456 = $4460;
                        break;
                    case 'Parser.Reply.value':
                        var $4461 = self.idx;
                        var $4462 = self.code;
                        var $4463 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4461, $4462);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4465 = self.idx;
                                var $4466 = self.code;
                                var $4467 = self.err;
                                var $4468 = Parser$Reply$error$($4465, $4466, $4467);
                                var $4464 = $4468;
                                break;
                            case 'Parser.Reply.value':
                                var $4469 = self.idx;
                                var $4470 = self.code;
                                var $4471 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $4463);
                                var $4472 = Parser$Reply$value$($4469, $4470, Kind$Term$ori$($4471, _term$18));
                                var $4464 = $4472;
                                break;
                        };
                        var $4456 = $4464;
                        break;
                };
                var $4449 = $4456;
                break;
        };
        return $4449;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4474 = self.idx;
                var $4475 = self.code;
                var $4476 = self.err;
                var $4477 = Parser$Reply$error$($4474, $4475, $4476);
                var $4473 = $4477;
                break;
            case 'Parser.Reply.value':
                var $4478 = self.idx;
                var $4479 = self.code;
                var self = Kind$Parser$term$($4478, $4479);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4481 = self.idx;
                        var $4482 = self.code;
                        var $4483 = self.err;
                        var $4484 = Parser$Reply$error$($4481, $4482, $4483);
                        var $4480 = $4484;
                        break;
                    case 'Parser.Reply.value':
                        var $4485 = self.idx;
                        var $4486 = self.code;
                        var $4487 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4485, $4486);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4489 = self.idx;
                                var $4490 = self.code;
                                var $4491 = self.err;
                                var $4492 = Parser$Reply$error$($4489, $4490, $4491);
                                var $4488 = $4492;
                                break;
                            case 'Parser.Reply.value':
                                var $4493 = self.idx;
                                var $4494 = self.code;
                                var $4495 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4487);
                                var $4496 = Parser$Reply$value$($4493, $4494, Kind$Term$ori$($4495, _term$17));
                                var $4488 = $4496;
                                break;
                        };
                        var $4480 = $4488;
                        break;
                };
                var $4473 = $4480;
                break;
        };
        return $4473;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4498 = self.idx;
                var $4499 = self.code;
                var $4500 = self.err;
                var $4501 = Parser$Reply$error$($4498, $4499, $4500);
                var $4497 = $4501;
                break;
            case 'Parser.Reply.value':
                var $4502 = self.idx;
                var $4503 = self.code;
                var self = Kind$Parser$term$($4502, $4503);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4505 = self.idx;
                        var $4506 = self.code;
                        var $4507 = self.err;
                        var $4508 = Parser$Reply$error$($4505, $4506, $4507);
                        var $4504 = $4508;
                        break;
                    case 'Parser.Reply.value':
                        var $4509 = self.idx;
                        var $4510 = self.code;
                        var $4511 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4509, $4510);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4513 = self.idx;
                                var $4514 = self.code;
                                var $4515 = self.err;
                                var $4516 = Parser$Reply$error$($4513, $4514, $4515);
                                var $4512 = $4516;
                                break;
                            case 'Parser.Reply.value':
                                var $4517 = self.idx;
                                var $4518 = self.code;
                                var $4519 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4511);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $4520 = Parser$Reply$value$($4517, $4518, Kind$Term$ori$($4519, _term$18));
                                var $4512 = $4520;
                                break;
                        };
                        var $4504 = $4512;
                        break;
                };
                var $4497 = $4504;
                break;
        };
        return $4497;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4522 = self.idx;
                var $4523 = self.code;
                var $4524 = self.err;
                var $4525 = Parser$Reply$error$($4522, $4523, $4524);
                var $4521 = $4525;
                break;
            case 'Parser.Reply.value':
                var $4526 = self.idx;
                var $4527 = self.code;
                var self = Kind$Parser$text$("rewrite", $4526, $4527);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4529 = self.idx;
                        var $4530 = self.code;
                        var $4531 = self.err;
                        var $4532 = Parser$Reply$error$($4529, $4530, $4531);
                        var $4528 = $4532;
                        break;
                    case 'Parser.Reply.value':
                        var $4533 = self.idx;
                        var $4534 = self.code;
                        var self = Kind$Parser$name1$($4533, $4534);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4536 = self.idx;
                                var $4537 = self.code;
                                var $4538 = self.err;
                                var $4539 = Parser$Reply$error$($4536, $4537, $4538);
                                var $4535 = $4539;
                                break;
                            case 'Parser.Reply.value':
                                var $4540 = self.idx;
                                var $4541 = self.code;
                                var $4542 = self.val;
                                var self = Kind$Parser$text$("in", $4540, $4541);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4544 = self.idx;
                                        var $4545 = self.code;
                                        var $4546 = self.err;
                                        var $4547 = Parser$Reply$error$($4544, $4545, $4546);
                                        var $4543 = $4547;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4548 = self.idx;
                                        var $4549 = self.code;
                                        var self = Kind$Parser$term$($4548, $4549);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4551 = self.idx;
                                                var $4552 = self.code;
                                                var $4553 = self.err;
                                                var $4554 = Parser$Reply$error$($4551, $4552, $4553);
                                                var $4550 = $4554;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4555 = self.idx;
                                                var $4556 = self.code;
                                                var $4557 = self.val;
                                                var self = Kind$Parser$text$("with", $4555, $4556);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4559 = self.idx;
                                                        var $4560 = self.code;
                                                        var $4561 = self.err;
                                                        var $4562 = Parser$Reply$error$($4559, $4560, $4561);
                                                        var $4558 = $4562;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4563 = self.idx;
                                                        var $4564 = self.code;
                                                        var self = Kind$Parser$term$($4563, $4564);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4566 = self.idx;
                                                                var $4567 = self.code;
                                                                var $4568 = self.err;
                                                                var $4569 = Parser$Reply$error$($4566, $4567, $4568);
                                                                var $4565 = $4569;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4570 = self.idx;
                                                                var $4571 = self.code;
                                                                var $4572 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $4570, $4571);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4574 = self.idx;
                                                                        var $4575 = self.code;
                                                                        var $4576 = self.err;
                                                                        var $4577 = Parser$Reply$error$($4574, $4575, $4576);
                                                                        var $4573 = $4577;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4578 = self.idx;
                                                                        var $4579 = self.code;
                                                                        var $4580 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $4572);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($4542, (_x$34 => {
                                                                            var $4582 = $4557;
                                                                            return $4582;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $4581 = Parser$Reply$value$($4578, $4579, Kind$Term$ori$($4580, _term$35));
                                                                        var $4573 = $4581;
                                                                        break;
                                                                };
                                                                var $4565 = $4573;
                                                                break;
                                                        };
                                                        var $4558 = $4565;
                                                        break;
                                                };
                                                var $4550 = $4558;
                                                break;
                                        };
                                        var $4543 = $4550;
                                        break;
                                };
                                var $4535 = $4543;
                                break;
                        };
                        var $4528 = $4535;
                        break;
                };
                var $4521 = $4528;
                break;
        };
        return $4521;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $4583 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $4583;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4585 = self.idx;
                var $4586 = self.code;
                var $4587 = self.err;
                var $4588 = Parser$Reply$error$($4585, $4586, $4587);
                var $4584 = $4588;
                break;
            case 'Parser.Reply.value':
                var $4589 = self.idx;
                var $4590 = self.code;
                var self = Kind$Parser$term$($4589, $4590);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4592 = self.idx;
                        var $4593 = self.code;
                        var $4594 = self.err;
                        var $4595 = Parser$Reply$error$($4592, $4593, $4594);
                        var $4591 = $4595;
                        break;
                    case 'Parser.Reply.value':
                        var $4596 = self.idx;
                        var $4597 = self.code;
                        var $4598 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4596, $4597);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4600 = self.idx;
                                var $4601 = self.code;
                                var $4602 = self.err;
                                var $4603 = Parser$Reply$error$($4600, $4601, $4602);
                                var $4599 = $4603;
                                break;
                            case 'Parser.Reply.value':
                                var $4604 = self.idx;
                                var $4605 = self.code;
                                var $4606 = self.val;
                                var $4607 = Parser$Reply$value$($4604, $4605, Kind$Term$ori$($4606, Kind$Term$ann$(Bool$false, _term$2, $4598)));
                                var $4599 = $4607;
                                break;
                        };
                        var $4591 = $4599;
                        break;
                };
                var $4584 = $4591;
                break;
        };
        return $4584;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4609 = self.idx;
                var $4610 = self.code;
                var $4611 = self.err;
                var $4612 = Parser$Reply$error$($4609, $4610, $4611);
                var $4608 = $4612;
                break;
            case 'Parser.Reply.value':
                var $4613 = self.idx;
                var $4614 = self.code;
                var self = Kind$Parser$stop$(_init$1, $4613, $4614);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4616 = self.idx;
                        var $4617 = self.code;
                        var $4618 = self.err;
                        var $4619 = Parser$Reply$error$($4616, $4617, $4618);
                        var $4615 = $4619;
                        break;
                    case 'Parser.Reply.value':
                        var $4620 = self.idx;
                        var $4621 = self.code;
                        var $4622 = self.val;
                        var $4623 = Parser$Reply$value$($4620, $4621, Kind$Term$ori$($4622, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $4615 = $4623;
                        break;
                };
                var $4608 = $4615;
                break;
        };
        return $4608;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $4625 = self.idx;
                        var $4626 = self.code;
                        var $4627 = self.val;
                        var $4628 = Kind$Parser$suffix$(_init$1, $4627, $4625, $4626);
                        var $4624 = $4628;
                        break;
                    case 'Parser.Reply.error':
                        var $4629 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $4624 = $4629;
                        break;
                };
                return $4624;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4631 = self.idx;
                var $4632 = self.code;
                var $4633 = self.err;
                var $4634 = Parser$Reply$error$($4631, $4632, $4633);
                var $4630 = $4634;
                break;
            case 'Parser.Reply.value':
                var $4635 = self.idx;
                var $4636 = self.code;
                var $4637 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string, List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil)))))))))))))))))))))))))))))))))))))))))))))))($4635)($4636);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4639 = self.idx;
                        var $4640 = self.code;
                        var $4641 = self.err;
                        var $4642 = Parser$Reply$error$($4639, $4640, $4641);
                        var $4638 = $4642;
                        break;
                    case 'Parser.Reply.value':
                        var $4643 = self.idx;
                        var $4644 = self.code;
                        var $4645 = self.val;
                        var $4646 = Kind$Parser$suffix$($4637, $4645, $4643, $4644);
                        var $4638 = $4646;
                        break;
                };
                var $4630 = $4638;
                break;
        };
        return $4630;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4648 = self.idx;
                var $4649 = self.code;
                var $4650 = self.err;
                var $4651 = Parser$Reply$error$($4648, $4649, $4650);
                var $4647 = $4651;
                break;
            case 'Parser.Reply.value':
                var $4652 = self.idx;
                var $4653 = self.code;
                var $4654 = self.val;
                var self = Kind$Parser$text$(_sep$1, $4652, $4653);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4656 = self.idx;
                        var $4657 = self.code;
                        var $4658 = self.err;
                        var $4659 = Parser$Reply$error$($4656, $4657, $4658);
                        var $4655 = $4659;
                        break;
                    case 'Parser.Reply.value':
                        var $4660 = self.idx;
                        var $4661 = self.code;
                        var self = Kind$Parser$term$($4660, $4661);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4663 = self.idx;
                                var $4664 = self.code;
                                var $4665 = self.err;
                                var $4666 = Parser$Reply$error$($4663, $4664, $4665);
                                var $4662 = $4666;
                                break;
                            case 'Parser.Reply.value':
                                var $4667 = self.idx;
                                var $4668 = self.code;
                                var $4669 = self.val;
                                var $4670 = Parser$Reply$value$($4667, $4668, Pair$new$($4654, $4669));
                                var $4662 = $4670;
                                break;
                        };
                        var $4655 = $4662;
                        break;
                };
                var $4647 = $4655;
                break;
        };
        return $4647;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $4671 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $4671;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $4673 = "<";
                return $4673;
            } else {
                var $4674 = "(";
                return $4674;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4675 = self.idx;
                var $4676 = self.code;
                var $4677 = self.err;
                var $4678 = Parser$Reply$error$($4675, $4676, $4677);
                var $4672 = $4678;
                break;
            case 'Parser.Reply.value':
                var $4679 = self.idx;
                var $4680 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $4682 = ">";
                        return $4682;
                    } else {
                        var $4683 = ")";
                        return $4683;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $4679, $4680);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4684 = self.idx;
                        var $4685 = self.code;
                        var $4686 = self.err;
                        var $4687 = Parser$Reply$error$($4684, $4685, $4686);
                        var $4681 = $4687;
                        break;
                    case 'Parser.Reply.value':
                        var $4688 = self.idx;
                        var $4689 = self.code;
                        var $4690 = self.val;
                        var $4691 = Parser$Reply$value$($4688, $4689, List$mapped$($4690, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $4693 = self.fst;
                                    var $4694 = self.snd;
                                    var $4695 = Kind$Binder$new$(_eras$2, $4693, $4694);
                                    var $4692 = $4695;
                                    break;
                            };
                            return $4692;
                        })));
                        var $4681 = $4691;
                        break;
                };
                var $4672 = $4681;
                break;
        };
        return $4672;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $4697 = self.head;
                var $4698 = self.tail;
                var $4699 = List$cons$($4697, List$concat$($4698, _bs$3));
                var $4696 = $4699;
                break;
            case 'List.nil':
                var $4700 = _bs$3;
                var $4696 = $4700;
                break;
        };
        return $4696;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $4702 = self.head;
                var $4703 = self.tail;
                var $4704 = List$concat$($4702, List$flatten$($4703));
                var $4701 = $4704;
                break;
            case 'List.nil':
                var $4705 = List$nil;
                var $4701 = $4705;
                break;
        };
        return $4701;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4707 = self.idx;
                var $4708 = self.code;
                var $4709 = self.err;
                var $4710 = Parser$Reply$error$($4707, $4708, $4709);
                var $4706 = $4710;
                break;
            case 'Parser.Reply.value':
                var $4711 = self.idx;
                var $4712 = self.code;
                var $4713 = self.val;
                var $4714 = Parser$Reply$value$($4711, $4712, List$flatten$($4713));
                var $4706 = $4714;
                break;
        };
        return $4706;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $4716 = self.head;
                var $4717 = self.tail;
                var self = $4716;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $4719 = self.eras;
                        var $4720 = self.name;
                        var $4721 = self.term;
                        var $4722 = Kind$Term$all$($4719, "", $4720, $4721, (_s$8 => _x$9 => {
                            var $4723 = Kind$Parser$make_forall$($4717, _body$2);
                            return $4723;
                        }));
                        var $4718 = $4722;
                        break;
                };
                var $4715 = $4718;
                break;
            case 'List.nil':
                var $4724 = _body$2;
                var $4715 = $4724;
                break;
        };
        return $4715;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4725 = self.head;
                        var $4726 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4728 = Maybe$some$($4725);
                            var $4727 = $4728;
                        } else {
                            var $4729 = (self - 1n);
                            var $4730 = List$at$($4729, $4726);
                            var $4727 = $4730;
                        };
                        return $4727;
                    case 'List.nil':
                        var $4731 = Maybe$none;
                        return $4731;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $4732 = List$at$(_index$2, List$reverse$(_list$3));
        return $4732;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $4733 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $4733;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $4735 = Pair$new$("", 0n);
            var $4734 = $4735;
        } else {
            var $4736 = self.charCodeAt(0);
            var $4737 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($4737);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $4739 = self.fst;
                    var $4740 = self.snd;
                    var self = ($4736 === 94);
                    if (self) {
                        var $4742 = Pair$new$($4739, Nat$succ$($4740));
                        var $4741 = $4742;
                    } else {
                        var $4743 = Pair$new$(String$cons$($4736, $4739), $4740);
                        var $4741 = $4743;
                    };
                    var $4738 = $4741;
                    break;
            };
            var $4734 = $4738;
        };
        return $4734;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $4744 = (_a$1 === _b$2);
        return $4744;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $4745 = self.head;
                        var $4746 = self.tail;
                        var self = $4745;
                        switch (self._) {
                            case 'Pair.new':
                                var $4748 = self.fst;
                                var $4749 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $4748);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $4752 = Maybe$some$($4749);
                                        var $4751 = $4752;
                                    } else {
                                        var $4753 = (self - 1n);
                                        var $4754 = Kind$Context$find$go$(_name$1, $4753, $4746);
                                        var $4751 = $4754;
                                    };
                                    var $4750 = $4751;
                                } else {
                                    var $4755 = Kind$Context$find$go$(_name$1, _skip$2, $4746);
                                    var $4750 = $4755;
                                };
                                var $4747 = $4750;
                                break;
                        };
                        return $4747;
                    case 'List.nil':
                        var $4756 = Maybe$none;
                        return $4756;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $4758 = self.fst;
                var $4759 = self.snd;
                var $4760 = Kind$Context$find$go$($4758, $4759, _ctx$2);
                var $4757 = $4760;
                break;
        };
        return $4757;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $4761 = _path$1((_x$2 + '0'));
        return $4761;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $4762 = _path$1((_x$2 + '1'));
        return $4762;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $4763 = _path$1(Bits$e);
        return $4763;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $4765 = self.name;
                var $4766 = self.indx;
                var self = List$at_last$($4766, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $4768 = self.value;
                        var $4769 = Pair$snd$($4768);
                        var $4767 = $4769;
                        break;
                    case 'Maybe.none':
                        var $4770 = Kind$Term$var$($4765, $4766);
                        var $4767 = $4770;
                        break;
                };
                var $4764 = $4767;
                break;
            case 'Kind.Term.ref':
                var $4771 = self.name;
                var self = Kind$Context$find$($4771, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $4773 = self.value;
                        var $4774 = $4773;
                        var $4772 = $4774;
                        break;
                    case 'Maybe.none':
                        var $4775 = Kind$Term$ref$($4771);
                        var $4772 = $4775;
                        break;
                };
                var $4764 = $4772;
                break;
            case 'Kind.Term.all':
                var $4776 = self.eras;
                var $4777 = self.self;
                var $4778 = self.name;
                var $4779 = self.xtyp;
                var $4780 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $4781 = Kind$Term$all$($4776, $4777, $4778, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4779), (_s$10 => _x$11 => {
                    var $4782 = Kind$Term$bind$(List$cons$(Pair$new$($4778, _x$11), List$cons$(Pair$new$($4777, _s$10), _vars$1)), Kind$Path$i(_path$2), $4780(Kind$Term$var$($4777, _vlen$9))(Kind$Term$var$($4778, Nat$succ$(_vlen$9))));
                    return $4782;
                }));
                var $4764 = $4781;
                break;
            case 'Kind.Term.lam':
                var $4783 = self.name;
                var $4784 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $4785 = Kind$Term$lam$($4783, (_x$7 => {
                    var $4786 = Kind$Term$bind$(List$cons$(Pair$new$($4783, _x$7), _vars$1), Kind$Path$o(_path$2), $4784(Kind$Term$var$($4783, _vlen$6)));
                    return $4786;
                }));
                var $4764 = $4785;
                break;
            case 'Kind.Term.app':
                var $4787 = self.func;
                var $4788 = self.argm;
                var $4789 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4787), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $4788));
                var $4764 = $4789;
                break;
            case 'Kind.Term.let':
                var $4790 = self.name;
                var $4791 = self.expr;
                var $4792 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4793 = Kind$Term$let$($4790, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4791), (_x$8 => {
                    var $4794 = Kind$Term$bind$(List$cons$(Pair$new$($4790, _x$8), _vars$1), Kind$Path$i(_path$2), $4792(Kind$Term$var$($4790, _vlen$7)));
                    return $4794;
                }));
                var $4764 = $4793;
                break;
            case 'Kind.Term.def':
                var $4795 = self.name;
                var $4796 = self.expr;
                var $4797 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4798 = Kind$Term$def$($4795, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4796), (_x$8 => {
                    var $4799 = Kind$Term$bind$(List$cons$(Pair$new$($4795, _x$8), _vars$1), Kind$Path$i(_path$2), $4797(Kind$Term$var$($4795, _vlen$7)));
                    return $4799;
                }));
                var $4764 = $4798;
                break;
            case 'Kind.Term.ann':
                var $4800 = self.done;
                var $4801 = self.term;
                var $4802 = self.type;
                var $4803 = Kind$Term$ann$($4800, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4801), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $4802));
                var $4764 = $4803;
                break;
            case 'Kind.Term.gol':
                var $4804 = self.name;
                var $4805 = self.dref;
                var $4806 = self.verb;
                var $4807 = Kind$Term$gol$($4804, $4805, $4806);
                var $4764 = $4807;
                break;
            case 'Kind.Term.nat':
                var $4808 = self.natx;
                var $4809 = Kind$Term$nat$($4808);
                var $4764 = $4809;
                break;
            case 'Kind.Term.chr':
                var $4810 = self.chrx;
                var $4811 = Kind$Term$chr$($4810);
                var $4764 = $4811;
                break;
            case 'Kind.Term.str':
                var $4812 = self.strx;
                var $4813 = Kind$Term$str$($4812);
                var $4764 = $4813;
                break;
            case 'Kind.Term.cse':
                var $4814 = self.expr;
                var $4815 = self.name;
                var $4816 = self.with;
                var $4817 = self.cses;
                var $4818 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4814);
                var _name$11 = $4815;
                var _wyth$12 = List$mapped$($4816, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $4821 = self.name;
                            var $4822 = self.term;
                            var $4823 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $4822);
                            var self = $4823;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $4825 = self.value;
                                    var $4826 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $4825));
                                    var _with_var_type$17 = $4826;
                                    break;
                                case 'Maybe.none':
                                    var $4827 = Maybe$none;
                                    var _with_var_type$17 = $4827;
                                    break;
                            };
                            var $4824 = Kind$Ann$new$($4821, _with_var_term$16, _with_var_type$17);
                            var $4820 = $4824;
                            break;
                    };
                    return $4820;
                }));
                var _cses$13 = $4817;
                var _moti$14 = $4818;
                var $4819 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $4764 = $4819;
                break;
            case 'Kind.Term.ori':
                var $4828 = self.orig;
                var $4829 = self.expr;
                var $4830 = Kind$Term$ori$($4828, Kind$Term$bind$(_vars$1, _path$2, $4829));
                var $4764 = $4830;
                break;
            case 'Kind.Term.typ':
                var $4831 = Kind$Term$typ;
                var $4764 = $4831;
                break;
            case 'Kind.Term.hol':
                var $4832 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $4764 = $4832;
                break;
        };
        return $4764;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);
    const Kind$Status$done = ({
        _: 'Kind.Status.done'
    });
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $4833 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $4833;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var self = _done$9;
        if (self) {
            var $4835 = Kind$Status$done;
            var _stat$11 = $4835;
        } else {
            var $4836 = Kind$Status$init;
            var _stat$11 = $4836;
        };
        var $4834 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$11), _defs$10);
        return $4834;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4838 = self.idx;
                var $4839 = self.code;
                var $4840 = self.err;
                var $4841 = Parser$Reply$error$($4838, $4839, $4840);
                var $4837 = $4841;
                break;
            case 'Parser.Reply.value':
                var $4842 = self.idx;
                var $4843 = self.code;
                var $4844 = self.val;
                var self = Kind$Parser$name1$($4842, $4843);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4846 = self.idx;
                        var $4847 = self.code;
                        var $4848 = self.err;
                        var $4849 = Parser$Reply$error$($4846, $4847, $4848);
                        var $4845 = $4849;
                        break;
                    case 'Parser.Reply.value':
                        var $4850 = self.idx;
                        var $4851 = self.code;
                        var $4852 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($4850)($4851);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4854 = self.idx;
                                var $4855 = self.code;
                                var $4856 = self.err;
                                var $4857 = Parser$Reply$error$($4854, $4855, $4856);
                                var $4853 = $4857;
                                break;
                            case 'Parser.Reply.value':
                                var $4858 = self.idx;
                                var $4859 = self.code;
                                var $4860 = self.val;
                                var _args$15 = List$flatten$($4860);
                                var self = Kind$Parser$text$(":", $4858, $4859);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4862 = self.idx;
                                        var $4863 = self.code;
                                        var $4864 = self.err;
                                        var $4865 = Parser$Reply$error$($4862, $4863, $4864);
                                        var $4861 = $4865;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4866 = self.idx;
                                        var $4867 = self.code;
                                        var self = Kind$Parser$term$($4866, $4867);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4869 = self.idx;
                                                var $4870 = self.code;
                                                var $4871 = self.err;
                                                var $4872 = Parser$Reply$error$($4869, $4870, $4871);
                                                var $4868 = $4872;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4873 = self.idx;
                                                var $4874 = self.code;
                                                var $4875 = self.val;
                                                var self = Kind$Parser$term$($4873, $4874);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4877 = self.idx;
                                                        var $4878 = self.code;
                                                        var $4879 = self.err;
                                                        var $4880 = Parser$Reply$error$($4877, $4878, $4879);
                                                        var $4876 = $4880;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4881 = self.idx;
                                                        var $4882 = self.code;
                                                        var $4883 = self.val;
                                                        var self = Kind$Parser$stop$($4844, $4881, $4882);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4885 = self.idx;
                                                                var $4886 = self.code;
                                                                var $4887 = self.err;
                                                                var $4888 = Parser$Reply$error$($4885, $4886, $4887);
                                                                var $4884 = $4888;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4889 = self.idx;
                                                                var $4890 = self.code;
                                                                var $4891 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $4875);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $4894 = self.name;
                                                                            var $4895 = $4894;
                                                                            var $4893 = $4895;
                                                                            break;
                                                                    };
                                                                    return $4893;
                                                                })), $4883);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $4896 = (_x$31 + '1');
                                                                    return $4896;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $4897 = (_x$32 + '0');
                                                                    return $4897;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $4891, $4852, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $4892 = Parser$Reply$value$($4889, $4890, _defs$33);
                                                                var $4884 = $4892;
                                                                break;
                                                        };
                                                        var $4876 = $4884;
                                                        break;
                                                };
                                                var $4868 = $4876;
                                                break;
                                        };
                                        var $4861 = $4868;
                                        break;
                                };
                                var $4853 = $4861;
                                break;
                        };
                        var $4845 = $4853;
                        break;
                };
                var $4837 = $4845;
                break;
        };
        return $4837;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $4898 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $4898;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4900 = self.idx;
                var $4901 = self.code;
                var $4902 = self.err;
                var $4903 = Parser$Reply$error$($4900, $4901, $4902);
                var $4899 = $4903;
                break;
            case 'Parser.Reply.value':
                var $4904 = self.idx;
                var $4905 = self.code;
                var $4906 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $4904, $4905);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4908 = self.idx;
                        var $4909 = self.code;
                        var $4910 = self.err;
                        var $4911 = Parser$Reply$error$($4908, $4909, $4910);
                        var $4907 = $4911;
                        break;
                    case 'Parser.Reply.value':
                        var $4912 = self.idx;
                        var $4913 = self.code;
                        var $4914 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4917 = self.idx;
                                    var $4918 = self.code;
                                    var $4919 = self.err;
                                    var $4920 = Parser$Reply$error$($4917, $4918, $4919);
                                    var $4916 = $4920;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4921 = self.idx;
                                    var $4922 = self.code;
                                    var $4923 = Kind$Parser$binder$("=", $4921, $4922);
                                    var $4916 = $4923;
                                    break;
                            };
                            return $4916;
                        }), $4912, $4913);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4924 = self.idx;
                                var $4925 = self.code;
                                var $4926 = self.err;
                                var $4927 = Parser$Reply$error$($4924, $4925, $4926);
                                var $4915 = $4927;
                                break;
                            case 'Parser.Reply.value':
                                var $4928 = self.idx;
                                var $4929 = self.code;
                                var $4930 = self.val;
                                var _args$13 = Maybe$default$($4914, List$nil);
                                var _inds$14 = Maybe$default$($4930, List$nil);
                                var $4931 = Parser$Reply$value$($4928, $4929, Kind$Constructor$new$($4906, _args$13, _inds$14));
                                var $4915 = $4931;
                                break;
                        };
                        var $4907 = $4915;
                        break;
                };
                var $4899 = $4907;
                break;
        };
        return $4899;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $4932 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $4932;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4934 = self.idx;
                var $4935 = self.code;
                var $4936 = self.err;
                var $4937 = Parser$Reply$error$($4934, $4935, $4936);
                var $4933 = $4937;
                break;
            case 'Parser.Reply.value':
                var $4938 = self.idx;
                var $4939 = self.code;
                var self = Kind$Parser$name1$($4938, $4939);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4941 = self.idx;
                        var $4942 = self.code;
                        var $4943 = self.err;
                        var $4944 = Parser$Reply$error$($4941, $4942, $4943);
                        var $4940 = $4944;
                        break;
                    case 'Parser.Reply.value':
                        var $4945 = self.idx;
                        var $4946 = self.code;
                        var $4947 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $4945, $4946);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4949 = self.idx;
                                var $4950 = self.code;
                                var $4951 = self.err;
                                var $4952 = Parser$Reply$error$($4949, $4950, $4951);
                                var $4948 = $4952;
                                break;
                            case 'Parser.Reply.value':
                                var $4953 = self.idx;
                                var $4954 = self.code;
                                var $4955 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4958 = self.idx;
                                            var $4959 = self.code;
                                            var $4960 = self.err;
                                            var $4961 = Parser$Reply$error$($4958, $4959, $4960);
                                            var $4957 = $4961;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4962 = self.idx;
                                            var $4963 = self.code;
                                            var $4964 = Kind$Parser$binder$(":", $4962, $4963);
                                            var $4957 = $4964;
                                            break;
                                    };
                                    return $4957;
                                }), $4953, $4954);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4965 = self.idx;
                                        var $4966 = self.code;
                                        var $4967 = self.err;
                                        var $4968 = Parser$Reply$error$($4965, $4966, $4967);
                                        var $4956 = $4968;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4969 = self.idx;
                                        var $4970 = self.code;
                                        var $4971 = self.val;
                                        var _pars$15 = Maybe$default$($4955, List$nil);
                                        var _inds$16 = Maybe$default$($4971, List$nil);
                                        var self = Kind$Parser$text$("{", $4969, $4970);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4973 = self.idx;
                                                var $4974 = self.code;
                                                var $4975 = self.err;
                                                var $4976 = Parser$Reply$error$($4973, $4974, $4975);
                                                var $4972 = $4976;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4977 = self.idx;
                                                var $4978 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($4947)))($4977)($4978);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4980 = self.idx;
                                                        var $4981 = self.code;
                                                        var $4982 = self.err;
                                                        var $4983 = Parser$Reply$error$($4980, $4981, $4982);
                                                        var $4979 = $4983;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4984 = self.idx;
                                                        var $4985 = self.code;
                                                        var $4986 = self.val;
                                                        var $4987 = Parser$Reply$value$($4984, $4985, Kind$Datatype$new$($4947, _pars$15, _inds$16, $4986));
                                                        var $4979 = $4987;
                                                        break;
                                                };
                                                var $4972 = $4979;
                                                break;
                                        };
                                        var $4956 = $4972;
                                        break;
                                };
                                var $4948 = $4956;
                                break;
                        };
                        var $4940 = $4948;
                        break;
                };
                var $4933 = $4940;
                break;
        };
        return $4933;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $4989 = self.head;
                var $4990 = self.tail;
                var self = $4989;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $4992 = self.eras;
                        var $4993 = self.name;
                        var $4994 = self.term;
                        var $4995 = Kind$Term$all$($4992, "", $4993, $4994, (_s$9 => _x$10 => {
                            var $4996 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $4990);
                            return $4996;
                        }));
                        var $4991 = $4995;
                        break;
                };
                var $4988 = $4991;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $4998 = self.pars;
                        var $4999 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $5002 = _slf$8;
                            var $5003 = $4998;
                            let _slf$10 = $5002;
                            let _v$9;
                            while ($5003._ === 'List.cons') {
                                _v$9 = $5003.head;
                                var $5002 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5004 = self.name;
                                            var $5005 = $5004;
                                            return $5005;
                                    };
                                })()));
                                _slf$10 = $5002;
                                $5003 = $5003.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $5007 = _slf$9;
                            var $5008 = $4999;
                            let _slf$11 = $5007;
                            let _v$10;
                            while ($5008._ === 'List.cons') {
                                _v$10 = $5008.head;
                                var $5007 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5009 = self.name;
                                            var $5010 = $5009;
                                            return $5010;
                                    };
                                })()));
                                _slf$11 = $5007;
                                $5008 = $5008.tail;
                            }
                            return _slf$11;
                        })();
                        var $5000 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $5011 = Kind$Term$typ;
                            return $5011;
                        }));
                        var $4997 = $5000;
                        break;
                };
                var $4988 = $4997;
                break;
        };
        return $4988;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5013 = self.name;
                var $5014 = self.inds;
                var $5015 = Kind$Datatype$build_term$motive$go$(_type$1, $5013, $5014);
                var $5012 = $5015;
                break;
        };
        return $5012;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $5017 = self.head;
                var $5018 = self.tail;
                var self = $5017;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5020 = self.eras;
                        var $5021 = self.name;
                        var $5022 = self.term;
                        var _eras$9 = $5020;
                        var _name$10 = $5021;
                        var _xtyp$11 = $5022;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $5018);
                        var $5023 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $5024 = _body$12;
                            return $5024;
                        }));
                        var $5019 = $5023;
                        break;
                };
                var $5016 = $5019;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5026 = self.name;
                        var $5027 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $5029 = self.name;
                                var $5030 = self.args;
                                var $5031 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $5034 = _ret$11;
                                    var $5035 = $5031;
                                    let _ret$13 = $5034;
                                    let _v$12;
                                    while ($5035._ === 'List.cons') {
                                        _v$12 = $5035.head;
                                        var $5034 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5036 = self.term;
                                                    var $5037 = $5036;
                                                    return $5037;
                                            };
                                        })());
                                        _ret$13 = $5034;
                                        $5035 = $5035.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($5026, List$cons$(Kind$Name$read$("."), List$cons$($5029, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $5039 = _slf$14;
                                    var $5040 = $5027;
                                    let _slf$16 = $5039;
                                    let _v$15;
                                    while ($5040._ === 'List.cons') {
                                        _v$15 = $5040.head;
                                        var $5039 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5041 = self.name;
                                                    var $5042 = $5041;
                                                    return $5042;
                                            };
                                        })()));
                                        _slf$16 = $5039;
                                        $5040 = $5040.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $5044 = _slf$15;
                                    var $5045 = $5030;
                                    let _slf$17 = $5044;
                                    let _v$16;
                                    while ($5045._ === 'List.cons') {
                                        _v$16 = $5045.head;
                                        var $5044 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5046 = self.name;
                                                    var $5047 = $5046;
                                                    return $5047;
                                            };
                                        })()));
                                        _slf$17 = $5044;
                                        $5045 = $5045.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $5032 = Kind$Term$app$(_ret$12, _slf$16);
                                var $5028 = $5032;
                                break;
                        };
                        var $5025 = $5028;
                        break;
                };
                var $5016 = $5025;
                break;
        };
        return $5016;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $5049 = self.args;
                var $5050 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $5049);
                var $5048 = $5050;
                break;
        };
        return $5048;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $5052 = self.head;
                var $5053 = self.tail;
                var self = $5052;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5055 = self.name;
                        var $5056 = Kind$Term$all$(Bool$false, "", $5055, Kind$Datatype$build_term$constructor$(_type$1, $5052), (_s$9 => _x$10 => {
                            var $5057 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $5053);
                            return $5057;
                        }));
                        var $5054 = $5056;
                        break;
                };
                var $5051 = $5054;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5059 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $5062 = _ret$8;
                            var $5063 = $5059;
                            let _ret$10 = $5062;
                            let _v$9;
                            while ($5063._ === 'List.cons') {
                                _v$9 = $5063.head;
                                var $5062 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5064 = self.name;
                                            var $5065 = $5064;
                                            return $5065;
                                    };
                                })()));
                                _ret$10 = $5062;
                                $5063 = $5063.tail;
                            }
                            return _ret$10;
                        })();
                        var $5060 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $5058 = $5060;
                        break;
                };
                var $5051 = $5058;
                break;
        };
        return $5051;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5067 = self.name;
                var $5068 = self.ctrs;
                var $5069 = Kind$Datatype$build_term$constructors$go$(_type$1, $5067, $5068);
                var $5066 = $5069;
                break;
        };
        return $5066;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $5071 = self.head;
                var $5072 = self.tail;
                var self = $5071;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5074 = self.name;
                        var $5075 = Kind$Term$lam$($5074, (_x$10 => {
                            var $5076 = Kind$Datatype$build_term$go$(_type$1, _name$2, $5072, _inds$4);
                            return $5076;
                        }));
                        var $5073 = $5075;
                        break;
                };
                var $5070 = $5073;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $5078 = self.head;
                        var $5079 = self.tail;
                        var self = $5078;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5081 = self.name;
                                var $5082 = Kind$Term$lam$($5081, (_x$10 => {
                                    var $5083 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $5079);
                                    return $5083;
                                }));
                                var $5080 = $5082;
                                break;
                        };
                        var $5077 = $5080;
                        break;
                    case 'List.nil':
                        var $5084 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $5085 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $5085;
                        }));
                        var $5077 = $5084;
                        break;
                };
                var $5070 = $5077;
                break;
        };
        return $5070;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5087 = self.name;
                var $5088 = self.pars;
                var $5089 = self.inds;
                var $5090 = Kind$Datatype$build_term$go$(_type$1, $5087, $5088, $5089);
                var $5086 = $5090;
                break;
        };
        return $5086;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $5092 = self.head;
                var $5093 = self.tail;
                var self = $5092;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5095 = self.name;
                        var $5096 = self.term;
                        var $5097 = Kind$Term$all$(Bool$false, "", $5095, $5096, (_s$10 => _x$11 => {
                            var $5098 = Kind$Datatype$build_type$go$(_type$1, _name$2, $5093, _inds$4);
                            return $5098;
                        }));
                        var $5094 = $5097;
                        break;
                };
                var $5091 = $5094;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $5100 = self.head;
                        var $5101 = self.tail;
                        var self = $5100;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5103 = self.name;
                                var $5104 = self.term;
                                var $5105 = Kind$Term$all$(Bool$false, "", $5103, $5104, (_s$10 => _x$11 => {
                                    var $5106 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $5101);
                                    return $5106;
                                }));
                                var $5102 = $5105;
                                break;
                        };
                        var $5099 = $5102;
                        break;
                    case 'List.nil':
                        var $5107 = Kind$Term$typ;
                        var $5099 = $5107;
                        break;
                };
                var $5091 = $5099;
                break;
        };
        return $5091;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5109 = self.name;
                var $5110 = self.pars;
                var $5111 = self.inds;
                var $5112 = Kind$Datatype$build_type$go$(_type$1, $5109, $5110, $5111);
                var $5108 = $5112;
                break;
        };
        return $5108;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $5114 = self.head;
                var $5115 = self.tail;
                var self = $5114;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5117 = self.name;
                        var $5118 = Kind$Term$lam$($5117, (_x$9 => {
                            var $5119 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $5115);
                            return $5119;
                        }));
                        var $5116 = $5118;
                        break;
                };
                var $5113 = $5116;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5121 = self.name;
                        var $5122 = self.args;
                        var _ret$7 = Kind$Term$ref$($5121);
                        var _ret$8 = (() => {
                            var $5125 = _ret$7;
                            var $5126 = $5122;
                            let _ret$9 = $5125;
                            let _arg$8;
                            while ($5126._ === 'List.cons') {
                                _arg$8 = $5126.head;
                                var $5125 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5127 = self.name;
                                            var $5128 = $5127;
                                            return $5128;
                                    };
                                })()));
                                _ret$9 = $5125;
                                $5126 = $5126.tail;
                            }
                            return _ret$9;
                        })();
                        var $5123 = _ret$8;
                        var $5120 = $5123;
                        break;
                };
                var $5113 = $5120;
                break;
        };
        return $5113;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5130 = self.ctrs;
                var $5131 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $5130);
                var $5129 = $5131;
                break;
        };
        return $5129;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $5133 = self.head;
                var $5134 = self.tail;
                var self = $5133;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5136 = self.name;
                        var $5137 = Kind$Term$lam$($5136, (_x$11 => {
                            var $5138 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $5134, _args$5);
                            return $5138;
                        }));
                        var $5135 = $5137;
                        break;
                };
                var $5132 = $5135;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $5140 = self.head;
                        var $5141 = self.tail;
                        var self = $5140;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5143 = self.name;
                                var $5144 = Kind$Term$lam$($5143, (_x$11 => {
                                    var $5145 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $5141);
                                    return $5145;
                                }));
                                var $5142 = $5144;
                                break;
                        };
                        var $5139 = $5142;
                        break;
                    case 'List.nil':
                        var $5146 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $5147 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $5147;
                        }));
                        var $5139 = $5146;
                        break;
                };
                var $5132 = $5139;
                break;
        };
        return $5132;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5149 = self.name;
                var $5150 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5152 = self.args;
                        var $5153 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $5149, $5150, $5152);
                        var $5151 = $5153;
                        break;
                };
                var $5148 = $5151;
                break;
        };
        return $5148;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $5155 = self.head;
                var $5156 = self.tail;
                var self = $5155;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5158 = self.eras;
                        var $5159 = self.name;
                        var $5160 = self.term;
                        var $5161 = Kind$Term$all$($5158, "", $5159, $5160, (_s$11 => _x$12 => {
                            var $5162 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $5156, _args$5);
                            return $5162;
                        }));
                        var $5157 = $5161;
                        break;
                };
                var $5154 = $5157;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $5164 = self.head;
                        var $5165 = self.tail;
                        var self = $5164;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5167 = self.eras;
                                var $5168 = self.name;
                                var $5169 = self.term;
                                var $5170 = Kind$Term$all$($5167, "", $5168, $5169, (_s$11 => _x$12 => {
                                    var $5171 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $5165);
                                    return $5171;
                                }));
                                var $5166 = $5170;
                                break;
                        };
                        var $5163 = $5166;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $5173 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $5175 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $5178 = _type$13;
                                            var $5179 = $5173;
                                            let _type$15 = $5178;
                                            let _v$14;
                                            while ($5179._ === 'List.cons') {
                                                _v$14 = $5179.head;
                                                var $5178 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $5180 = self.name;
                                                            var $5181 = $5180;
                                                            return $5181;
                                                    };
                                                })()));
                                                _type$15 = $5178;
                                                $5179 = $5179.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $5183 = _type$14;
                                            var $5184 = $5175;
                                            let _type$16 = $5183;
                                            let _v$15;
                                            while ($5184._ === 'List.cons') {
                                                _v$15 = $5184.head;
                                                var $5183 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $5185 = self.term;
                                                            var $5186 = $5185;
                                                            return $5186;
                                                    };
                                                })());
                                                _type$16 = $5183;
                                                $5184 = $5184.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $5176 = _type$15;
                                        var $5174 = $5176;
                                        break;
                                };
                                var $5172 = $5174;
                                break;
                        };
                        var $5163 = $5172;
                        break;
                };
                var $5154 = $5163;
                break;
        };
        return $5154;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5188 = self.name;
                var $5189 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5191 = self.args;
                        var $5192 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $5188, $5189, $5191);
                        var $5190 = $5192;
                        break;
                };
                var $5187 = $5190;
                break;
        };
        return $5187;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5194 = self.idx;
                var $5195 = self.code;
                var $5196 = self.err;
                var $5197 = Parser$Reply$error$($5194, $5195, $5196);
                var $5193 = $5197;
                break;
            case 'Parser.Reply.value':
                var $5198 = self.idx;
                var $5199 = self.code;
                var $5200 = self.val;
                var self = Kind$Parser$datatype$($5198, $5199);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5202 = self.idx;
                        var $5203 = self.code;
                        var $5204 = self.err;
                        var $5205 = Parser$Reply$error$($5202, $5203, $5204);
                        var $5201 = $5205;
                        break;
                    case 'Parser.Reply.value':
                        var $5206 = self.idx;
                        var $5207 = self.code;
                        var $5208 = self.val;
                        var self = Kind$Parser$stop$($5200, $5206, $5207);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5210 = self.idx;
                                var $5211 = self.code;
                                var $5212 = self.err;
                                var $5213 = Parser$Reply$error$($5210, $5211, $5212);
                                var $5209 = $5213;
                                break;
                            case 'Parser.Reply.value':
                                var $5214 = self.idx;
                                var $5215 = self.code;
                                var $5216 = self.val;
                                var self = $5208;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $5218 = self.name;
                                        var $5219 = self.pars;
                                        var $5220 = self.inds;
                                        var $5221 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($5208);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $5223 = (_x$20 + '1');
                                            return $5223;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($5208);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $5224 = (_x$22 + '0');
                                            return $5224;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($5219)) + (list_length($5220)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $5216, $5218, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($5221, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $5218;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $5226 = self.args;
                                                        var $5227 = $5226;
                                                        return $5227;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $5228 = self.name;
                                                        var $5229 = $5228;
                                                        return $5229;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($5208, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $5230 = (_x$31 + '1');
                                                return $5230;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($5208, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $5231 = (_x$33 + '0');
                                                return $5231;
                                            }), _ctr_type$32);
                                            var $5225 = Kind$Map$def$(_file$1, _code$2, $5216, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $5225;
                                        }));
                                        var $5222 = (_idx$26 => _code$27 => {
                                            var $5232 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $5232;
                                        });
                                        var $5217 = $5222;
                                        break;
                                };
                                var $5217 = $5217($5214)($5215);
                                var $5209 = $5217;
                                break;
                        };
                        var $5201 = $5209;
                        break;
                };
                var $5193 = $5201;
                break;
        };
        return $5193;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $5234 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $5233 = $5234;
        } else {
            var $5235 = self.charCodeAt(0);
            var $5236 = self.slice(1);
            var $5237 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $5233 = $5237;
        };
        return $5233;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5239 = self.idx;
                var $5240 = self.code;
                var $5241 = self.err;
                var $5242 = Parser$Reply$error$($5239, $5240, $5241);
                var $5238 = $5242;
                break;
            case 'Parser.Reply.value':
                var $5243 = self.idx;
                var $5244 = self.code;
                var self = Parser$eof$($5243, $5244);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5246 = self.idx;
                        var $5247 = self.code;
                        var $5248 = self.err;
                        var $5249 = Parser$Reply$error$($5246, $5247, $5248);
                        var $5245 = $5249;
                        break;
                    case 'Parser.Reply.value':
                        var $5250 = self.idx;
                        var $5251 = self.code;
                        var $5252 = Parser$Reply$value$($5250, $5251, _defs$3);
                        var $5245 = $5252;
                        break;
                };
                var $5238 = $5245;
                break;
        };
        return $5238;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5254 = self.idx;
                var $5255 = self.code;
                var $5256 = self.err;
                var $5257 = Parser$Reply$error$($5254, $5255, $5256);
                var $5253 = $5257;
                break;
            case 'Parser.Reply.value':
                var $5258 = self.idx;
                var $5259 = self.code;
                var $5260 = self.val;
                var self = $5260;
                if (self) {
                    var $5262 = (_idx$9 => _code$10 => {
                        var $5263 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $5263;
                    });
                    var $5261 = $5262;
                } else {
                    var $5264 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5266 = self.idx;
                                var $5267 = self.code;
                                var $5268 = self.err;
                                var $5269 = Parser$Reply$error$($5266, $5267, $5268);
                                var $5265 = $5269;
                                break;
                            case 'Parser.Reply.value':
                                var $5270 = self.idx;
                                var $5271 = self.code;
                                var $5272 = self.val;
                                var $5273 = Kind$Parser$file$(_file$1, _code$2, $5272, $5270, $5271);
                                var $5265 = $5273;
                                break;
                        };
                        return $5265;
                    });
                    var $5261 = $5264;
                };
                var $5261 = $5261($5258)($5259);
                var $5253 = $5261;
                break;
        };
        return $5253;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function Either$(_A$1, _B$2) {
        var $5274 = null;
        return $5274;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $5276 = self.head;
                var $5277 = self.tail;
                var $5278 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $5279 = "";
                        return $5279;
                    } else {
                        var $5280 = _sep$1;
                        return $5280;
                    };
                })(), List$cons$($5276, List$cons$(String$join$go$(_sep$1, $5277, Bool$false), List$nil))));
                var $5275 = $5278;
                break;
            case 'List.nil':
                var $5281 = "";
                var $5275 = $5281;
                break;
        };
        return $5275;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $5282 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $5282;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $5283 = String$join$("\u{a}", _res$3);
        return $5283;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $5285 = self.value;
                var $5286 = _f$5($5285);
                var $5284 = $5286;
                break;
            case 'Maybe.none':
                var $5287 = _a$4;
                var $5284 = $5287;
                break;
        };
        return $5284;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5289 = Bool$true;
            var $5288 = $5289;
        } else {
            var $5290 = (self - 1n);
            var $5291 = Bool$false;
            var $5288 = $5291;
        };
        return $5288;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5293 = Nat$zero;
            var $5292 = $5293;
        } else {
            var $5294 = (self - 1n);
            var $5295 = Nat$succ$(Nat$succ$(Nat$double$($5294)));
            var $5292 = $5295;
        };
        return $5292;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5297 = Nat$zero;
            var $5296 = $5297;
        } else {
            var $5298 = (self - 1n);
            var $5299 = $5298;
            var $5296 = $5299;
        };
        return $5296;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $5301 = _str$3;
            var $5300 = $5301;
        } else {
            var $5302 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $5304 = String$cons$(_chr$2, String$pad_right$($5302, _chr$2, ""));
                var $5303 = $5304;
            } else {
                var $5305 = self.charCodeAt(0);
                var $5306 = self.slice(1);
                var $5307 = String$cons$($5305, String$pad_right$($5302, _chr$2, $5306));
                var $5303 = $5307;
            };
            var $5300 = $5303;
        };
        return $5300;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $5308 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $5308;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Either$left$(_value$3) {
        var $5309 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $5309;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $5310 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $5310;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $5311 = Either$left$(_n$1);
                    return $5311;
                } else {
                    var $5312 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $5314 = Either$right$(Nat$succ$($5312));
                        var $5313 = $5314;
                    } else {
                        var $5315 = (self - 1n);
                        var $5316 = Nat$sub_rem$($5315, $5312);
                        var $5313 = $5316;
                    };
                    return $5313;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $5317 = self.value;
                        var $5318 = Nat$div_mod$go$($5317, _m$2, Nat$succ$(_d$3));
                        return $5318;
                    case 'Either.right':
                        var $5319 = Pair$new$(_d$3, _n$1);
                        return $5319;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $5320 = self.fst;
                        var $5321 = self.snd;
                        var self = $5320;
                        if (self === 0n) {
                            var $5323 = List$cons$($5321, _res$3);
                            var $5322 = $5323;
                        } else {
                            var $5324 = (self - 1n);
                            var $5325 = Nat$to_base$go$(_base$1, $5320, List$cons$($5321, _res$3));
                            var $5322 = $5325;
                        };
                        return $5322;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $5326 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $5326;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $5327 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $5327;
                } else {
                    var $5328 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $5330 = _r$3;
                        var $5329 = $5330;
                    } else {
                        var $5331 = (self - 1n);
                        var $5332 = Nat$mod$go$($5331, $5328, Nat$succ$(_r$3));
                        var $5329 = $5332;
                    };
                    return $5329;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $5335 = self.value;
                    var $5336 = $5335;
                    var $5334 = $5336;
                    break;
                case 'Maybe.none':
                    var $5337 = 35;
                    var $5334 = $5337;
                    break;
            };
            var $5333 = $5334;
        } else {
            var $5338 = 35;
            var $5333 = $5338;
        };
        return $5333;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $5339 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $5340 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $5340;
        }));
        return $5339;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $5341 = Nat$to_string_base$(10n, _n$1);
        return $5341;
    };
    const Nat$show = x0 => Nat$show$(x0);
    const Bool$not = a0 => (!a0);

    function Kind$Code$color$(_col$1, _str$2) {
        var $5342 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $5342;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $5344 = self.head;
                var $5345 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $5347 = List$nil;
                    var $5346 = $5347;
                } else {
                    var $5348 = (self - 1n);
                    var $5349 = List$cons$($5344, List$take$($5348, $5345));
                    var $5346 = $5349;
                };
                var $5343 = $5346;
                break;
            case 'List.nil':
                var $5350 = List$nil;
                var $5343 = $5350;
                break;
        };
        return $5343;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $5352 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $5351 = $5352;
                } else {
                    var $5353 = self.charCodeAt(0);
                    var $5354 = self.slice(1);
                    var self = ($5353 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $5357 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $5356 = $5357;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $5360 = self.value;
                                        var $5361 = Maybe$some$(Nat$pred$($5360));
                                        var $5359 = $5361;
                                        break;
                                    case 'Maybe.none':
                                        var $5362 = Maybe$some$(_spa$9);
                                        var $5359 = $5362;
                                        break;
                                };
                                var _lft$14 = $5359;
                            } else {
                                var $5363 = (self - 1n);
                                var $5364 = _lft$6;
                                var _lft$14 = $5364;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $5358 = Kind$Code$highlight$go$($5354, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $5356 = $5358;
                        };
                        var $5355 = $5356;
                    } else {
                        var _chr$12 = String$cons$($5353, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $5366 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $5366;
                        } else {
                            var $5367 = _chr$12;
                            var _chr$13 = $5367;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $5368 = List$take$(_spa$9, _res$8);
                            var _res$14 = $5368;
                        } else {
                            var $5369 = _res$8;
                            var _res$14 = $5369;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $5365 = Kind$Code$highlight$go$($5354, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $5355 = $5365;
                    };
                    var $5351 = $5355;
                };
                return $5351;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $5370 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $5370;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5372 = self.idx;
                var $5373 = self.err;
                var _err$7 = $5373;
                var _hig$8 = Kind$Code$highlight$(_code$2, $5372, Nat$succ$($5372));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $5374 = Either$left$(_str$9);
                var $5371 = $5374;
                break;
            case 'Parser.Reply.value':
                var $5375 = self.val;
                var $5376 = Either$right$($5375);
                var $5371 = $5376;
                break;
        };
        return $5371;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $5378 = self.head;
                var $5379 = self.tail;
                var $5380 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $5381 = _m$bind$6;
                    return $5381;
                }))(IO$get_file$($5378))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($5378, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $5383 = self.value;
                            var _defs$9 = $5383;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $5385 = Kind$Synth$load$go$(_name$1, $5379, _defs$9);
                                    var $5384 = $5385;
                                    break;
                                case 'Maybe.some':
                                    var $5386 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $5387 = _m$pure$12;
                                        return $5387;
                                    }))(Maybe$some$(_defs$9));
                                    var $5384 = $5386;
                                    break;
                            };
                            var $5382 = $5384;
                            break;
                        case 'Either.left':
                            var $5388 = Kind$Synth$load$go$(_name$1, $5379, _defs$3);
                            var $5382 = $5388;
                            break;
                    };
                    return $5382;
                }));
                var $5377 = $5380;
                break;
            case 'List.nil':
                var $5389 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $5390 = _m$pure$5;
                    return $5390;
                }))(Maybe$none);
                var $5377 = $5389;
                break;
        };
        return $5377;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $5392 = self.head;
                var $5393 = self.tail;
                var _head$5 = (_last$2 + ($5392 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($5393, (_last$2 + ($5392 + "/")));
                var $5394 = List$cons$(_head$5, _tail$6);
                var $5391 = $5394;
                break;
            case 'List.nil':
                var $5395 = List$nil;
                var $5391 = $5395;
                break;
        };
        return $5391;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function Char$eql$(_a$1, _b$2) {
        var $5396 = (_a$1 === _b$2);
        return $5396;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $5397 = Bool$true;
                    return $5397;
                } else {
                    var $5398 = self.charCodeAt(0);
                    var $5399 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $5401 = Bool$false;
                        var $5400 = $5401;
                    } else {
                        var $5402 = self.charCodeAt(0);
                        var $5403 = self.slice(1);
                        var self = Char$eql$($5398, $5402);
                        if (self) {
                            var $5405 = String$starts_with$($5403, $5399);
                            var $5404 = $5405;
                        } else {
                            var $5406 = Bool$false;
                            var $5404 = $5406;
                        };
                        var $5400 = $5404;
                    };
                    return $5400;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $5407 = _xs$2;
                    return $5407;
                } else {
                    var $5408 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $5410 = String$nil;
                        var $5409 = $5410;
                    } else {
                        var $5411 = self.charCodeAt(0);
                        var $5412 = self.slice(1);
                        var $5413 = String$drop$($5408, $5412);
                        var $5409 = $5413;
                    };
                    return $5409;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $5414 = _n$2;
                    return $5414;
                } else {
                    var $5415 = self.charCodeAt(0);
                    var $5416 = self.slice(1);
                    var $5417 = String$length$go$($5416, Nat$succ$(_n$2));
                    return $5417;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $5418 = String$length$go$(_xs$1, 0n);
        return $5418;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $5420 = List$cons$(_last$3, List$nil);
            var $5419 = $5420;
        } else {
            var $5421 = self.charCodeAt(0);
            var $5422 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $5424 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $5423 = $5424;
            } else {
                var _next$6 = String$cons$($5421, String$nil);
                var $5425 = String$split$go$($5422, _match$2, (_last$3 + _next$6));
                var $5423 = $5425;
            };
            var $5419 = $5423;
        };
        return $5419;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $5426 = String$split$go$(_xs$1, _match$2, "");
        return $5426;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $5427 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $5427;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $5428 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
        return $5428;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $5429 = null;
        return $5429;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $5430 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $5430;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $5431 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $5431;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $5432 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $5432;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $5433 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $5433;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $5435 = self.value;
                var $5436 = Maybe$some$(_f$4($5435));
                var $5434 = $5436;
                break;
            case 'Maybe.none':
                var $5437 = Maybe$none;
                var $5434 = $5437;
                break;
        };
        return $5434;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $5438 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $5438;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $5439 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $5439;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $5440 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $5440;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $5442 = self.value;
                var $5443 = $5442(Bits$e);
                var $5441 = $5443;
                break;
            case 'Maybe.none':
                var $5444 = Bits$e;
                var $5441 = $5444;
                break;
        };
        return $5441;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $5445 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $5445;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $5446 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $5446;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $5448 = self.head;
                var $5449 = self.tail;
                var self = $5448;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $5451 = self.name;
                        var $5452 = self.term;
                        var $5453 = self.type;
                        var self = $5453;
                        switch (self._) {
                            case 'Maybe.some':
                                var $5455 = self.value;
                                var $5456 = Kind$Check$result$(Maybe$some$(Maybe$some$($5455)), List$nil);
                                var self = $5456;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($5452, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $5458 = self.value;
                                        var $5459 = self.errors;
                                        var self = $5458;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $5461 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($5461)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $5463 = self.value;
                                                        var $5464 = self.errors;
                                                        var $5465 = Kind$Check$result$($5463, List$concat$($5459, $5464));
                                                        var $5462 = $5465;
                                                        break;
                                                };
                                                var $5460 = $5462;
                                                break;
                                            case 'Maybe.none':
                                                var $5466 = Kind$Check$result$(Maybe$none, $5459);
                                                var $5460 = $5466;
                                                break;
                                        };
                                        var $5457 = $5460;
                                        break;
                                };
                                var self = $5457;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5467 = self.value;
                                var $5468 = self.errors;
                                var self = $5467;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $5470 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($5449, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5472 = self.value;
                                                var $5473 = self.errors;
                                                var self = $5472;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $5475 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($5451, $5452, $5470), $5475)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $5477 = self.value;
                                                                var $5478 = self.errors;
                                                                var $5479 = Kind$Check$result$($5477, List$concat$($5473, $5478));
                                                                var $5476 = $5479;
                                                                break;
                                                        };
                                                        var $5474 = $5476;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $5480 = Kind$Check$result$(Maybe$none, $5473);
                                                        var $5474 = $5480;
                                                        break;
                                                };
                                                var self = $5474;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5481 = self.value;
                                                var $5482 = self.errors;
                                                var $5483 = Kind$Check$result$($5481, List$concat$($5468, $5482));
                                                var $5471 = $5483;
                                                break;
                                        };
                                        var $5469 = $5471;
                                        break;
                                    case 'Maybe.none':
                                        var $5484 = Kind$Check$result$(Maybe$none, $5468);
                                        var $5469 = $5484;
                                        break;
                                };
                                var $5454 = $5469;
                                break;
                        };
                        var $5450 = $5454;
                        break;
                };
                var $5447 = $5450;
                break;
            case 'List.nil':
                var $5485 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $5447 = $5485;
                break;
        };
        return $5447;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $5487 = self.name;
                var $5488 = self.indx;
                var $5489 = Kind$Term$var$($5487, $5488);
                var $5486 = $5489;
                break;
            case 'Kind.Term.ref':
                var $5490 = self.name;
                var $5491 = Kind$Term$ref$($5490);
                var $5486 = $5491;
                break;
            case 'Kind.Term.all':
                var $5492 = self.eras;
                var $5493 = self.self;
                var $5494 = self.name;
                var $5495 = self.xtyp;
                var $5496 = self.body;
                var $5497 = Kind$Term$all$($5492, $5493, $5494, Kind$Term$normalize$($5495, _defs$2), (_s$8 => _x$9 => {
                    var $5498 = Kind$Term$normalize$($5496(_s$8)(_x$9), _defs$2);
                    return $5498;
                }));
                var $5486 = $5497;
                break;
            case 'Kind.Term.lam':
                var $5499 = self.name;
                var $5500 = self.body;
                var $5501 = Kind$Term$lam$($5499, (_x$5 => {
                    var $5502 = Kind$Term$normalize$($5500(_x$5), _defs$2);
                    return $5502;
                }));
                var $5486 = $5501;
                break;
            case 'Kind.Term.app':
                var $5503 = self.func;
                var $5504 = self.argm;
                var $5505 = Kind$Term$app$(Kind$Term$normalize$($5503, _defs$2), Kind$Term$normalize$($5504, _defs$2));
                var $5486 = $5505;
                break;
            case 'Kind.Term.let':
                var $5506 = self.name;
                var $5507 = self.expr;
                var $5508 = self.body;
                var $5509 = Kind$Term$let$($5506, Kind$Term$normalize$($5507, _defs$2), (_x$6 => {
                    var $5510 = Kind$Term$normalize$($5508(_x$6), _defs$2);
                    return $5510;
                }));
                var $5486 = $5509;
                break;
            case 'Kind.Term.def':
                var $5511 = self.name;
                var $5512 = self.expr;
                var $5513 = self.body;
                var $5514 = Kind$Term$def$($5511, Kind$Term$normalize$($5512, _defs$2), (_x$6 => {
                    var $5515 = Kind$Term$normalize$($5513(_x$6), _defs$2);
                    return $5515;
                }));
                var $5486 = $5514;
                break;
            case 'Kind.Term.ann':
                var $5516 = self.done;
                var $5517 = self.term;
                var $5518 = self.type;
                var $5519 = Kind$Term$ann$($5516, Kind$Term$normalize$($5517, _defs$2), Kind$Term$normalize$($5518, _defs$2));
                var $5486 = $5519;
                break;
            case 'Kind.Term.gol':
                var $5520 = self.name;
                var $5521 = self.dref;
                var $5522 = self.verb;
                var $5523 = Kind$Term$gol$($5520, $5521, $5522);
                var $5486 = $5523;
                break;
            case 'Kind.Term.hol':
                var $5524 = self.path;
                var $5525 = Kind$Term$hol$($5524);
                var $5486 = $5525;
                break;
            case 'Kind.Term.nat':
                var $5526 = self.natx;
                var $5527 = Kind$Term$nat$($5526);
                var $5486 = $5527;
                break;
            case 'Kind.Term.chr':
                var $5528 = self.chrx;
                var $5529 = Kind$Term$chr$($5528);
                var $5486 = $5529;
                break;
            case 'Kind.Term.str':
                var $5530 = self.strx;
                var $5531 = Kind$Term$str$($5530);
                var $5486 = $5531;
                break;
            case 'Kind.Term.ori':
                var $5532 = self.expr;
                var $5533 = Kind$Term$normalize$($5532, _defs$2);
                var $5486 = $5533;
                break;
            case 'Kind.Term.typ':
                var $5534 = Kind$Term$typ;
                var $5486 = $5534;
                break;
            case 'Kind.Term.cse':
                var $5535 = _term$1;
                var $5486 = $5535;
                break;
        };
        return $5486;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $5537 = self.head;
                var $5538 = self.tail;
                var self = $5537;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $5540 = self.name;
                        var $5541 = self.type;
                        var $5542 = Kind$Term$all$(Bool$false, "", $5540, Maybe$default$($5541, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $5543 = Kind$Term$desugar_cse$motive$($5538, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $5543;
                        }));
                        var $5539 = $5542;
                        break;
                };
                var $5536 = $5539;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $5545 = self.value;
                        var $5546 = $5545;
                        var $5544 = $5546;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $5548 = self.value;
                                var $5549 = Kind$Term$normalize$($5548, Kind$Map$new);
                                var $5547 = $5549;
                                break;
                            case 'Maybe.none':
                                var $5550 = Kind$Term$hol$(Bits$e);
                                var $5547 = $5550;
                                break;
                        };
                        var $5544 = $5547;
                        break;
                };
                var $5536 = $5544;
                break;
        };
        return $5536;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5552 = self.tail;
                var $5553 = $5552;
                var $5551 = $5553;
                break;
            case 'List.nil':
                var $5554 = List$nil;
                var $5551 = $5554;
                break;
        };
        return $5551;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $5555 = self.func;
                        var $5556 = self.argm;
                        var $5557 = Kind$SmartMotive$vals$cont$(_expr$1, $5555, List$cons$($5556, _args$3), _defs$4);
                        return $5557;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $5558 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $5558;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $5559 = self.body;
                        var $5560 = Kind$SmartMotive$vals$(_expr$1, $5559(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $5560;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $5561 = Kind$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $5561;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$SmartMotive$vals = x0 => x1 => x2 => Kind$SmartMotive$vals$(x0, x1, x2);

    function Kind$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $5562 = self.self;
                        var $5563 = self.name;
                        var $5564 = self.body;
                        var $5565 = Kind$SmartMotive$nams$cont$(_name$1, $5564(Kind$Term$ref$($5562))(Kind$Term$ref$($5563)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5563, List$nil)))), _binds$3), _defs$4);
                        return $5565;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $5566 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $5566;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $5568 = self.xtyp;
                var $5569 = Kind$SmartMotive$nams$cont$(_name$1, $5568, List$nil, _defs$3);
                var $5567 = $5569;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $5570 = List$nil;
                var $5567 = $5570;
                break;
        };
        return $5567;
    };
    const Kind$SmartMotive$nams = x0 => x1 => x2 => Kind$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $5572 = self.head;
                var $5573 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $5575 = self.head;
                        var $5576 = self.tail;
                        var $5577 = List$cons$(Pair$new$($5572, $5575), List$zip$($5573, $5576));
                        var $5574 = $5577;
                        break;
                    case 'List.nil':
                        var $5578 = List$nil;
                        var $5574 = $5578;
                        break;
                };
                var $5571 = $5574;
                break;
            case 'List.nil':
                var $5579 = List$nil;
                var $5571 = $5579;
                break;
        };
        return $5571;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$name$(_name$1) {
        var $5580 = (kind_name_to_bits(_name$1));
        return $5580;
    };
    const Kind$Term$serialize$name = x0 => Kind$Term$serialize$name$(x0);

    function Kind$Term$serialize$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $5582 = self.indx;
                var self = ($5582 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $5582 <= 0n ? 0n : _depth$2 - $5582)))));
                    var $5584 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $5583 = $5584;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($5582)));
                    var $5585 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $5583 = $5585;
                };
                var $5581 = $5583;
                break;
            case 'Kind.Term.ref':
                var $5586 = self.name;
                var _name$7 = a1 => (a1 + Kind$Term$serialize$name$($5586));
                var $5587 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $5581 = $5587;
                break;
            case 'Kind.Term.all':
                var $5588 = self.eras;
                var $5589 = self.self;
                var $5590 = self.name;
                var $5591 = self.xtyp;
                var $5592 = self.body;
                var self = $5588;
                if (self) {
                    var $5594 = Bits$i;
                    var _eras$11 = $5594;
                } else {
                    var $5595 = Bits$o;
                    var _eras$11 = $5595;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($5589)));
                var _xtyp$13 = Kind$Term$serialize($5591)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize($5592(Kind$Term$var$($5589, _depth$2))(Kind$Term$var$($5590, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $5593 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $5581 = $5593;
                break;
            case 'Kind.Term.lam':
                var $5596 = self.name;
                var $5597 = self.body;
                var _body$8 = Kind$Term$serialize($5597(Kind$Term$var$($5596, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5598 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $5581 = $5598;
                break;
            case 'Kind.Term.app':
                var $5599 = self.func;
                var $5600 = self.argm;
                var _func$8 = Kind$Term$serialize($5599)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize($5600)(_depth$2)(_init$3)(_diff$4);
                var $5601 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $5581 = $5601;
                break;
            case 'Kind.Term.let':
                var $5602 = self.name;
                var $5603 = self.expr;
                var $5604 = self.body;
                var _expr$9 = Kind$Term$serialize($5603)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize($5604(Kind$Term$var$($5602, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5605 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $5581 = $5605;
                break;
            case 'Kind.Term.def':
                var $5606 = self.expr;
                var $5607 = self.body;
                var $5608 = Kind$Term$serialize$($5607($5606), _depth$2, _init$3, _diff$4, _x$5);
                var $5581 = $5608;
                break;
            case 'Kind.Term.ann':
                var $5609 = self.term;
                var $5610 = Kind$Term$serialize$($5609, _depth$2, _init$3, _diff$4, _x$5);
                var $5581 = $5610;
                break;
            case 'Kind.Term.gol':
                var $5611 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($5611)));
                var $5612 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $5581 = $5612;
                break;
            case 'Kind.Term.nat':
                var $5613 = self.natx;
                var $5614 = Kind$Term$serialize$(Kind$Term$unroll_nat$($5613), _depth$2, _init$3, _diff$4, _x$5);
                var $5581 = $5614;
                break;
            case 'Kind.Term.chr':
                var $5615 = self.chrx;
                var $5616 = Kind$Term$serialize$(Kind$Term$unroll_chr$($5615), _depth$2, _init$3, _diff$4, _x$5);
                var $5581 = $5616;
                break;
            case 'Kind.Term.str':
                var $5617 = self.strx;
                var $5618 = Kind$Term$serialize$(Kind$Term$unroll_str$($5617), _depth$2, _init$3, _diff$4, _x$5);
                var $5581 = $5618;
                break;
            case 'Kind.Term.ori':
                var $5619 = self.expr;
                var $5620 = Kind$Term$serialize$($5619, _depth$2, _init$3, _diff$4, _x$5);
                var $5581 = $5620;
                break;
            case 'Kind.Term.typ':
                var $5621 = (((_x$5 + '1') + '1') + '0');
                var $5581 = $5621;
                break;
            case 'Kind.Term.hol':
                var $5622 = _x$5;
                var $5581 = $5622;
                break;
            case 'Kind.Term.cse':
                var $5623 = _diff$4(_x$5);
                var $5581 = $5623;
                break;
        };
        return $5581;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$(x0, x1, x2, x3, x4);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, _lv$3, Bits$o, Bits$e);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, _lv$3, Bits$i, Bits$e);
        var $5624 = (_bh$5 === _ah$4);
        return $5624;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $5626 = _to$3;
            var $5625 = $5626;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $5628 = self.name;
                    var $5629 = self.indx;
                    var $5630 = Kind$Term$var$($5628, $5629);
                    var $5627 = $5630;
                    break;
                case 'Kind.Term.ref':
                    var $5631 = self.name;
                    var $5632 = Kind$Term$ref$($5631);
                    var $5627 = $5632;
                    break;
                case 'Kind.Term.all':
                    var $5633 = self.eras;
                    var $5634 = self.self;
                    var $5635 = self.name;
                    var $5636 = self.xtyp;
                    var $5637 = self.body;
                    var _xtyp$10 = Kind$SmartMotive$replace$($5636, _from$2, _to$3, _lv$4);
                    var _body$11 = $5637(Kind$Term$ref$($5634))(Kind$Term$ref$($5635));
                    var _body$12 = Kind$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $5638 = Kind$Term$all$($5633, $5634, $5635, _xtyp$10, (_s$13 => _x$14 => {
                        var $5639 = _body$12;
                        return $5639;
                    }));
                    var $5627 = $5638;
                    break;
                case 'Kind.Term.lam':
                    var $5640 = self.name;
                    var $5641 = self.body;
                    var _body$7 = $5641(Kind$Term$ref$($5640));
                    var _body$8 = Kind$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5642 = Kind$Term$lam$($5640, (_x$9 => {
                        var $5643 = _body$8;
                        return $5643;
                    }));
                    var $5627 = $5642;
                    break;
                case 'Kind.Term.app':
                    var $5644 = self.func;
                    var $5645 = self.argm;
                    var _func$7 = Kind$SmartMotive$replace$($5644, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$SmartMotive$replace$($5645, _from$2, _to$3, _lv$4);
                    var $5646 = Kind$Term$app$(_func$7, _argm$8);
                    var $5627 = $5646;
                    break;
                case 'Kind.Term.let':
                    var $5647 = self.name;
                    var $5648 = self.expr;
                    var $5649 = self.body;
                    var _expr$8 = Kind$SmartMotive$replace$($5648, _from$2, _to$3, _lv$4);
                    var _body$9 = $5649(Kind$Term$ref$($5647));
                    var _body$10 = Kind$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5650 = Kind$Term$let$($5647, _expr$8, (_x$11 => {
                        var $5651 = _body$10;
                        return $5651;
                    }));
                    var $5627 = $5650;
                    break;
                case 'Kind.Term.def':
                    var $5652 = self.name;
                    var $5653 = self.expr;
                    var $5654 = self.body;
                    var _expr$8 = Kind$SmartMotive$replace$($5653, _from$2, _to$3, _lv$4);
                    var _body$9 = $5654(Kind$Term$ref$($5652));
                    var _body$10 = Kind$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5655 = Kind$Term$def$($5652, _expr$8, (_x$11 => {
                        var $5656 = _body$10;
                        return $5656;
                    }));
                    var $5627 = $5655;
                    break;
                case 'Kind.Term.ann':
                    var $5657 = self.done;
                    var $5658 = self.term;
                    var $5659 = self.type;
                    var _term$8 = Kind$SmartMotive$replace$($5658, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$SmartMotive$replace$($5659, _from$2, _to$3, _lv$4);
                    var $5660 = Kind$Term$ann$($5657, _term$8, _type$9);
                    var $5627 = $5660;
                    break;
                case 'Kind.Term.ori':
                    var $5661 = self.expr;
                    var $5662 = Kind$SmartMotive$replace$($5661, _from$2, _to$3, _lv$4);
                    var $5627 = $5662;
                    break;
                case 'Kind.Term.typ':
                    var $5663 = Kind$Term$typ;
                    var $5627 = $5663;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $5664 = _term$1;
                    var $5627 = $5664;
                    break;
            };
            var $5625 = $5627;
        };
        return $5625;
    };
    const Kind$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $5665 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $5667 = self.fst;
                    var $5668 = self.snd;
                    var $5669 = Kind$SmartMotive$replace$(_moti$11, $5668, Kind$Term$ref$($5667), _size$5);
                    var $5666 = $5669;
                    break;
            };
            return $5666;
        }));
        return $5665;
    };
    const Kind$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $5671 = Kind$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $5670 = $5671;
                break;
            case 'Maybe.some':
                var $5672 = _done$9;
                var $5670 = $5672;
                break;
        };
        return $5670;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $5674 = Bool$true;
            var $5673 = $5674;
        } else {
            var $5675 = self.charCodeAt(0);
            var $5676 = self.slice(1);
            var $5677 = Bool$false;
            var $5673 = $5677;
        };
        return $5673;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $5679 = self.self;
                var $5680 = self.name;
                var $5681 = self.body;
                var $5682 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($5680);
                    if (self) {
                        var $5683 = _name$1;
                        return $5683;
                    } else {
                        var $5684 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5680, List$nil))));
                        return $5684;
                    };
                })(), (_x$11 => {
                    var $5685 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $5681(Kind$Term$var$($5679, 0n))(Kind$Term$var$($5680, 0n)), _body$4, _defs$5);
                    return $5685;
                }));
                var $5678 = $5682;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5687 = self.head;
                        var $5688 = self.tail;
                        var self = $5687;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5690 = self.name;
                                var $5691 = Kind$Term$lam$($5690, (_x$13 => {
                                    var $5692 = Kind$Term$desugar_cse$argument$(_name$1, $5688, _type$3, _body$4, _defs$5);
                                    return $5692;
                                }));
                                var $5689 = $5691;
                                break;
                        };
                        var $5686 = $5689;
                        break;
                    case 'List.nil':
                        var $5693 = _body$4;
                        var $5686 = $5693;
                        break;
                };
                var $5678 = $5686;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5695 = self.head;
                        var $5696 = self.tail;
                        var self = $5695;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5698 = self.name;
                                var $5699 = Kind$Term$lam$($5698, (_x$12 => {
                                    var $5700 = Kind$Term$desugar_cse$argument$(_name$1, $5696, _type$3, _body$4, _defs$5);
                                    return $5700;
                                }));
                                var $5697 = $5699;
                                break;
                        };
                        var $5694 = $5697;
                        break;
                    case 'List.nil':
                        var $5701 = _body$4;
                        var $5694 = $5701;
                        break;
                };
                var $5678 = $5694;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5703 = self.head;
                        var $5704 = self.tail;
                        var self = $5703;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5706 = self.name;
                                var $5707 = Kind$Term$lam$($5706, (_x$11 => {
                                    var $5708 = Kind$Term$desugar_cse$argument$(_name$1, $5704, _type$3, _body$4, _defs$5);
                                    return $5708;
                                }));
                                var $5705 = $5707;
                                break;
                        };
                        var $5702 = $5705;
                        break;
                    case 'List.nil':
                        var $5709 = _body$4;
                        var $5702 = $5709;
                        break;
                };
                var $5678 = $5702;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5711 = self.head;
                        var $5712 = self.tail;
                        var self = $5711;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5714 = self.name;
                                var $5715 = Kind$Term$lam$($5714, (_x$14 => {
                                    var $5716 = Kind$Term$desugar_cse$argument$(_name$1, $5712, _type$3, _body$4, _defs$5);
                                    return $5716;
                                }));
                                var $5713 = $5715;
                                break;
                        };
                        var $5710 = $5713;
                        break;
                    case 'List.nil':
                        var $5717 = _body$4;
                        var $5710 = $5717;
                        break;
                };
                var $5678 = $5710;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5719 = self.head;
                        var $5720 = self.tail;
                        var self = $5719;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5722 = self.name;
                                var $5723 = Kind$Term$lam$($5722, (_x$17 => {
                                    var $5724 = Kind$Term$desugar_cse$argument$(_name$1, $5720, _type$3, _body$4, _defs$5);
                                    return $5724;
                                }));
                                var $5721 = $5723;
                                break;
                        };
                        var $5718 = $5721;
                        break;
                    case 'List.nil':
                        var $5725 = _body$4;
                        var $5718 = $5725;
                        break;
                };
                var $5678 = $5718;
                break;
        };
        return $5678;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $5727 = self.value;
                var $5728 = Maybe$some$($5727);
                var $5726 = $5728;
                break;
            case 'Maybe.none':
                var $5729 = _b$3;
                var $5726 = $5729;
                break;
        };
        return $5726;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $5730 = self.self;
                        var $5731 = self.name;
                        var $5732 = self.xtyp;
                        var $5733 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($5731, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($5731 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $5732, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $5733(Kind$Term$var$($5730, 0n))(Kind$Term$var$($5731, 0n));
                        var $5734 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $5734;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $5737 = _expr$1;
                            var $5738 = _wyth$3;
                            let _expr$11 = $5737;
                            let _defn$10;
                            while ($5738._ === 'List.cons') {
                                _defn$10 = $5738.head;
                                var $5737 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5739 = self.term;
                                            var $5740 = $5739;
                                            return $5740;
                                    };
                                })());
                                _expr$11 = $5737;
                                $5738 = $5738.tail;
                            }
                            return _expr$11;
                        })();
                        var $5735 = _expr$10;
                        return $5735;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $5743 = _expr$1;
                            var $5744 = _wyth$3;
                            let _expr$10 = $5743;
                            let _defn$9;
                            while ($5744._ === 'List.cons') {
                                _defn$9 = $5744.head;
                                var $5743 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5745 = self.term;
                                            var $5746 = $5745;
                                            return $5746;
                                    };
                                })());
                                _expr$10 = $5743;
                                $5744 = $5744.tail;
                            }
                            return _expr$10;
                        })();
                        var $5741 = _expr$9;
                        return $5741;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $5749 = _expr$1;
                            var $5750 = _wyth$3;
                            let _expr$9 = $5749;
                            let _defn$8;
                            while ($5750._ === 'List.cons') {
                                _defn$8 = $5750.head;
                                var $5749 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5751 = self.term;
                                            var $5752 = $5751;
                                            return $5752;
                                    };
                                })());
                                _expr$9 = $5749;
                                $5750 = $5750.tail;
                            }
                            return _expr$9;
                        })();
                        var $5747 = _expr$8;
                        return $5747;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $5755 = _expr$1;
                            var $5756 = _wyth$3;
                            let _expr$12 = $5755;
                            let _defn$11;
                            while ($5756._ === 'List.cons') {
                                _defn$11 = $5756.head;
                                var $5755 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5757 = self.term;
                                            var $5758 = $5757;
                                            return $5758;
                                    };
                                })());
                                _expr$12 = $5755;
                                $5756 = $5756.tail;
                            }
                            return _expr$12;
                        })();
                        var $5753 = _expr$11;
                        return $5753;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $5761 = _expr$1;
                            var $5762 = _wyth$3;
                            let _expr$15 = $5761;
                            let _defn$14;
                            while ($5762._ === 'List.cons') {
                                _defn$14 = $5762.head;
                                var $5761 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5763 = self.term;
                                            var $5764 = $5763;
                                            return $5764;
                                    };
                                })());
                                _expr$15 = $5761;
                                $5762 = $5762.tail;
                            }
                            return _expr$15;
                        })();
                        var $5759 = _expr$14;
                        return $5759;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $5766 = self.self;
                var $5767 = self.name;
                var $5768 = self.xtyp;
                var $5769 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $5768, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $5769(Kind$Term$var$($5766, 0n))(Kind$Term$var$($5767, 0n));
                var $5770 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $5765 = $5770;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $5771 = Maybe$none;
                var $5765 = $5771;
                break;
        };
        return $5765;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $5772 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $5772;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = BitsMap$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $5774 = Bool$false;
                var $5773 = $5774;
                break;
            case 'Maybe.some':
                var $5775 = Bool$true;
                var $5773 = $5775;
                break;
        };
        return $5773;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $5776 = BitsSet$has$(_bits$1, _set$2);
        return $5776;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $5777 = self.name;
                        var $5778 = Maybe$some$(Pair$new$($5777, _arity$2));
                        return $5778;
                    case 'Kind.Term.ref':
                        var $5779 = self.name;
                        var $5780 = Maybe$some$(Pair$new$($5779, _arity$2));
                        return $5780;
                    case 'Kind.Term.app':
                        var $5781 = self.func;
                        var $5782 = Kind$Term$equal$extra_holes$funari$($5781, Nat$succ$(_arity$2));
                        return $5782;
                    case 'Kind.Term.ori':
                        var $5783 = self.expr;
                        var $5784 = Kind$Term$equal$extra_holes$funari$($5783, _arity$2);
                        return $5784;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5785 = Maybe$none;
                        return $5785;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $5787 = self.xtyp;
                var $5788 = self.body;
                var $5789 = (Kind$Term$has_holes$($5787) || Kind$Term$has_holes$($5788(Kind$Term$typ)(Kind$Term$typ)));
                var $5786 = $5789;
                break;
            case 'Kind.Term.lam':
                var $5790 = self.body;
                var $5791 = Kind$Term$has_holes$($5790(Kind$Term$typ));
                var $5786 = $5791;
                break;
            case 'Kind.Term.app':
                var $5792 = self.func;
                var $5793 = self.argm;
                var $5794 = (Kind$Term$has_holes$($5792) || Kind$Term$has_holes$($5793));
                var $5786 = $5794;
                break;
            case 'Kind.Term.let':
                var $5795 = self.expr;
                var $5796 = self.body;
                var $5797 = (Kind$Term$has_holes$($5795) || Kind$Term$has_holes$($5796(Kind$Term$typ)));
                var $5786 = $5797;
                break;
            case 'Kind.Term.def':
                var $5798 = self.expr;
                var $5799 = self.body;
                var $5800 = (Kind$Term$has_holes$($5798) || Kind$Term$has_holes$($5799(Kind$Term$typ)));
                var $5786 = $5800;
                break;
            case 'Kind.Term.ann':
                var $5801 = self.term;
                var $5802 = self.type;
                var $5803 = (Kind$Term$has_holes$($5801) || Kind$Term$has_holes$($5802));
                var $5786 = $5803;
                break;
            case 'Kind.Term.ori':
                var $5804 = self.expr;
                var $5805 = Kind$Term$has_holes$($5804);
                var $5786 = $5805;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $5806 = Bool$false;
                var $5786 = $5806;
                break;
            case 'Kind.Term.hol':
                var $5807 = Bool$true;
                var $5786 = $5807;
                break;
        };
        return $5786;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $5810 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5809 = $5810;
                } else {
                    var $5811 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $5809 = $5811;
                };
                var $5808 = $5809;
                break;
            case 'Kind.Term.hol':
                var $5812 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $5808 = $5812;
                break;
        };
        return $5808;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $5814 = self.func;
                var $5815 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $5817 = self.func;
                        var $5818 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($5814, $5817);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5820 = self.value;
                                var $5821 = self.errors;
                                var self = $5820;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5823 = Kind$Check$result$(Maybe$none, $5821);
                                        var $5822 = $5823;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($5815, $5818);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5825 = self.value;
                                                var $5826 = self.errors;
                                                var $5827 = Kind$Check$result$($5825, List$concat$($5821, $5826));
                                                var $5824 = $5827;
                                                break;
                                        };
                                        var $5822 = $5824;
                                        break;
                                };
                                var $5819 = $5822;
                                break;
                        };
                        var $5816 = $5819;
                        break;
                    case 'Kind.Term.hol':
                        var $5828 = self.path;
                        var self = Kind$Term$equal$hole$($5828, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5830 = self.value;
                                var $5831 = self.errors;
                                var self = $5830;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5833 = Kind$Check$result$(Maybe$none, $5831);
                                        var $5832 = $5833;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5835 = self.value;
                                                var $5836 = self.errors;
                                                var $5837 = Kind$Check$result$($5835, List$concat$($5831, $5836));
                                                var $5834 = $5837;
                                                break;
                                        };
                                        var $5832 = $5834;
                                        break;
                                };
                                var $5829 = $5832;
                                break;
                        };
                        var $5816 = $5829;
                        break;
                    case 'Kind.Term.ori':
                        var $5838 = self.expr;
                        var $5839 = Kind$Term$equal$extra_holes$filler$(_a$1, $5838);
                        var $5816 = $5839;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5840 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5816 = $5840;
                        break;
                };
                var $5813 = $5816;
                break;
            case 'Kind.Term.hol':
                var $5841 = self.path;
                var self = Kind$Term$equal$hole$($5841, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $5843 = self.value;
                        var $5844 = self.errors;
                        var self = $5843;
                        switch (self._) {
                            case 'Maybe.none':
                                var $5846 = Kind$Check$result$(Maybe$none, $5844);
                                var $5845 = $5846;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $5848 = self.value;
                                        var $5849 = self.errors;
                                        var $5850 = Kind$Check$result$($5848, List$concat$($5844, $5849));
                                        var $5847 = $5850;
                                        break;
                                };
                                var $5845 = $5847;
                                break;
                        };
                        var $5842 = $5845;
                        break;
                };
                var $5813 = $5842;
                break;
            case 'Kind.Term.ori':
                var $5851 = self.expr;
                var $5852 = Kind$Term$equal$extra_holes$filler$($5851, _b$2);
                var $5813 = $5852;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $5854 = self.path;
                        var self = Kind$Term$equal$hole$($5854, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5856 = self.value;
                                var $5857 = self.errors;
                                var self = $5856;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5859 = Kind$Check$result$(Maybe$none, $5857);
                                        var $5858 = $5859;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5861 = self.value;
                                                var $5862 = self.errors;
                                                var $5863 = Kind$Check$result$($5861, List$concat$($5857, $5862));
                                                var $5860 = $5863;
                                                break;
                                        };
                                        var $5858 = $5860;
                                        break;
                                };
                                var $5855 = $5858;
                                break;
                        };
                        var $5853 = $5855;
                        break;
                    case 'Kind.Term.ori':
                        var $5864 = self.expr;
                        var $5865 = Kind$Term$equal$extra_holes$filler$(_a$1, $5864);
                        var $5853 = $5865;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5866 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5853 = $5866;
                        break;
                };
                var $5813 = $5853;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $5868 = self.path;
                        var self = Kind$Term$equal$hole$($5868, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5870 = self.value;
                                var $5871 = self.errors;
                                var self = $5870;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5873 = Kind$Check$result$(Maybe$none, $5871);
                                        var $5872 = $5873;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5875 = self.value;
                                                var $5876 = self.errors;
                                                var $5877 = Kind$Check$result$($5875, List$concat$($5871, $5876));
                                                var $5874 = $5877;
                                                break;
                                        };
                                        var $5872 = $5874;
                                        break;
                                };
                                var $5869 = $5872;
                                break;
                        };
                        var $5867 = $5869;
                        break;
                    case 'Kind.Term.ori':
                        var $5878 = self.expr;
                        var $5879 = Kind$Term$equal$extra_holes$filler$(_a$1, $5878);
                        var $5867 = $5879;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5880 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5867 = $5880;
                        break;
                };
                var $5813 = $5867;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $5882 = self.path;
                        var self = Kind$Term$equal$hole$($5882, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5884 = self.value;
                                var $5885 = self.errors;
                                var self = $5884;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5887 = Kind$Check$result$(Maybe$none, $5885);
                                        var $5886 = $5887;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5889 = self.value;
                                                var $5890 = self.errors;
                                                var $5891 = Kind$Check$result$($5889, List$concat$($5885, $5890));
                                                var $5888 = $5891;
                                                break;
                                        };
                                        var $5886 = $5888;
                                        break;
                                };
                                var $5883 = $5886;
                                break;
                        };
                        var $5881 = $5883;
                        break;
                    case 'Kind.Term.ori':
                        var $5892 = self.expr;
                        var $5893 = Kind$Term$equal$extra_holes$filler$(_a$1, $5892);
                        var $5881 = $5893;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5894 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5881 = $5894;
                        break;
                };
                var $5813 = $5881;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $5896 = self.path;
                        var self = Kind$Term$equal$hole$($5896, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5898 = self.value;
                                var $5899 = self.errors;
                                var self = $5898;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5901 = Kind$Check$result$(Maybe$none, $5899);
                                        var $5900 = $5901;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5903 = self.value;
                                                var $5904 = self.errors;
                                                var $5905 = Kind$Check$result$($5903, List$concat$($5899, $5904));
                                                var $5902 = $5905;
                                                break;
                                        };
                                        var $5900 = $5902;
                                        break;
                                };
                                var $5897 = $5900;
                                break;
                        };
                        var $5895 = $5897;
                        break;
                    case 'Kind.Term.ori':
                        var $5906 = self.expr;
                        var $5907 = Kind$Term$equal$extra_holes$filler$(_a$1, $5906);
                        var $5895 = $5907;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5908 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5895 = $5908;
                        break;
                };
                var $5813 = $5895;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $5910 = self.path;
                        var self = Kind$Term$equal$hole$($5910, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5912 = self.value;
                                var $5913 = self.errors;
                                var self = $5912;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5915 = Kind$Check$result$(Maybe$none, $5913);
                                        var $5914 = $5915;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5917 = self.value;
                                                var $5918 = self.errors;
                                                var $5919 = Kind$Check$result$($5917, List$concat$($5913, $5918));
                                                var $5916 = $5919;
                                                break;
                                        };
                                        var $5914 = $5916;
                                        break;
                                };
                                var $5911 = $5914;
                                break;
                        };
                        var $5909 = $5911;
                        break;
                    case 'Kind.Term.ori':
                        var $5920 = self.expr;
                        var $5921 = Kind$Term$equal$extra_holes$filler$(_a$1, $5920);
                        var $5909 = $5921;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5922 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5909 = $5922;
                        break;
                };
                var $5813 = $5909;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $5924 = self.path;
                        var self = Kind$Term$equal$hole$($5924, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5926 = self.value;
                                var $5927 = self.errors;
                                var self = $5926;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5929 = Kind$Check$result$(Maybe$none, $5927);
                                        var $5928 = $5929;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5931 = self.value;
                                                var $5932 = self.errors;
                                                var $5933 = Kind$Check$result$($5931, List$concat$($5927, $5932));
                                                var $5930 = $5933;
                                                break;
                                        };
                                        var $5928 = $5930;
                                        break;
                                };
                                var $5925 = $5928;
                                break;
                        };
                        var $5923 = $5925;
                        break;
                    case 'Kind.Term.ori':
                        var $5934 = self.expr;
                        var $5935 = Kind$Term$equal$extra_holes$filler$(_a$1, $5934);
                        var $5923 = $5935;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5936 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5923 = $5936;
                        break;
                };
                var $5813 = $5923;
                break;
        };
        return $5813;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $5938 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $5940 = self.value;
                        var self = $5938;
                        switch (self._) {
                            case 'Pair.new':
                                var $5942 = self.fst;
                                var $5943 = self.snd;
                                var self = $5940;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $5945 = self.fst;
                                        var $5946 = self.snd;
                                        var _same_fun$9 = ($5942 === $5945);
                                        var _same_ari$10 = ($5943 === $5946);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $5948 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $5947 = $5948;
                                        } else {
                                            var $5949 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $5947 = $5949;
                                        };
                                        var $5944 = $5947;
                                        break;
                                };
                                var $5941 = $5944;
                                break;
                        };
                        var $5939 = $5941;
                        break;
                    case 'Maybe.none':
                        var $5950 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5939 = $5950;
                        break;
                };
                var $5937 = $5939;
                break;
            case 'Maybe.none':
                var $5951 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $5937 = $5951;
                break;
        };
        return $5937;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $5952 = BitsMap$set$(_bits$1, Unit$new, _set$2);
        return $5952;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $5953 = BitsSet$set$(_bits$1, _set$2);
        return $5953;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $5955 = _b$2;
            var $5954 = $5955;
        } else {
            var $5956 = (!_b$2);
            var $5954 = $5956;
        };
        return $5954;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, _lv$4, Bits$o, Bits$e);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, _lv$4, Bits$i, Bits$e);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $5958 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $5957 = $5958;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, _lv$4, Bits$o, Bits$e);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, _lv$4, Bits$i, Bits$e);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $5960 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $5959 = $5960;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $5963 = self.value;
                            var $5964 = self.errors;
                            var self = $5963;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $5966 = Kind$Check$result$(Maybe$none, $5964);
                                    var $5965 = $5966;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $5968 = self.value;
                                            var $5969 = self.errors;
                                            var $5970 = Kind$Check$result$($5968, List$concat$($5964, $5969));
                                            var $5967 = $5970;
                                            break;
                                    };
                                    var $5965 = $5967;
                                    break;
                            };
                            var $5962 = $5965;
                            break;
                    };
                    var $5961 = $5962;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $5972 = self.eras;
                            var $5973 = self.self;
                            var $5974 = self.name;
                            var $5975 = self.xtyp;
                            var $5976 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $5978 = self.eras;
                                    var $5979 = self.self;
                                    var $5980 = self.name;
                                    var $5981 = self.xtyp;
                                    var $5982 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $5976(Kind$Term$var$($5973, _lv$4))(Kind$Term$var$($5974, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $5982(Kind$Term$var$($5979, _lv$4))(Kind$Term$var$($5980, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($5973 === $5979);
                                    var _eq_eras$27 = Bool$eql$($5972, $5978);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$($5975, $5981, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5985 = self.value;
                                                var $5986 = self.errors;
                                                var self = $5985;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $5988 = self.value;
                                                        var self = Kind$Term$equal$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $5990 = self.value;
                                                                var $5991 = self.errors;
                                                                var self = $5990;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $5993 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($5988 && $5993)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $5995 = self.value;
                                                                                var $5996 = self.errors;
                                                                                var $5997 = Kind$Check$result$($5995, List$concat$($5991, $5996));
                                                                                var $5994 = $5997;
                                                                                break;
                                                                        };
                                                                        var $5992 = $5994;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $5998 = Kind$Check$result$(Maybe$none, $5991);
                                                                        var $5992 = $5998;
                                                                        break;
                                                                };
                                                                var self = $5992;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $5999 = self.value;
                                                                var $6000 = self.errors;
                                                                var $6001 = Kind$Check$result$($5999, List$concat$($5986, $6000));
                                                                var $5989 = $6001;
                                                                break;
                                                        };
                                                        var $5987 = $5989;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6002 = Kind$Check$result$(Maybe$none, $5986);
                                                        var $5987 = $6002;
                                                        break;
                                                };
                                                var $5984 = $5987;
                                                break;
                                        };
                                        var $5983 = $5984;
                                    } else {
                                        var $6003 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $5983 = $6003;
                                    };
                                    var $5977 = $5983;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6004 = self.path;
                                    var $6005 = Kind$Term$equal$hole$($6004, _a$1);
                                    var $5977 = $6005;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6006 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $5977 = $6006;
                                    break;
                            };
                            var $5971 = $5977;
                            break;
                        case 'Kind.Term.lam':
                            var $6007 = self.name;
                            var $6008 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $6010 = self.name;
                                    var $6011 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $6008(Kind$Term$var$($6007, _lv$4));
                                    var _b1_body$19 = $6011(Kind$Term$var$($6010, _lv$4));
                                    var self = Kind$Term$equal$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6013 = self.value;
                                            var $6014 = self.errors;
                                            var self = $6013;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6016 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($6016), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6018 = self.value;
                                                            var $6019 = self.errors;
                                                            var $6020 = Kind$Check$result$($6018, List$concat$($6014, $6019));
                                                            var $6017 = $6020;
                                                            break;
                                                    };
                                                    var $6015 = $6017;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6021 = Kind$Check$result$(Maybe$none, $6014);
                                                    var $6015 = $6021;
                                                    break;
                                            };
                                            var $6012 = $6015;
                                            break;
                                    };
                                    var $6009 = $6012;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6022 = self.path;
                                    var $6023 = Kind$Term$equal$hole$($6022, _a$1);
                                    var $6009 = $6023;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6024 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6009 = $6024;
                                    break;
                            };
                            var $5971 = $6009;
                            break;
                        case 'Kind.Term.app':
                            var $6025 = self.func;
                            var $6026 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $6028 = self.func;
                                    var $6029 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$($6025, $6028, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6031 = self.value;
                                            var $6032 = self.errors;
                                            var self = $6031;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6034 = self.value;
                                                    var self = Kind$Term$equal$($6026, $6029, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6036 = self.value;
                                                            var $6037 = self.errors;
                                                            var self = $6036;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6039 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6034 && $6039)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6041 = self.value;
                                                                            var $6042 = self.errors;
                                                                            var $6043 = Kind$Check$result$($6041, List$concat$($6037, $6042));
                                                                            var $6040 = $6043;
                                                                            break;
                                                                    };
                                                                    var $6038 = $6040;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6044 = Kind$Check$result$(Maybe$none, $6037);
                                                                    var $6038 = $6044;
                                                                    break;
                                                            };
                                                            var self = $6038;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6045 = self.value;
                                                            var $6046 = self.errors;
                                                            var $6047 = Kind$Check$result$($6045, List$concat$($6032, $6046));
                                                            var $6035 = $6047;
                                                            break;
                                                    };
                                                    var $6033 = $6035;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6048 = Kind$Check$result$(Maybe$none, $6032);
                                                    var $6033 = $6048;
                                                    break;
                                            };
                                            var $6030 = $6033;
                                            break;
                                    };
                                    var $6027 = $6030;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6049 = self.path;
                                    var $6050 = Kind$Term$equal$hole$($6049, _a$1);
                                    var $6027 = $6050;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6051 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6027 = $6051;
                                    break;
                            };
                            var $5971 = $6027;
                            break;
                        case 'Kind.Term.let':
                            var $6052 = self.name;
                            var $6053 = self.expr;
                            var $6054 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $6056 = self.name;
                                    var $6057 = self.expr;
                                    var $6058 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $6054(Kind$Term$var$($6052, _lv$4));
                                    var _b1_body$21 = $6058(Kind$Term$var$($6056, _lv$4));
                                    var self = Kind$Term$equal$($6053, $6057, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6060 = self.value;
                                            var $6061 = self.errors;
                                            var self = $6060;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6063 = self.value;
                                                    var self = Kind$Term$equal$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6065 = self.value;
                                                            var $6066 = self.errors;
                                                            var self = $6065;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6068 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6063 && $6068)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6070 = self.value;
                                                                            var $6071 = self.errors;
                                                                            var $6072 = Kind$Check$result$($6070, List$concat$($6066, $6071));
                                                                            var $6069 = $6072;
                                                                            break;
                                                                    };
                                                                    var $6067 = $6069;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6073 = Kind$Check$result$(Maybe$none, $6066);
                                                                    var $6067 = $6073;
                                                                    break;
                                                            };
                                                            var self = $6067;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6074 = self.value;
                                                            var $6075 = self.errors;
                                                            var $6076 = Kind$Check$result$($6074, List$concat$($6061, $6075));
                                                            var $6064 = $6076;
                                                            break;
                                                    };
                                                    var $6062 = $6064;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6077 = Kind$Check$result$(Maybe$none, $6061);
                                                    var $6062 = $6077;
                                                    break;
                                            };
                                            var $6059 = $6062;
                                            break;
                                    };
                                    var $6055 = $6059;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6078 = self.path;
                                    var $6079 = Kind$Term$equal$hole$($6078, _a$1);
                                    var $6055 = $6079;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6080 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6055 = $6080;
                                    break;
                            };
                            var $5971 = $6055;
                            break;
                        case 'Kind.Term.hol':
                            var $6081 = self.path;
                            var $6082 = Kind$Term$equal$hole$($6081, _b$2);
                            var $5971 = $6082;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6084 = self.path;
                                    var $6085 = Kind$Term$equal$hole$($6084, _a$1);
                                    var $6083 = $6085;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6086 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6083 = $6086;
                                    break;
                            };
                            var $5971 = $6083;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6088 = self.path;
                                    var $6089 = Kind$Term$equal$hole$($6088, _a$1);
                                    var $6087 = $6089;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6090 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6087 = $6090;
                                    break;
                            };
                            var $5971 = $6087;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6092 = self.path;
                                    var $6093 = Kind$Term$equal$hole$($6092, _a$1);
                                    var $6091 = $6093;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6094 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6091 = $6094;
                                    break;
                            };
                            var $5971 = $6091;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6096 = self.path;
                                    var $6097 = Kind$Term$equal$hole$($6096, _a$1);
                                    var $6095 = $6097;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6098 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6095 = $6098;
                                    break;
                            };
                            var $5971 = $6095;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6100 = self.path;
                                    var $6101 = Kind$Term$equal$hole$($6100, _a$1);
                                    var $6099 = $6101;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6102 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6099 = $6102;
                                    break;
                            };
                            var $5971 = $6099;
                            break;
                    };
                    var $5961 = $5971;
                };
                var $5959 = $5961;
            };
            var $5957 = $5959;
        };
        return $5957;
    };
    const Kind$Term$equal = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $6103 = BitsSet$new;
        return $6103;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6105 = self.name;
                var $6106 = self.indx;
                var self = List$at_last$($6106, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $6108 = self.value;
                        var $6109 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $6108;
                            switch (self._) {
                                case 'Pair.new':
                                    var $6110 = self.snd;
                                    var $6111 = $6110;
                                    return $6111;
                            };
                        })()), List$nil);
                        var $6107 = $6109;
                        break;
                    case 'Maybe.none':
                        var $6112 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $6105), List$nil));
                        var $6107 = $6112;
                        break;
                };
                var self = $6107;
                break;
            case 'Kind.Term.ref':
                var $6113 = self.name;
                var self = Kind$Map$get$($6113, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $6115 = self.value;
                        var self = $6115;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $6117 = self.name;
                                var $6118 = self.term;
                                var $6119 = self.type;
                                var $6120 = self.stat;
                                var _ref_name$18 = $6117;
                                var _ref_type$19 = $6119;
                                var _ref_term$20 = $6118;
                                var _ref_stat$21 = $6120;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $6122 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $6121 = $6122;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $6123 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $6121 = $6123;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $6124 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $6121 = $6124;
                                        break;
                                };
                                var $6116 = $6121;
                                break;
                        };
                        var $6114 = $6116;
                        break;
                    case 'Maybe.none':
                        var $6125 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $6113), List$nil));
                        var $6114 = $6125;
                        break;
                };
                var self = $6114;
                break;
            case 'Kind.Term.all':
                var $6126 = self.self;
                var $6127 = self.name;
                var $6128 = self.xtyp;
                var $6129 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($6126, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($6127, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($6127, $6128), List$cons$(Pair$new$($6126, _term$1), _ctx$4));
                var self = Kind$Term$check$($6128, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6131 = self.value;
                        var $6132 = self.errors;
                        var self = $6131;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6134 = Kind$Check$result$(Maybe$none, $6132);
                                var $6133 = $6134;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($6129(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6136 = self.value;
                                        var $6137 = self.errors;
                                        var self = $6136;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6139 = Kind$Check$result$(Maybe$none, $6137);
                                                var $6138 = $6139;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6141 = self.value;
                                                        var $6142 = self.errors;
                                                        var $6143 = Kind$Check$result$($6141, List$concat$($6137, $6142));
                                                        var $6140 = $6143;
                                                        break;
                                                };
                                                var $6138 = $6140;
                                                break;
                                        };
                                        var self = $6138;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6144 = self.value;
                                        var $6145 = self.errors;
                                        var $6146 = Kind$Check$result$($6144, List$concat$($6132, $6145));
                                        var $6135 = $6146;
                                        break;
                                };
                                var $6133 = $6135;
                                break;
                        };
                        var $6130 = $6133;
                        break;
                };
                var self = $6130;
                break;
            case 'Kind.Term.lam':
                var $6147 = self.name;
                var $6148 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6150 = self.value;
                        var _typv$10 = Kind$Term$reduce$($6150, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $6152 = self.xtyp;
                                var $6153 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($6147, _ctx_size$16);
                                var _body_typ$19 = $6153(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($6147, $6152), _ctx$4);
                                var self = Kind$Term$check$($6148(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6155 = self.value;
                                        var $6156 = self.errors;
                                        var self = $6155;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6158 = Kind$Check$result$(Maybe$none, $6156);
                                                var $6157 = $6158;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($6150), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6160 = self.value;
                                                        var $6161 = self.errors;
                                                        var $6162 = Kind$Check$result$($6160, List$concat$($6156, $6161));
                                                        var $6159 = $6162;
                                                        break;
                                                };
                                                var $6157 = $6159;
                                                break;
                                        };
                                        var $6154 = $6157;
                                        break;
                                };
                                var $6151 = $6154;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($6150);
                                var $6163 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $6151 = $6163;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($6150);
                                var $6164 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $6151 = $6164;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("(function type)");
                                var _detected$12 = Either$right$($6150);
                                var $6165 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $6151 = $6165;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($6150);
                                var $6166 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $6151 = $6166;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("(function type)");
                                var _detected$18 = Either$right$($6150);
                                var $6167 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $6151 = $6167;
                                break;
                        };
                        var $6149 = $6151;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $6168 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $6149 = $6168;
                        break;
                };
                var self = $6149;
                break;
            case 'Kind.Term.app':
                var $6169 = self.func;
                var $6170 = self.argm;
                var self = Kind$Term$check$($6169, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6172 = self.value;
                        var $6173 = self.errors;
                        var self = $6172;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6175 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($6175, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $6177 = self.xtyp;
                                        var $6178 = self.body;
                                        var self = Kind$Term$check$($6170, Maybe$some$($6177), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6180 = self.value;
                                                var $6181 = self.errors;
                                                var self = $6180;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $6183 = Kind$Check$result$(Maybe$none, $6181);
                                                        var $6182 = $6183;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($6178($6169)($6170)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6185 = self.value;
                                                                var $6186 = self.errors;
                                                                var $6187 = Kind$Check$result$($6185, List$concat$($6181, $6186));
                                                                var $6184 = $6187;
                                                                break;
                                                        };
                                                        var $6182 = $6184;
                                                        break;
                                                };
                                                var $6179 = $6182;
                                                break;
                                        };
                                        var self = $6179;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $6188 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $6188;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $6189 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $6189;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("(function type)");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var $6190 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $6190;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $6191 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $6191;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("(function type)");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var $6192 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $6192;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6193 = self.value;
                                        var $6194 = self.errors;
                                        var $6195 = Kind$Check$result$($6193, List$concat$($6173, $6194));
                                        var $6176 = $6195;
                                        break;
                                };
                                var $6174 = $6176;
                                break;
                            case 'Maybe.none':
                                var $6196 = Kind$Check$result$(Maybe$none, $6173);
                                var $6174 = $6196;
                                break;
                        };
                        var $6171 = $6174;
                        break;
                };
                var self = $6171;
                break;
            case 'Kind.Term.let':
                var $6197 = self.name;
                var $6198 = self.expr;
                var $6199 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($6198, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6201 = self.value;
                        var $6202 = self.errors;
                        var self = $6201;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6204 = self.value;
                                var _body_val$14 = $6199(Kind$Term$var$($6197, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($6197, $6204), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6206 = self.value;
                                        var $6207 = self.errors;
                                        var self = $6206;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6209 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($6209), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6211 = self.value;
                                                        var $6212 = self.errors;
                                                        var $6213 = Kind$Check$result$($6211, List$concat$($6207, $6212));
                                                        var $6210 = $6213;
                                                        break;
                                                };
                                                var $6208 = $6210;
                                                break;
                                            case 'Maybe.none':
                                                var $6214 = Kind$Check$result$(Maybe$none, $6207);
                                                var $6208 = $6214;
                                                break;
                                        };
                                        var self = $6208;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6215 = self.value;
                                        var $6216 = self.errors;
                                        var $6217 = Kind$Check$result$($6215, List$concat$($6202, $6216));
                                        var $6205 = $6217;
                                        break;
                                };
                                var $6203 = $6205;
                                break;
                            case 'Maybe.none':
                                var $6218 = Kind$Check$result$(Maybe$none, $6202);
                                var $6203 = $6218;
                                break;
                        };
                        var $6200 = $6203;
                        break;
                };
                var self = $6200;
                break;
            case 'Kind.Term.def':
                var $6219 = self.name;
                var $6220 = self.expr;
                var $6221 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($6220, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6223 = self.value;
                        var $6224 = self.errors;
                        var self = $6223;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6226 = self.value;
                                var _body_val$14 = $6221(Kind$Term$ann$(Bool$true, $6220, $6226));
                                var _body_ctx$15 = List$cons$(Pair$new$($6219, $6226), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6228 = self.value;
                                        var $6229 = self.errors;
                                        var self = $6228;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6231 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($6231), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6233 = self.value;
                                                        var $6234 = self.errors;
                                                        var $6235 = Kind$Check$result$($6233, List$concat$($6229, $6234));
                                                        var $6232 = $6235;
                                                        break;
                                                };
                                                var $6230 = $6232;
                                                break;
                                            case 'Maybe.none':
                                                var $6236 = Kind$Check$result$(Maybe$none, $6229);
                                                var $6230 = $6236;
                                                break;
                                        };
                                        var self = $6230;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6237 = self.value;
                                        var $6238 = self.errors;
                                        var $6239 = Kind$Check$result$($6237, List$concat$($6224, $6238));
                                        var $6227 = $6239;
                                        break;
                                };
                                var $6225 = $6227;
                                break;
                            case 'Maybe.none':
                                var $6240 = Kind$Check$result$(Maybe$none, $6224);
                                var $6225 = $6240;
                                break;
                        };
                        var $6222 = $6225;
                        break;
                };
                var self = $6222;
                break;
            case 'Kind.Term.ann':
                var $6241 = self.done;
                var $6242 = self.term;
                var $6243 = self.type;
                var self = $6241;
                if (self) {
                    var $6245 = Kind$Check$result$(Maybe$some$($6243), List$nil);
                    var $6244 = $6245;
                } else {
                    var self = Kind$Term$check$($6242, Maybe$some$($6243), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6247 = self.value;
                            var $6248 = self.errors;
                            var self = $6247;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6250 = Kind$Check$result$(Maybe$none, $6248);
                                    var $6249 = $6250;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($6243, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6252 = self.value;
                                            var $6253 = self.errors;
                                            var self = $6252;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $6255 = Kind$Check$result$(Maybe$none, $6253);
                                                    var $6254 = $6255;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($6243), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6257 = self.value;
                                                            var $6258 = self.errors;
                                                            var $6259 = Kind$Check$result$($6257, List$concat$($6253, $6258));
                                                            var $6256 = $6259;
                                                            break;
                                                    };
                                                    var $6254 = $6256;
                                                    break;
                                            };
                                            var self = $6254;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6260 = self.value;
                                            var $6261 = self.errors;
                                            var $6262 = Kind$Check$result$($6260, List$concat$($6248, $6261));
                                            var $6251 = $6262;
                                            break;
                                    };
                                    var $6249 = $6251;
                                    break;
                            };
                            var $6246 = $6249;
                            break;
                    };
                    var $6244 = $6246;
                };
                var self = $6244;
                break;
            case 'Kind.Term.gol':
                var $6263 = self.name;
                var $6264 = self.dref;
                var $6265 = self.verb;
                var $6266 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($6263, $6264, $6265, _type$2, _ctx$4), List$nil));
                var self = $6266;
                break;
            case 'Kind.Term.cse':
                var $6267 = self.expr;
                var $6268 = self.name;
                var $6269 = self.with;
                var $6270 = self.cses;
                var $6271 = self.moti;
                var _expr$13 = $6267;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6273 = self.value;
                        var $6274 = self.errors;
                        var self = $6273;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6276 = self.value;
                                var self = Kind$Term$check$infer_with_types$($6269, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6278 = self.value;
                                        var $6279 = self.errors;
                                        var self = $6278;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6281 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($6267, $6268, $6281, $6270, $6271, $6276, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6283 = self.value;
                                                        var $6284 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $6283), List$nil));
                                                        var self = $6284;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6285 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $6285;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6286 = self.value;
                                                        var $6287 = self.errors;
                                                        var $6288 = Kind$Check$result$($6286, List$concat$($6279, $6287));
                                                        var $6282 = $6288;
                                                        break;
                                                };
                                                var $6280 = $6282;
                                                break;
                                            case 'Maybe.none':
                                                var $6289 = Kind$Check$result$(Maybe$none, $6279);
                                                var $6280 = $6289;
                                                break;
                                        };
                                        var self = $6280;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6290 = self.value;
                                        var $6291 = self.errors;
                                        var $6292 = Kind$Check$result$($6290, List$concat$($6274, $6291));
                                        var $6277 = $6292;
                                        break;
                                };
                                var $6275 = $6277;
                                break;
                            case 'Maybe.none':
                                var $6293 = Kind$Check$result$(Maybe$none, $6274);
                                var $6275 = $6293;
                                break;
                        };
                        var $6272 = $6275;
                        break;
                };
                var self = $6272;
                break;
            case 'Kind.Term.ori':
                var $6294 = self.orig;
                var $6295 = self.expr;
                var $6296 = Kind$Term$check$($6295, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($6294));
                var self = $6296;
                break;
            case 'Kind.Term.typ':
                var $6297 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $6297;
                break;
            case 'Kind.Term.hol':
                var $6298 = Kind$Check$result$(_type$2, List$nil);
                var self = $6298;
                break;
            case 'Kind.Term.nat':
                var $6299 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $6299;
                break;
            case 'Kind.Term.chr':
                var $6300 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $6300;
                break;
            case 'Kind.Term.str':
                var $6301 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $6301;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $6302 = self.value;
                var $6303 = self.errors;
                var self = $6302;
                switch (self._) {
                    case 'Maybe.some':
                        var $6305 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6307 = self.value;
                                var self = Kind$Term$equal$($6307, $6305, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6309 = self.value;
                                        var $6310 = self.errors;
                                        var self = $6309;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6312 = self.value;
                                                var self = $6312;
                                                if (self) {
                                                    var $6314 = Kind$Check$result$(Maybe$some$($6307), List$nil);
                                                    var self = $6314;
                                                } else {
                                                    var $6315 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($6307), Either$right$($6305), _ctx$4), List$nil));
                                                    var self = $6315;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6316 = self.value;
                                                        var $6317 = self.errors;
                                                        var $6318 = Kind$Check$result$($6316, List$concat$($6310, $6317));
                                                        var $6313 = $6318;
                                                        break;
                                                };
                                                var $6311 = $6313;
                                                break;
                                            case 'Maybe.none':
                                                var $6319 = Kind$Check$result$(Maybe$none, $6310);
                                                var $6311 = $6319;
                                                break;
                                        };
                                        var $6308 = $6311;
                                        break;
                                };
                                var self = $6308;
                                break;
                            case 'Maybe.none':
                                var $6320 = Kind$Check$result$(Maybe$some$($6305), List$nil);
                                var self = $6320;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6321 = self.value;
                                var $6322 = self.errors;
                                var $6323 = Kind$Check$result$($6321, List$concat$($6303, $6322));
                                var $6306 = $6323;
                                break;
                        };
                        var $6304 = $6306;
                        break;
                    case 'Maybe.none':
                        var $6324 = Kind$Check$result$(Maybe$none, $6303);
                        var $6304 = $6324;
                        break;
                };
                var $6104 = $6304;
                break;
        };
        return $6104;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $6325 = _x$1;
        return $6325;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $6327 = Bool$true;
                var $6326 = $6327;
                break;
            case 'List.cons':
                var $6328 = Bool$false;
                var $6326 = $6328;
                break;
        };
        return $6326;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $6330 = self.eras;
                var $6331 = self.self;
                var $6332 = self.name;
                var $6333 = self.xtyp;
                var $6334 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6336 = self.slice(0, -1);
                        var $6337 = Kind$Term$all$($6330, $6331, $6332, Kind$Term$patch_at$($6336, $6333, _fn$3), $6334);
                        var $6335 = $6337;
                        break;
                    case 'i':
                        var $6338 = self.slice(0, -1);
                        var $6339 = Kind$Term$all$($6330, $6331, $6332, $6333, (_s$10 => _x$11 => {
                            var $6340 = Kind$Term$patch_at$($6338, $6334(_s$10)(_x$11), _fn$3);
                            return $6340;
                        }));
                        var $6335 = $6339;
                        break;
                    case 'e':
                        var $6341 = _fn$3(_term$2);
                        var $6335 = $6341;
                        break;
                };
                var $6329 = $6335;
                break;
            case 'Kind.Term.lam':
                var $6342 = self.name;
                var $6343 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6345 = _fn$3(_term$2);
                        var $6344 = $6345;
                        break;
                    case 'o':
                    case 'i':
                        var $6346 = Kind$Term$lam$($6342, (_x$7 => {
                            var $6347 = Kind$Term$patch_at$(Bits$tail$(_path$1), $6343(_x$7), _fn$3);
                            return $6347;
                        }));
                        var $6344 = $6346;
                        break;
                };
                var $6329 = $6344;
                break;
            case 'Kind.Term.app':
                var $6348 = self.func;
                var $6349 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6351 = self.slice(0, -1);
                        var $6352 = Kind$Term$app$(Kind$Term$patch_at$($6351, $6348, _fn$3), $6349);
                        var $6350 = $6352;
                        break;
                    case 'i':
                        var $6353 = self.slice(0, -1);
                        var $6354 = Kind$Term$app$($6348, Kind$Term$patch_at$($6353, $6349, _fn$3));
                        var $6350 = $6354;
                        break;
                    case 'e':
                        var $6355 = _fn$3(_term$2);
                        var $6350 = $6355;
                        break;
                };
                var $6329 = $6350;
                break;
            case 'Kind.Term.let':
                var $6356 = self.name;
                var $6357 = self.expr;
                var $6358 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6360 = self.slice(0, -1);
                        var $6361 = Kind$Term$let$($6356, Kind$Term$patch_at$($6360, $6357, _fn$3), $6358);
                        var $6359 = $6361;
                        break;
                    case 'i':
                        var $6362 = self.slice(0, -1);
                        var $6363 = Kind$Term$let$($6356, $6357, (_x$8 => {
                            var $6364 = Kind$Term$patch_at$($6362, $6358(_x$8), _fn$3);
                            return $6364;
                        }));
                        var $6359 = $6363;
                        break;
                    case 'e':
                        var $6365 = _fn$3(_term$2);
                        var $6359 = $6365;
                        break;
                };
                var $6329 = $6359;
                break;
            case 'Kind.Term.def':
                var $6366 = self.name;
                var $6367 = self.expr;
                var $6368 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6370 = self.slice(0, -1);
                        var $6371 = Kind$Term$def$($6366, Kind$Term$patch_at$($6370, $6367, _fn$3), $6368);
                        var $6369 = $6371;
                        break;
                    case 'i':
                        var $6372 = self.slice(0, -1);
                        var $6373 = Kind$Term$def$($6366, $6367, (_x$8 => {
                            var $6374 = Kind$Term$patch_at$($6372, $6368(_x$8), _fn$3);
                            return $6374;
                        }));
                        var $6369 = $6373;
                        break;
                    case 'e':
                        var $6375 = _fn$3(_term$2);
                        var $6369 = $6375;
                        break;
                };
                var $6329 = $6369;
                break;
            case 'Kind.Term.ann':
                var $6376 = self.done;
                var $6377 = self.term;
                var $6378 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6380 = self.slice(0, -1);
                        var $6381 = Kind$Term$ann$($6376, Kind$Term$patch_at$($6380, $6377, _fn$3), $6378);
                        var $6379 = $6381;
                        break;
                    case 'i':
                        var $6382 = self.slice(0, -1);
                        var $6383 = Kind$Term$ann$($6376, $6377, Kind$Term$patch_at$($6382, $6378, _fn$3));
                        var $6379 = $6383;
                        break;
                    case 'e':
                        var $6384 = _fn$3(_term$2);
                        var $6379 = $6384;
                        break;
                };
                var $6329 = $6379;
                break;
            case 'Kind.Term.ori':
                var $6385 = self.orig;
                var $6386 = self.expr;
                var $6387 = Kind$Term$ori$($6385, Kind$Term$patch_at$(_path$1, $6386, _fn$3));
                var $6329 = $6387;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6389 = _fn$3(_term$2);
                        var $6388 = $6389;
                        break;
                    case 'o':
                    case 'i':
                        var $6390 = _term$2;
                        var $6388 = $6390;
                        break;
                };
                var $6329 = $6388;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6392 = _fn$3(_term$2);
                        var $6391 = $6392;
                        break;
                    case 'o':
                    case 'i':
                        var $6393 = _term$2;
                        var $6391 = $6393;
                        break;
                };
                var $6329 = $6391;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6395 = _fn$3(_term$2);
                        var $6394 = $6395;
                        break;
                    case 'o':
                    case 'i':
                        var $6396 = _term$2;
                        var $6394 = $6396;
                        break;
                };
                var $6329 = $6394;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6398 = _fn$3(_term$2);
                        var $6397 = $6398;
                        break;
                    case 'o':
                    case 'i':
                        var $6399 = _term$2;
                        var $6397 = $6399;
                        break;
                };
                var $6329 = $6397;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6401 = _fn$3(_term$2);
                        var $6400 = $6401;
                        break;
                    case 'o':
                    case 'i':
                        var $6402 = _term$2;
                        var $6400 = $6402;
                        break;
                };
                var $6329 = $6400;
                break;
        };
        return $6329;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $6404 = self.head;
                var $6405 = self.tail;
                var self = $6404;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $6407 = self.name;
                        var $6408 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $6409 = _m$bind$15;
                            return $6409;
                        }))(Kind$Synth$one$($6407, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6411 = self.value;
                                    var $6412 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $6411, $6405, Bool$true);
                                    var $6410 = $6412;
                                    break;
                                case 'Maybe.none':
                                    var $6413 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6405, _fixd$11);
                                    var $6410 = $6413;
                                    break;
                            };
                            return $6410;
                        }));
                        var $6406 = $6408;
                        break;
                    case 'Kind.Error.patch':
                        var $6414 = self.path;
                        var $6415 = self.term;
                        var self = $6414;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $6417 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($6417, _term$5, (_x$17 => {
                                    var $6419 = $6415;
                                    return $6419;
                                }));
                                var $6418 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $6405, Bool$true);
                                var $6416 = $6418;
                                break;
                            case 'i':
                                var $6420 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($6420, _type$6, (_x$17 => {
                                    var $6422 = $6415;
                                    return $6422;
                                }));
                                var $6421 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $6405, Bool$true);
                                var $6416 = $6421;
                                break;
                            case 'e':
                                var $6423 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $6424 = _m$pure$17;
                                    return $6424;
                                }))(Maybe$none);
                                var $6416 = $6423;
                                break;
                        };
                        var $6406 = $6416;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $6425 = self.name;
                        var $6426 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $6427 = _m$bind$16;
                            return $6427;
                        }))(Kind$Synth$one$($6425, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6429 = self.value;
                                    var $6430 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $6429, $6405, Bool$true);
                                    var $6428 = $6430;
                                    break;
                                case 'Maybe.none':
                                    var $6431 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6405, _fixd$11);
                                    var $6428 = $6431;
                                    break;
                            };
                            return $6428;
                        }));
                        var $6406 = $6426;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $6432 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6405, _fixd$11);
                        var $6406 = $6432;
                        break;
                };
                var $6403 = $6406;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $6435 = (_x$12 + '1');
                        return $6435;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $6436 = (_x$13 + '0');
                        return $6436;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $6434 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $6437 = _m$pure$16;
                        return $6437;
                    }))(Maybe$some$(_defs$14));
                    var $6433 = $6434;
                } else {
                    var $6438 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $6439 = _m$pure$13;
                        return $6439;
                    }))(Maybe$none);
                    var $6433 = $6438;
                };
                var $6403 = $6433;
                break;
        };
        return $6403;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $6440 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $6440;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $6442 = self.value;
                var self = $6442;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $6444 = self.file;
                        var $6445 = self.code;
                        var $6446 = self.orig;
                        var $6447 = self.name;
                        var $6448 = self.term;
                        var $6449 = self.type;
                        var $6450 = self.isct;
                        var $6451 = self.arit;
                        var $6452 = self.stat;
                        var _file$13 = $6444;
                        var _code$14 = $6445;
                        var _orig$15 = $6446;
                        var _name$16 = $6447;
                        var _term$17 = $6448;
                        var _type$18 = $6449;
                        var _isct$19 = $6450;
                        var _arit$20 = $6451;
                        var _stat$21 = $6452;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6455 = self.value;
                                        var $6456 = self.errors;
                                        var self = $6455;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6458 = Kind$Check$result$(Maybe$none, $6456);
                                                var $6457 = $6458;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6460 = self.value;
                                                        var $6461 = self.errors;
                                                        var self = $6460;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $6463 = Kind$Check$result$(Maybe$none, $6461);
                                                                var $6462 = $6463;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $6465 = self.value;
                                                                        var $6466 = self.errors;
                                                                        var $6467 = Kind$Check$result$($6465, List$concat$($6461, $6466));
                                                                        var $6464 = $6467;
                                                                        break;
                                                                };
                                                                var $6462 = $6464;
                                                                break;
                                                        };
                                                        var self = $6462;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6468 = self.value;
                                                        var $6469 = self.errors;
                                                        var $6470 = Kind$Check$result$($6468, List$concat$($6456, $6469));
                                                        var $6459 = $6470;
                                                        break;
                                                };
                                                var $6457 = $6459;
                                                break;
                                        };
                                        var _checked$23 = $6457;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6471 = self.errors;
                                        var self = List$is_empty$($6471);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $6473 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $6474 = _m$pure$28;
                                                return $6474;
                                            }))(Maybe$some$(_defs$26));
                                            var $6472 = $6473;
                                        } else {
                                            var $6475 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $6476 = _m$bind$26;
                                                return $6476;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $6471, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6478 = self.value;
                                                        var $6479 = Kind$Synth$one$(_name$16, $6478);
                                                        var $6477 = $6479;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($6471);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $6480 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $6481 = _m$pure$30;
                                                            return $6481;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $6477 = $6480;
                                                        break;
                                                };
                                                return $6477;
                                            }));
                                            var $6472 = $6475;
                                        };
                                        var $6454 = $6472;
                                        break;
                                };
                                var $6453 = $6454;
                                break;
                            case 'Kind.Status.wait':
                            case 'Kind.Status.done':
                                var $6482 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $6483 = _m$pure$23;
                                    return $6483;
                                }))(Maybe$some$(_defs$2));
                                var $6453 = $6482;
                                break;
                            case 'Kind.Status.fail':
                                var $6484 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $6485 = _m$pure$24;
                                    return $6485;
                                }))(Maybe$some$(_defs$2));
                                var $6453 = $6484;
                                break;
                        };
                        var $6443 = $6453;
                        break;
                };
                var $6441 = $6443;
                break;
            case 'Maybe.none':
                var $6486 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $6487 = _m$bind$3;
                    return $6487;
                }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.some':
                            var $6489 = self.value;
                            var $6490 = Kind$Synth$one$(_name$1, $6489);
                            var $6488 = $6490;
                            break;
                        case 'Maybe.none':
                            var $6491 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $6492 = _m$pure$5;
                                return $6492;
                            }))(Maybe$none);
                            var $6488 = $6491;
                            break;
                    };
                    return $6488;
                }));
                var $6441 = $6486;
                break;
        };
        return $6441;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6494 = self.head;
                var $6495 = self.tail;
                var self = $6494;
                switch (self._) {
                    case 'Pair.new':
                        var $6497 = self.fst;
                        var $6498 = self.snd;
                        var $6499 = BitsMap$set$($6497, $6498, BitsMap$from_list$($6495));
                        var $6496 = $6499;
                        break;
                };
                var $6493 = $6496;
                break;
            case 'List.nil':
                var $6500 = BitsMap$new;
                var $6493 = $6500;
                break;
        };
        return $6493;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $6502 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $6502;
        }));
        var $6501 = BitsMap$from_list$(_kvs$2);
        return $6501;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $6504 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($6504)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($6504, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $6507 = self.value;
                            var self = $6507;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $6509 = self.term;
                                    var $6510 = Kind$Term$inline$reduce$($6509, _defs$2);
                                    var $6508 = $6510;
                                    break;
                            };
                            var $6506 = $6508;
                            break;
                        case 'Maybe.none':
                            var $6511 = Kind$Term$ref$($6504);
                            var $6506 = $6511;
                            break;
                    };
                    var $6505 = $6506;
                } else {
                    var $6512 = _term$1;
                    var $6505 = $6512;
                };
                var $6503 = $6505;
                break;
            case 'Kind.Term.app':
                var $6513 = self.func;
                var $6514 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($6513, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $6516 = self.body;
                        var $6517 = Kind$Term$inline$reduce$($6516($6514), _defs$2);
                        var $6515 = $6517;
                        break;
                    case 'Kind.Term.let':
                        var $6518 = self.name;
                        var $6519 = self.expr;
                        var $6520 = self.body;
                        var $6521 = Kind$Term$let$($6518, $6519, (_x$9 => {
                            var $6522 = Kind$Term$inline$reduce$(Kind$Term$app$($6520(_x$9), $6514), _defs$2);
                            return $6522;
                        }));
                        var $6515 = $6521;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6523 = _term$1;
                        var $6515 = $6523;
                        break;
                };
                var $6503 = $6515;
                break;
            case 'Kind.Term.ori':
                var $6524 = self.expr;
                var $6525 = Kind$Term$inline$reduce$($6524, _defs$2);
                var $6503 = $6525;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $6526 = _term$1;
                var $6503 = $6526;
                break;
        };
        return $6503;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $6528 = self.name;
                var $6529 = self.indx;
                var $6530 = Kind$Term$var$($6528, $6529);
                var $6527 = $6530;
                break;
            case 'Kind.Term.ref':
                var $6531 = self.name;
                var $6532 = Kind$Term$ref$($6531);
                var $6527 = $6532;
                break;
            case 'Kind.Term.all':
                var $6533 = self.eras;
                var $6534 = self.self;
                var $6535 = self.name;
                var $6536 = self.xtyp;
                var $6537 = self.body;
                var $6538 = Kind$Term$all$($6533, $6534, $6535, Kind$Term$inline$($6536, _defs$2), (_s$8 => _x$9 => {
                    var $6539 = Kind$Term$inline$($6537(_s$8)(_x$9), _defs$2);
                    return $6539;
                }));
                var $6527 = $6538;
                break;
            case 'Kind.Term.lam':
                var $6540 = self.name;
                var $6541 = self.body;
                var $6542 = Kind$Term$lam$($6540, (_x$5 => {
                    var $6543 = Kind$Term$inline$($6541(_x$5), _defs$2);
                    return $6543;
                }));
                var $6527 = $6542;
                break;
            case 'Kind.Term.app':
                var $6544 = self.func;
                var $6545 = self.argm;
                var $6546 = Kind$Term$app$(Kind$Term$inline$($6544, _defs$2), Kind$Term$inline$($6545, _defs$2));
                var $6527 = $6546;
                break;
            case 'Kind.Term.let':
                var $6547 = self.name;
                var $6548 = self.expr;
                var $6549 = self.body;
                var $6550 = Kind$Term$let$($6547, Kind$Term$inline$($6548, _defs$2), (_x$6 => {
                    var $6551 = Kind$Term$inline$($6549(_x$6), _defs$2);
                    return $6551;
                }));
                var $6527 = $6550;
                break;
            case 'Kind.Term.def':
                var $6552 = self.name;
                var $6553 = self.expr;
                var $6554 = self.body;
                var $6555 = Kind$Term$def$($6552, Kind$Term$inline$($6553, _defs$2), (_x$6 => {
                    var $6556 = Kind$Term$inline$($6554(_x$6), _defs$2);
                    return $6556;
                }));
                var $6527 = $6555;
                break;
            case 'Kind.Term.ann':
                var $6557 = self.done;
                var $6558 = self.term;
                var $6559 = self.type;
                var $6560 = Kind$Term$ann$($6557, Kind$Term$inline$($6558, _defs$2), Kind$Term$inline$($6559, _defs$2));
                var $6527 = $6560;
                break;
            case 'Kind.Term.gol':
                var $6561 = self.name;
                var $6562 = self.dref;
                var $6563 = self.verb;
                var $6564 = Kind$Term$gol$($6561, $6562, $6563);
                var $6527 = $6564;
                break;
            case 'Kind.Term.hol':
                var $6565 = self.path;
                var $6566 = Kind$Term$hol$($6565);
                var $6527 = $6566;
                break;
            case 'Kind.Term.nat':
                var $6567 = self.natx;
                var $6568 = Kind$Term$nat$($6567);
                var $6527 = $6568;
                break;
            case 'Kind.Term.chr':
                var $6569 = self.chrx;
                var $6570 = Kind$Term$chr$($6569);
                var $6527 = $6570;
                break;
            case 'Kind.Term.str':
                var $6571 = self.strx;
                var $6572 = Kind$Term$str$($6571);
                var $6527 = $6572;
                break;
            case 'Kind.Term.ori':
                var $6573 = self.expr;
                var $6574 = Kind$Term$inline$($6573, _defs$2);
                var $6527 = $6574;
                break;
            case 'Kind.Term.typ':
                var $6575 = Kind$Term$typ;
                var $6527 = $6575;
                break;
            case 'Kind.Term.cse':
                var $6576 = _term$1;
                var $6527 = $6576;
                break;
        };
        return $6527;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $6578 = self.val;
                var $6579 = self.lft;
                var $6580 = self.rgt;
                var self = $6578;
                switch (self._) {
                    case 'Maybe.some':
                        var $6582 = self.value;
                        var $6583 = List$cons$($6582, _list$3);
                        var _list0$7 = $6583;
                        break;
                    case 'Maybe.none':
                        var $6584 = _list$3;
                        var _list0$7 = $6584;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($6579, _list0$7);
                var _list2$9 = BitsMap$values$go$($6580, _list1$8);
                var $6581 = _list2$9;
                var $6577 = $6581;
                break;
            case 'BitsMap.new':
                var $6585 = _list$3;
                var $6577 = $6585;
                break;
        };
        return $6577;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $6586 = BitsMap$values$go$(_xs$2, List$nil);
        return $6586;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $6588 = _name$2;
                        var $6587 = $6588;
                    } else {
                        var $6589 = (self - 1n);
                        var $6590 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $6587 = $6590;
                    };
                    return $6587;
                } else {
                    var $6591 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $6593 = self.head;
                            var $6594 = self.tail;
                            var self = (_name$2 === $6593);
                            if (self) {
                                var $6596 = Nat$succ$(_brui$3);
                                var _brui$8 = $6596;
                            } else {
                                var $6597 = _brui$3;
                                var _brui$8 = $6597;
                            };
                            var $6595 = Kind$Core$var_name$($6591, _name$2, _brui$8, $6594);
                            var $6592 = $6595;
                            break;
                        case 'List.nil':
                            var $6598 = "unbound";
                            var $6592 = $6598;
                            break;
                    };
                    return $6592;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $6599 = _name$1;
        return $6599;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $6601 = self.slice(0, -1);
                var $6602 = (2n * Bits$to_nat$($6601));
                var $6600 = $6602;
                break;
            case 'i':
                var $6603 = self.slice(0, -1);
                var $6604 = Nat$succ$((2n * Bits$to_nat$($6603)));
                var $6600 = $6604;
                break;
            case 'e':
                var $6605 = 0n;
                var $6600 = $6605;
                break;
        };
        return $6600;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $6607 = u16_to_word(self);
                var $6608 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($6607)));
                var $6606 = $6608;
                break;
        };
        return $6606;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $6610 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $6609 = $6610;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $6612 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $6611 = $6612;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $6614 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $6613 = $6614;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $6616 = String$cons$(_chr$1, String$nil);
                        var $6615 = $6616;
                    } else {
                        var $6617 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $6615 = $6617;
                    };
                    var $6613 = $6615;
                };
                var $6611 = $6613;
            };
            var $6609 = $6611;
        };
        return $6609;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $6618 = String$reverse$(_result$2);
                    return $6618;
                } else {
                    var $6619 = self.charCodeAt(0);
                    var $6620 = self.slice(1);
                    var $6621 = Kind$Code$escape$go$($6620, (String$reverse$(Kind$Code$escape$char$($6619)) + _result$2));
                    return $6621;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $6622 = Kind$Code$escape$go$(_str$1, "");
        return $6622;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6624 = self.name;
                var $6625 = self.indx;
                var $6626 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $6625 <= 0n ? 0n : _indx$2 - $6625)), $6624, 0n, _vars$3);
                var $6623 = $6626;
                break;
            case 'Kind.Term.ref':
                var $6627 = self.name;
                var $6628 = Kind$Name$show$($6627);
                var $6623 = $6628;
                break;
            case 'Kind.Term.all':
                var $6629 = self.eras;
                var $6630 = self.self;
                var $6631 = self.name;
                var $6632 = self.xtyp;
                var $6633 = self.body;
                var _eras$9 = $6629;
                var self = _eras$9;
                if (self) {
                    var $6635 = "%";
                    var _init$10 = $6635;
                } else {
                    var $6636 = "@";
                    var _init$10 = $6636;
                };
                var _self$11 = Kind$Name$show$($6630);
                var _name$12 = Kind$Name$show$($6631);
                var _xtyp$13 = Kind$Core$show$($6632, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$($6633(Kind$Term$var$($6630, _indx$2))(Kind$Term$var$($6631, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($6631, List$cons$($6630, _vars$3)));
                var $6634 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $6623 = $6634;
                break;
            case 'Kind.Term.lam':
                var $6637 = self.name;
                var $6638 = self.body;
                var _name$6 = Kind$Name$show$($6637);
                var _body$7 = Kind$Core$show$($6638(Kind$Term$var$($6637, _indx$2)), Nat$succ$(_indx$2), List$cons$($6637, _vars$3));
                var $6639 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $6623 = $6639;
                break;
            case 'Kind.Term.app':
                var $6640 = self.func;
                var $6641 = self.argm;
                var _func$6 = Kind$Core$show$($6640, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$($6641, _indx$2, _vars$3);
                var $6642 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $6623 = $6642;
                break;
            case 'Kind.Term.let':
                var $6643 = self.name;
                var $6644 = self.expr;
                var $6645 = self.body;
                var _name$7 = Kind$Name$show$($6643);
                var _expr$8 = Kind$Core$show$($6644, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$($6645(Kind$Term$var$($6643, _indx$2)), Nat$succ$(_indx$2), List$cons$($6643, _vars$3));
                var $6646 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $6623 = $6646;
                break;
            case 'Kind.Term.def':
                var $6647 = self.name;
                var $6648 = self.expr;
                var $6649 = self.body;
                var _name$7 = Kind$Name$show$($6647);
                var _expr$8 = Kind$Core$show$($6648, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$($6649(Kind$Term$var$($6647, _indx$2)), Nat$succ$(_indx$2), List$cons$($6647, _vars$3));
                var $6650 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $6623 = $6650;
                break;
            case 'Kind.Term.ann':
                var $6651 = self.term;
                var $6652 = self.type;
                var _term$7 = Kind$Core$show$($6651, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$($6652, _indx$2, _vars$3);
                var $6653 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $6623 = $6653;
                break;
            case 'Kind.Term.nat':
                var $6654 = self.natx;
                var $6655 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($6654), List$nil)));
                var $6623 = $6655;
                break;
            case 'Kind.Term.chr':
                var $6656 = self.chrx;
                var $6657 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($6656), List$cons$("\'", List$nil))));
                var $6623 = $6657;
                break;
            case 'Kind.Term.str':
                var $6658 = self.strx;
                var $6659 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($6658), List$cons$("\"", List$nil))));
                var $6623 = $6659;
                break;
            case 'Kind.Term.ori':
                var $6660 = self.expr;
                var $6661 = Kind$Core$show$($6660, _indx$2, _vars$3);
                var $6623 = $6661;
                break;
            case 'Kind.Term.typ':
                var $6662 = "*";
                var $6623 = $6662;
                break;
            case 'Kind.Term.gol':
                var $6663 = "<GOL>";
                var $6623 = $6663;
                break;
            case 'Kind.Term.hol':
                var $6664 = "<HOL>";
                var $6623 = $6664;
                break;
            case 'Kind.Term.cse':
                var $6665 = "<CSE>";
                var $6623 = $6665;
                break;
        };
        return $6623;
    };
    const Kind$Core$show = x0 => x1 => x2 => Kind$Core$show$(x0, x1, x2);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $6668 = _result$2;
            var $6669 = BitsMap$values$(_defs$1);
            let _result$4 = $6668;
            let _defn$3;
            while ($6669._ === 'List.cons') {
                _defn$3 = $6669.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $6670 = self.name;
                        var $6671 = self.term;
                        var $6672 = self.type;
                        var $6673 = self.stat;
                        var self = $6673;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $6675 = _result$4;
                                var $6674 = $6675;
                                break;
                            case 'Kind.Status.done':
                                var _name$14 = $6670;
                                var _term$15 = Kind$Core$show$($6671, 0n, List$nil);
                                var _type$16 = Kind$Core$show$($6672, 0n, List$nil);
                                var $6676 = String$flatten$(List$cons$(_result$4, List$cons$(_name$14, List$cons$(" : ", List$cons$(_type$16, List$cons$(" = ", List$cons$(_term$15, List$cons$(";\u{a}", List$nil))))))));
                                var $6674 = $6676;
                                break;
                        };
                        var $6668 = $6674;
                        break;
                };
                _result$4 = $6668;
                $6669 = $6669.tail;
            }
            return _result$4;
        })();
        var $6666 = _result$3;
        return $6666;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $6677 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $6678 = _m$bind$2;
            return $6678;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $6680 = self.value;
                    var $6681 = $6680;
                    var _defs$3 = $6681;
                    break;
                case 'Maybe.none':
                    var $6682 = Kind$Map$new;
                    var _defs$3 = $6682;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $6684 = self.file;
                        var $6685 = self.code;
                        var $6686 = self.orig;
                        var $6687 = self.name;
                        var $6688 = self.term;
                        var $6689 = self.type;
                        var $6690 = self.isct;
                        var $6691 = self.arit;
                        var $6692 = self.stat;
                        var _term$14 = Kind$Term$inline$($6688, _defs$3);
                        var _type$15 = Kind$Term$inline$($6689, _defs$3);
                        var $6693 = Kind$Def$new$($6684, $6685, $6686, $6687, _term$14, _type$15, $6690, $6691, $6692);
                        var $6683 = $6693;
                        break;
                };
                return $6683;
            }), _defs$3);
            var $6679 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $6694 = _m$pure$6;
                return $6694;
            }))(Kind$Defs$core$(_defs$4));
            return $6679;
        }));
        return $6677;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $6696 = self.val;
                var $6697 = self.lft;
                var $6698 = self.rgt;
                var self = $6696;
                switch (self._) {
                    case 'Maybe.none':
                        var $6700 = _list$4;
                        var _list0$8 = $6700;
                        break;
                    case 'Maybe.some':
                        var $6701 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $6701;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($6697, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($6698, (_key$3 + '1'), _list1$9);
                var $6699 = _list2$10;
                var $6695 = $6699;
                break;
            case 'BitsMap.new':
                var $6702 = _list$4;
                var $6695 = $6702;
                break;
        };
        return $6695;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $6703 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $6703;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $6705 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $6707 = List$cons$(_head$6, _tail$7);
                    var $6706 = $6707;
                } else {
                    var $6708 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $6709 = Bits$chunks_of$go$(_len$1, $6705, $6708, _chunk$7);
                    var $6706 = $6709;
                };
                var $6704 = $6706;
                break;
            case 'i':
                var $6710 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $6712 = List$cons$(_head$6, _tail$7);
                    var $6711 = $6712;
                } else {
                    var $6713 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $6714 = Bits$chunks_of$go$(_len$1, $6710, $6713, _chunk$7);
                    var $6711 = $6714;
                };
                var $6704 = $6711;
                break;
            case 'e':
                var $6715 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $6704 = $6715;
                break;
        };
        return $6704;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $6716 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $6716;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $6718 = Word$e;
            var $6717 = $6718;
        } else {
            var $6719 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $6721 = self.slice(0, -1);
                    var $6722 = Word$o$(Word$from_bits$($6719, $6721));
                    var $6720 = $6722;
                    break;
                case 'i':
                    var $6723 = self.slice(0, -1);
                    var $6724 = Word$i$(Word$from_bits$($6719, $6723));
                    var $6720 = $6724;
                    break;
                case 'e':
                    var $6725 = Word$o$(Word$from_bits$($6719, Bits$e));
                    var $6720 = $6725;
                    break;
            };
            var $6717 = $6720;
        };
        return $6717;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Kind$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $6728 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $6728;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $6730 = ((_u16$5 + 71) & 0xFFFF);
                    var $6729 = $6730;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $6732 = (Math.max(_u16$5 - 4, 0));
                        var $6731 = $6732;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $6734 = 46;
                            var $6733 = $6734;
                        } else {
                            var $6735 = 95;
                            var $6733 = $6735;
                        };
                        var $6731 = $6733;
                    };
                    var $6729 = $6731;
                };
                var _chr$6 = $6729;
            };
            var $6727 = String$cons$(_chr$6, _name$4);
            return $6727;
        }));
        var $6726 = _name$3;
        return $6726;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $6737 = self.head;
                var $6738 = self.tail;
                var $6739 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $6740 = _m$bind$5;
                    return $6740;
                }))(Kind$Synth$one$($6737, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $6742 = self.value;
                            var $6743 = Kind$Synth$many$($6738, $6742);
                            var $6741 = $6743;
                            break;
                        case 'Maybe.none':
                            var $6744 = Kind$Synth$many$($6738, _defs$2);
                            var $6741 = $6744;
                            break;
                    };
                    return $6741;
                }));
                var $6736 = $6739;
                break;
            case 'List.nil':
                var $6745 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $6746 = _m$pure$4;
                    return $6746;
                }))(_defs$2);
                var $6736 = $6745;
                break;
        };
        return $6736;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $6747 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $6748 = _m$bind$3;
            return $6748;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $6750 = self.value;
                    var $6751 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $6752 = _m$pure$7;
                        return $6752;
                    }))(Either$left$($6750));
                    var $6749 = $6751;
                    break;
                case 'Either.right':
                    var $6753 = self.value;
                    var _file_defs$6 = $6753;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $6754 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $6755 = _m$bind$9;
                        return $6755;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $6756 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $6757 = _m$pure$11;
                            return $6757;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $6756;
                    }));
                    var $6749 = $6754;
                    break;
            };
            return $6749;
        }));
        return $6747;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $6758 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $6759 = IO$end$(Unit$new);
            return $6759;
        }));
        return $6758;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $6760 = IO$put_string$((_text$1 + "\u{a}"));
        return $6760;
    };
    const IO$print = x0 => IO$print$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $6762 = self.value;
                var $6763 = _f$4($6762);
                var $6761 = $6763;
                break;
            case 'Maybe.none':
                var $6764 = Maybe$none;
                var $6761 = $6764;
                break;
        };
        return $6761;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $6765 = _new$2(Maybe$bind)(Maybe$some);
        return $6765;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $6767 = self.name;
                var self = ($6767 === "Nat.zero");
                if (self) {
                    var $6769 = Maybe$some$(0n);
                    var $6768 = $6769;
                } else {
                    var $6770 = Maybe$none;
                    var $6768 = $6770;
                };
                var $6766 = $6768;
                break;
            case 'Kind.Term.app':
                var $6771 = self.func;
                var $6772 = self.argm;
                var self = $6771;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $6774 = self.name;
                        var self = ($6774 === "Nat.succ");
                        if (self) {
                            var $6776 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $6777 = _m$bind$5;
                                return $6777;
                            }))(Kind$Term$show$as_nat$go$($6772))((_pred$5 => {
                                var $6778 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $6779 = _m$pure$7;
                                    return $6779;
                                }))(Nat$succ$(_pred$5));
                                return $6778;
                            }));
                            var $6775 = $6776;
                        } else {
                            var $6780 = Maybe$none;
                            var $6775 = $6780;
                        };
                        var $6773 = $6775;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6781 = Maybe$none;
                        var $6773 = $6781;
                        break;
                };
                var $6766 = $6773;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6782 = Maybe$none;
                var $6766 = $6782;
                break;
        };
        return $6766;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $6783 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $6783;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $6785 = self.name;
                var $6786 = (_name$2 === $6785);
                var $6784 = $6786;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6787 = Bool$false;
                var $6784 = $6787;
                break;
        };
        return $6784;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $6789 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $6788 = $6789;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $6791 = Bool$false;
                var _wrap$6 = $6791;
            } else {
                var $6792 = self.charCodeAt(0);
                var $6793 = self.slice(1);
                var $6794 = ($6792 === 40);
                var _wrap$6 = $6794;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $6795 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $6795;
            } else {
                var $6796 = _func$5;
                var _func$8 = $6796;
            };
            var $6790 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $6788 = $6790;
        };
        return $6788;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6797 = self.func;
                        var $6798 = self.argm;
                        var $6799 = Kind$Term$show$app$($6797, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($6798, Kind$MPath$i$(_path$2)), _args$3));
                        return $6799;
                    case 'Kind.Term.ori':
                        var $6800 = self.expr;
                        var $6801 = Kind$Term$show$app$($6800, _path$2, _args$3);
                        return $6801;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6802 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $6802;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $6804 = self.val;
                var $6805 = self.lft;
                var $6806 = self.rgt;
                var self = $6804;
                switch (self._) {
                    case 'Maybe.some':
                        var $6808 = self.value;
                        var $6809 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $6808), _list$4);
                        var _list0$8 = $6809;
                        break;
                    case 'Maybe.none':
                        var $6810 = _list$4;
                        var _list0$8 = $6810;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($6805, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($6806, (_key$3 + '1'), _list1$9);
                var $6807 = _list2$10;
                var $6803 = $6807;
                break;
            case 'BitsMap.new':
                var $6811 = _list$4;
                var $6803 = $6811;
                break;
        };
        return $6803;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $6812 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $6812;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $6814 = self.value;
                var $6815 = $6814;
                var $6813 = $6815;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $6817 = self.name;
                        var $6818 = Kind$Name$show$($6817);
                        var $6816 = $6818;
                        break;
                    case 'Kind.Term.ref':
                        var $6819 = self.name;
                        var _name$4 = Kind$Name$show$($6819);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6821 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($6821));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $6822 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $6820 = $6822;
                                break;
                            case 'Maybe.none':
                                var $6823 = _name$4;
                                var $6820 = $6823;
                                break;
                        };
                        var $6816 = $6820;
                        break;
                    case 'Kind.Term.all':
                        var $6824 = self.eras;
                        var $6825 = self.self;
                        var $6826 = self.name;
                        var $6827 = self.xtyp;
                        var $6828 = self.body;
                        var _eras$8 = $6824;
                        var _self$9 = Kind$Name$show$($6825);
                        var _name$10 = Kind$Name$show$($6826);
                        var _type$11 = Kind$Term$show$go$($6827, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $6830 = "<";
                            var _open$12 = $6830;
                        } else {
                            var $6831 = "(";
                            var _open$12 = $6831;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $6832 = ">";
                            var _clos$13 = $6832;
                        } else {
                            var $6833 = ")";
                            var _clos$13 = $6833;
                        };
                        var _body$14 = Kind$Term$show$go$($6828(Kind$Term$var$($6825, 0n))(Kind$Term$var$($6826, 0n)), Kind$MPath$i$(_path$2));
                        var $6829 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $6816 = $6829;
                        break;
                    case 'Kind.Term.lam':
                        var $6834 = self.name;
                        var $6835 = self.body;
                        var _name$5 = Kind$Name$show$($6834);
                        var _body$6 = Kind$Term$show$go$($6835(Kind$Term$var$($6834, 0n)), Kind$MPath$o$(_path$2));
                        var $6836 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $6816 = $6836;
                        break;
                    case 'Kind.Term.let':
                        var $6837 = self.name;
                        var $6838 = self.expr;
                        var $6839 = self.body;
                        var _name$6 = Kind$Name$show$($6837);
                        var _expr$7 = Kind$Term$show$go$($6838, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($6839(Kind$Term$var$($6837, 0n)), Kind$MPath$i$(_path$2));
                        var $6840 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $6816 = $6840;
                        break;
                    case 'Kind.Term.def':
                        var $6841 = self.name;
                        var $6842 = self.expr;
                        var $6843 = self.body;
                        var _name$6 = Kind$Name$show$($6841);
                        var _expr$7 = Kind$Term$show$go$($6842, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($6843(Kind$Term$var$($6841, 0n)), Kind$MPath$i$(_path$2));
                        var $6844 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $6816 = $6844;
                        break;
                    case 'Kind.Term.ann':
                        var $6845 = self.term;
                        var $6846 = self.type;
                        var _term$6 = Kind$Term$show$go$($6845, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($6846, Kind$MPath$i$(_path$2));
                        var $6847 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $6816 = $6847;
                        break;
                    case 'Kind.Term.gol':
                        var $6848 = self.name;
                        var _name$6 = Kind$Name$show$($6848);
                        var $6849 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $6816 = $6849;
                        break;
                    case 'Kind.Term.nat':
                        var $6850 = self.natx;
                        var $6851 = String$flatten$(List$cons$(Nat$show$($6850), List$nil));
                        var $6816 = $6851;
                        break;
                    case 'Kind.Term.chr':
                        var $6852 = self.chrx;
                        var $6853 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($6852), List$cons$("\'", List$nil))));
                        var $6816 = $6853;
                        break;
                    case 'Kind.Term.str':
                        var $6854 = self.strx;
                        var $6855 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($6854), List$cons$("\"", List$nil))));
                        var $6816 = $6855;
                        break;
                    case 'Kind.Term.cse':
                        var $6856 = self.expr;
                        var $6857 = self.name;
                        var $6858 = self.with;
                        var $6859 = self.cses;
                        var $6860 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($6856, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($6857);
                        var _wyth$11 = String$join$("; ", List$mapped$($6858, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $6863 = self.name;
                                    var $6864 = self.type;
                                    var self = $6864;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $6866 = self.value;
                                            var $6867 = ($6863 + (": " + Kind$Term$show$go$($6866, Maybe$none)));
                                            var $6865 = $6867;
                                            break;
                                        case 'Maybe.none':
                                            var $6868 = $6863;
                                            var $6865 = $6868;
                                            break;
                                    };
                                    var $6862 = $6865;
                                    break;
                            };
                            return $6862;
                        })));
                        var _cses$12 = BitsMap$to_list$($6859);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $6869 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $6869;
                        })));
                        var self = $6860;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6870 = self.value;
                                var $6871 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($6870, Maybe$none), List$nil)));
                                var _moti$14 = $6871;
                                break;
                            case 'Maybe.none':
                                var $6872 = "";
                                var _moti$14 = $6872;
                                break;
                        };
                        var $6861 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $6816 = $6861;
                        break;
                    case 'Kind.Term.ori':
                        var $6873 = self.expr;
                        var $6874 = Kind$Term$show$go$($6873, _path$2);
                        var $6816 = $6874;
                        break;
                    case 'Kind.Term.typ':
                        var $6875 = "Type";
                        var $6816 = $6875;
                        break;
                    case 'Kind.Term.app':
                        var $6876 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $6816 = $6876;
                        break;
                    case 'Kind.Term.hol':
                        var $6877 = "_";
                        var $6816 = $6877;
                        break;
                };
                var $6813 = $6816;
                break;
        };
        return $6813;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $6878 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $6878;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $6881 = _types$3;
            var $6882 = _names$2;
            let _types$5 = $6881;
            let _name$4;
            while ($6882._ === 'List.cons') {
                _name$4 = $6882.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $6883 = self.value;
                        var self = $6883;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $6885 = self.type;
                                var $6886 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($6885) + "\u{a}"))));
                                var $6884 = $6886;
                                break;
                        };
                        var $6881 = $6884;
                        break;
                    case 'Maybe.none':
                        var $6887 = _types$5;
                        var $6881 = $6887;
                        break;
                };
                _types$5 = $6881;
                $6882 = $6882.tail;
            }
            return _types$5;
        })();
        var $6879 = _types$4;
        return $6879;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function Kind$Error$relevant$(_errors$1, _got$2) {
        var self = _errors$1;
        switch (self._) {
            case 'List.cons':
                var $6889 = self.head;
                var $6890 = self.tail;
                var self = $6889;
                switch (self._) {
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.undefined_reference':
                    case 'Kind.Error.cant_infer':
                        var $6892 = (!_got$2);
                        var _keep$5 = $6892;
                        break;
                    case 'Kind.Error.show_goal':
                        var $6893 = Bool$true;
                        var _keep$5 = $6893;
                        break;
                    case 'Kind.Error.waiting':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.patch':
                        var $6894 = Bool$false;
                        var _keep$5 = $6894;
                        break;
                };
                var self = $6889;
                switch (self._) {
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.undefined_reference':
                        var $6895 = Bool$true;
                        var _got$6 = $6895;
                        break;
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.waiting':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.patch':
                    case 'Kind.Error.cant_infer':
                        var $6896 = _got$2;
                        var _got$6 = $6896;
                        break;
                };
                var _tail$7 = Kind$Error$relevant$($6890, _got$6);
                var self = _keep$5;
                if (self) {
                    var $6897 = List$cons$($6889, _tail$7);
                    var $6891 = $6897;
                } else {
                    var $6898 = _tail$7;
                    var $6891 = $6898;
                };
                var $6888 = $6891;
                break;
            case 'List.nil':
                var $6899 = List$nil;
                var $6888 = $6899;
                break;
        };
        return $6888;
    };
    const Kind$Error$relevant = x0 => x1 => Kind$Error$relevant$(x0, x1);

    function Map$(_V$1) {
        var $6900 = null;
        return $6900;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $6902 = Bits$e;
            var $6901 = $6902;
        } else {
            var $6903 = self.charCodeAt(0);
            var $6904 = self.slice(1);
            var $6905 = (String$to_bits$($6904) + (u16_to_bits($6903)));
            var $6901 = $6905;
        };
        return $6901;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6907 = self.head;
                var $6908 = self.tail;
                var self = $6907;
                switch (self._) {
                    case 'Pair.new':
                        var $6910 = self.fst;
                        var $6911 = self.snd;
                        var $6912 = BitsMap$set$(String$to_bits$($6910), $6911, Map$from_list$($6908));
                        var $6909 = $6912;
                        break;
                };
                var $6906 = $6909;
                break;
            case 'List.nil':
                var $6913 = BitsMap$new;
                var $6906 = $6913;
                break;
        };
        return $6906;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $6915 = self.head;
                var $6916 = self.tail;
                var self = $6915;
                switch (self._) {
                    case 'Pair.new':
                        var $6918 = self.fst;
                        var $6919 = self.snd;
                        var _name$6 = Kind$Name$show$($6918);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($6919, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($6916);
                        var $6920 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $6917 = $6920;
                        break;
                };
                var $6914 = $6917;
                break;
            case 'List.nil':
                var $6921 = "";
                var $6914 = $6921;
                break;
        };
        return $6914;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $6922 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $6924 = self.name;
                    var self = Kind$Map$get$($6924, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $6926 = self.value;
                            var self = $6926;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $6928 = self.term;
                                    var $6929 = $6928;
                                    var $6927 = $6929;
                                    break;
                            };
                            var $6925 = $6927;
                            break;
                        case 'Maybe.none':
                            var $6930 = Kind$Term$ref$($6924);
                            var $6925 = $6930;
                            break;
                    };
                    var $6923 = $6925;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $6931 = _term$4;
                    var $6923 = $6931;
                    break;
            };
            return $6923;
        }));
        return $6922;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6933 = self.name;
                var $6934 = self.indx;
                var $6935 = Kind$Term$var$($6933, $6934);
                var $6932 = $6935;
                break;
            case 'Kind.Term.ref':
                var $6936 = self.name;
                var self = Kind$Map$get$($6936, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $6938 = self.value;
                        var self = $6938;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $6940 = self.term;
                                var $6941 = self.isct;
                                var $6942 = self.arit;
                                var self = ($6941 && (_arity$3 > $6942));
                                if (self) {
                                    var $6944 = $6940;
                                    var $6943 = $6944;
                                } else {
                                    var $6945 = Kind$Term$ref$($6936);
                                    var $6943 = $6945;
                                };
                                var $6939 = $6943;
                                break;
                        };
                        var $6937 = $6939;
                        break;
                    case 'Maybe.none':
                        var $6946 = Kind$Term$ref$($6936);
                        var $6937 = $6946;
                        break;
                };
                var $6932 = $6937;
                break;
            case 'Kind.Term.all':
                var $6947 = self.eras;
                var $6948 = self.self;
                var $6949 = self.name;
                var $6950 = self.xtyp;
                var $6951 = self.body;
                var $6952 = Kind$Term$all$($6947, $6948, $6949, Kind$Term$expand_ct$($6950, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $6953 = Kind$Term$expand_ct$($6951(_s$9)(_x$10), _defs$2, 0n);
                    return $6953;
                }));
                var $6932 = $6952;
                break;
            case 'Kind.Term.lam':
                var $6954 = self.name;
                var $6955 = self.body;
                var $6956 = Kind$Term$lam$($6954, (_x$6 => {
                    var $6957 = Kind$Term$expand_ct$($6955(_x$6), _defs$2, 0n);
                    return $6957;
                }));
                var $6932 = $6956;
                break;
            case 'Kind.Term.app':
                var $6958 = self.func;
                var $6959 = self.argm;
                var $6960 = Kind$Term$app$(Kind$Term$expand_ct$($6958, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($6959, _defs$2, 0n));
                var $6932 = $6960;
                break;
            case 'Kind.Term.let':
                var $6961 = self.name;
                var $6962 = self.expr;
                var $6963 = self.body;
                var $6964 = Kind$Term$let$($6961, Kind$Term$expand_ct$($6962, _defs$2, 0n), (_x$7 => {
                    var $6965 = Kind$Term$expand_ct$($6963(_x$7), _defs$2, 0n);
                    return $6965;
                }));
                var $6932 = $6964;
                break;
            case 'Kind.Term.def':
                var $6966 = self.name;
                var $6967 = self.expr;
                var $6968 = self.body;
                var $6969 = Kind$Term$def$($6966, Kind$Term$expand_ct$($6967, _defs$2, 0n), (_x$7 => {
                    var $6970 = Kind$Term$expand_ct$($6968(_x$7), _defs$2, 0n);
                    return $6970;
                }));
                var $6932 = $6969;
                break;
            case 'Kind.Term.ann':
                var $6971 = self.done;
                var $6972 = self.term;
                var $6973 = self.type;
                var $6974 = Kind$Term$ann$($6971, Kind$Term$expand_ct$($6972, _defs$2, 0n), Kind$Term$expand_ct$($6973, _defs$2, 0n));
                var $6932 = $6974;
                break;
            case 'Kind.Term.gol':
                var $6975 = self.name;
                var $6976 = self.dref;
                var $6977 = self.verb;
                var $6978 = Kind$Term$gol$($6975, $6976, $6977);
                var $6932 = $6978;
                break;
            case 'Kind.Term.hol':
                var $6979 = self.path;
                var $6980 = Kind$Term$hol$($6979);
                var $6932 = $6980;
                break;
            case 'Kind.Term.nat':
                var $6981 = self.natx;
                var $6982 = Kind$Term$nat$($6981);
                var $6932 = $6982;
                break;
            case 'Kind.Term.chr':
                var $6983 = self.chrx;
                var $6984 = Kind$Term$chr$($6983);
                var $6932 = $6984;
                break;
            case 'Kind.Term.str':
                var $6985 = self.strx;
                var $6986 = Kind$Term$str$($6985);
                var $6932 = $6986;
                break;
            case 'Kind.Term.ori':
                var $6987 = self.orig;
                var $6988 = self.expr;
                var $6989 = Kind$Term$ori$($6987, $6988);
                var $6932 = $6989;
                break;
            case 'Kind.Term.typ':
                var $6990 = Kind$Term$typ;
                var $6932 = $6990;
                break;
            case 'Kind.Term.cse':
                var $6991 = _term$1;
                var $6932 = $6991;
                break;
        };
        return $6932;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $6994 = _term$4;
            var $6995 = _dref$1;
            let _term$6 = $6994;
            let _path$5;
            while ($6995._ === 'List.cons') {
                _path$5 = $6995.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $6994 = _term$10;
                _term$6 = $6994;
                $6995 = $6995.tail;
            }
            return _term$6;
        })();
        var $6992 = _term$5;
        return $6992;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $6997 = self.expected;
                var $6998 = self.detected;
                var $6999 = self.context;
                var self = $6997;
                switch (self._) {
                    case 'Either.left':
                        var $7001 = self.value;
                        var $7002 = $7001;
                        var _expected$7 = $7002;
                        break;
                    case 'Either.right':
                        var $7003 = self.value;
                        var $7004 = Kind$Term$show$(Kind$Term$normalize$($7003, Map$from_list$(List$nil)));
                        var _expected$7 = $7004;
                        break;
                };
                var self = $6998;
                switch (self._) {
                    case 'Either.left':
                        var $7005 = self.value;
                        var $7006 = $7005;
                        var _detected$8 = $7006;
                        break;
                    case 'Either.right':
                        var $7007 = self.value;
                        var $7008 = Kind$Term$show$(Kind$Term$normalize$($7007, Map$from_list$(List$nil)));
                        var _detected$8 = $7008;
                        break;
                };
                var $7000 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $6999;
                    switch (self._) {
                        case 'List.nil':
                            var $7009 = "";
                            return $7009;
                        case 'List.cons':
                            var $7010 = ("With context:\u{a}" + Kind$Context$show$($6999));
                            return $7010;
                    };
                })())))))));
                var $6996 = $7000;
                break;
            case 'Kind.Error.show_goal':
                var $7011 = self.name;
                var $7012 = self.dref;
                var $7013 = self.verb;
                var $7014 = self.goal;
                var $7015 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($7011) + ":\u{a}"));
                var self = $7014;
                switch (self._) {
                    case 'Maybe.some':
                        var $7017 = self.value;
                        var _goal$10 = Kind$Term$expand$($7012, $7017, _defs$2);
                        var $7018 = ("With type: " + ((() => {
                            var self = $7013;
                            if (self) {
                                var $7019 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $7020 = _x$11;
                                    return $7020;
                                })));
                                return $7019;
                            } else {
                                var $7021 = Kind$Term$show$(_goal$10);
                                return $7021;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $7018;
                        break;
                    case 'Maybe.none':
                        var $7022 = "";
                        var _with_type$9 = $7022;
                        break;
                };
                var self = $7015;
                switch (self._) {
                    case 'List.nil':
                        var $7023 = "";
                        var _with_ctxt$10 = $7023;
                        break;
                    case 'List.cons':
                        var $7024 = ("With ctxt:\u{a}" + Kind$Context$show$($7015));
                        var _with_ctxt$10 = $7024;
                        break;
                };
                var $7016 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $6996 = $7016;
                break;
            case 'Kind.Error.waiting':
                var $7025 = self.name;
                var $7026 = ("Waiting for \'" + ($7025 + "\'."));
                var $6996 = $7026;
                break;
            case 'Kind.Error.indirect':
                var $7027 = self.name;
                var $7028 = ("Error on dependency \'" + ($7027 + "\'."));
                var $6996 = $7028;
                break;
            case 'Kind.Error.patch':
                var $7029 = self.term;
                var $7030 = ("Patching: " + Kind$Term$show$($7029));
                var $6996 = $7030;
                break;
            case 'Kind.Error.undefined_reference':
                var $7031 = self.name;
                var $7032 = ("Undefined reference: " + (Kind$Name$show$($7031) + "\u{a}"));
                var $6996 = $7032;
                break;
            case 'Kind.Error.cant_infer':
                var $7033 = self.term;
                var $7034 = self.context;
                var _term$6 = Kind$Term$show$($7033);
                var _context$7 = Kind$Context$show$($7034);
                var $7035 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With ctxt:\u{a}" + _context$7))));
                var $6996 = $7035;
                break;
        };
        return $6996;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7037 = self.origin;
                var $7038 = $7037;
                var $7036 = $7038;
                break;
            case 'Kind.Error.undefined_reference':
                var $7039 = self.origin;
                var $7040 = $7039;
                var $7036 = $7040;
                break;
            case 'Kind.Error.cant_infer':
                var $7041 = self.origin;
                var $7042 = $7041;
                var $7036 = $7042;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $7043 = Maybe$none;
                var $7036 = $7043;
                break;
        };
        return $7036;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $7046 = _errors$2;
            var $7047 = BitsMap$keys$(_defs$1);
            let _errors$4 = $7046;
            let _key$3;
            while ($7047._ === 'List.cons') {
                _key$3 = $7047.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $7048 = self.value;
                        var self = $7048;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7050 = self.file;
                                var $7051 = self.code;
                                var $7052 = self.name;
                                var $7053 = self.stat;
                                var self = $7053;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $7055 = self.errors;
                                        var self = $7055;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $7057 = _errors$4;
                                                var $7056 = $7057;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $7052;
                                                var _rel_errs$21 = Kind$Error$relevant$($7055, Bool$false);
                                                var _errors$22 = (() => {
                                                    var $7060 = _errors$4;
                                                    var $7061 = _rel_errs$21;
                                                    let _errors$23 = $7060;
                                                    let _err$22;
                                                    while ($7061._ === 'List.cons') {
                                                        _err$22 = $7061.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $7062 = self.value;
                                                                var self = $7062;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $7064 = self.fst;
                                                                        var $7065 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($7050 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($7051, $7064, $7065);
                                                                        var $7066 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $7063 = $7066;
                                                                        break;
                                                                };
                                                                var $7060 = $7063;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $7067 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $7060 = $7067;
                                                                break;
                                                        };
                                                        _errors$23 = $7060;
                                                        $7061 = $7061.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $7058 = _errors$22;
                                                var $7056 = $7058;
                                                break;
                                        };
                                        var $7054 = $7056;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7068 = _errors$4;
                                        var $7054 = $7068;
                                        break;
                                };
                                var $7049 = $7054;
                                break;
                        };
                        var $7046 = $7049;
                        break;
                    case 'Maybe.none':
                        var $7069 = _errors$4;
                        var $7046 = $7069;
                        break;
                };
                _errors$4 = $7046;
                $7047 = $7047.tail;
            }
            return _errors$4;
        })();
        var $7044 = _errors$3;
        return $7044;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $7071 = "All terms check.";
            var _errors$5 = $7071;
        } else {
            var $7072 = self.charCodeAt(0);
            var $7073 = self.slice(1);
            var $7074 = _errors$4;
            var _errors$5 = $7074;
        };
        var $7070 = (_types$3 + ("\u{a}" + _errors$5));
        return $7070;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function Kind$api$io$check_file$(_file$1) {
        var $7075 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7076 = _m$bind$2;
            return $7076;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $7078 = self.value;
                    var $7079 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7080 = _m$bind$4;
                        return $7080;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $7081 = IO$print$($7078);
                        return $7081;
                    }));
                    var $7077 = $7079;
                    break;
                case 'Either.right':
                    var $7082 = self.value;
                    var self = $7082;
                    switch (self._) {
                        case 'Pair.new':
                            var $7084 = self.fst;
                            var $7085 = self.snd;
                            var _nams$6 = $7084;
                            var _defs$7 = $7085;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $7087 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $7086 = $7087;
                                    break;
                                case 'List.cons':
                                    var $7088 = IO$print$(Kind$Defs$report$(_defs$7, _nams$6));
                                    var $7086 = $7088;
                                    break;
                            };
                            var $7083 = $7086;
                            break;
                    };
                    var $7077 = $7083;
                    break;
            };
            return $7077;
        }));
        return $7075;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $7090 = self.head;
                var $7091 = self.tail;
                var $7092 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7093 = _m$bind$5;
                    return $7093;
                }))(Kind$Synth$file$($7090, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $7095 = self.value;
                            var _nams$7 = Pair$fst$($7095);
                            var _defs$8 = Pair$snd$($7095);
                            var $7096 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $7097 = _m$bind$9;
                                return $7097;
                            }))(Kind$Synth$files$go$($7091, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $7098 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $7099 = _m$pure$13;
                                    return $7099;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $7098;
                            }));
                            var $7094 = $7096;
                            break;
                        case 'Either.left':
                            var $7100 = Kind$Synth$files$go$($7091, _defs$2);
                            var $7094 = $7100;
                            break;
                    };
                    return $7094;
                }));
                var $7089 = $7092;
                break;
            case 'List.nil':
                var $7101 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7102 = _m$pure$4;
                    return $7102;
                }))(Pair$new$(List$nil, _defs$2));
                var $7089 = $7101;
                break;
        };
        return $7089;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $7104 = Kind$Map$set(_name$2)(Unit$new);
            return $7104;
        }));
        var $7103 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $7103;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $7105 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7106 = _m$bind$3;
            return $7106;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $7107 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $7108 = _m$pure$7;
                return $7108;
            }))(Pair$new$(_nams$4, _defs$5));
            return $7107;
        }));
        return $7105;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $7109 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7110 = _m$bind$2;
            return $7110;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $7112 = IO$print$("No valid Kind file found.");
                    var $7111 = $7112;
                    break;
                case 'List.cons':
                    var $7113 = IO$print$(Kind$Defs$report$(_defs$4, _nams$3));
                    var $7111 = $7113;
                    break;
            };
            return $7111;
        }));
        return $7109;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $7114 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7115 = _m$bind$2;
            return $7115;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7117 = self.value;
                    var $7118 = IO$print$(Kind$Defs$report$($7117, List$cons$(_name$1, List$nil)));
                    var $7116 = $7118;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $7120 = ("\'" + (_x$4 + "\'"));
                        return $7120;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $7119 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $7116 = $7119;
                    break;
            };
            return $7116;
        }));
        return $7114;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $7121 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7122 = _m$bind$2;
            return $7122;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $7123 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7124 = self.value;
                        var _defs$4 = $7124;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7126 = self.value;
                                var self = $7126;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $7128 = self.term;
                                        var _term$16 = $7128;
                                        var $7129 = Kind$Term$show$(_term$16);
                                        var $7127 = $7129;
                                        break;
                                };
                                var $7125 = $7127;
                                break;
                            case 'Maybe.none':
                                var $7130 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $7125 = $7130;
                                break;
                        };
                        return $7125;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $7132 = ("\'" + (_x$4 + "\'"));
                            return $7132;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $7131 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $7131;
                };
            })());
            return $7123;
        }));
        return $7121;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $7133 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7134 = _m$bind$2;
            return $7134;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $7135 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7136 = self.value;
                        var _defs$4 = $7136;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7138 = self.value;
                                var self = $7138;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $7140 = self.term;
                                        var _term$16 = $7140;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $7141 = Kind$Term$show$(_norm$17);
                                        var $7139 = $7141;
                                        break;
                                };
                                var $7137 = $7139;
                                break;
                            case 'Maybe.none':
                                var $7142 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $7137 = $7142;
                                break;
                        };
                        return $7137;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $7144 = ("\'" + (_x$4 + "\'"));
                            return $7144;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $7143 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $7143;
                };
            })());
            return $7135;
        }));
        return $7133;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $7145 = self.value;
                        var $7146 = $7145;
                        return $7146;
                    case 'IO.ask':
                        var $7147 = self.then;
                        var $7148 = IO$purify$($7147(""));
                        return $7148;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $7150 = self.value;
                var $7151 = $7150;
                var $7149 = $7151;
                break;
            case 'Either.right':
                var $7152 = self.value;
                var $7153 = IO$purify$((() => {
                    var _defs$3 = $7152;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $7154 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $7155 = _m$bind$5;
                        return $7155;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $7156 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $7157 = _m$pure$7;
                            return $7157;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $7156;
                    }));
                    return $7154;
                })());
                var $7149 = $7153;
                break;
        };
        return $7149;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $7159 = self.val;
                var $7160 = Maybe$some$($7159);
                var $7158 = $7160;
                break;
            case 'Parser.Reply.error':
                var $7161 = Maybe$none;
                var $7158 = $7161;
                break;
        };
        return $7158;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $7162 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $7163 = _m$pure$10;
            return $7163;
        }))(Unit$new);
        return $7162;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'U16.inc': U16$inc,
        'Word.zero': Word$zero,
        'U16.zero': U16$zero,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'Parser.many1': Parser$many1,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'List.fold': List$fold,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Term.all': Kind$Term$all,
        'Pair.new': Pair$new,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.ref': Kind$Term$ref,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'List.mapped': List$mapped,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Term.str': Kind$Term$str,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.nat': Kind$Term$nat,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'BitsMap.new': BitsMap$new,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Pair.snd': Pair$snd,
        'Kind.Map': Kind$Map,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'Pair.fst': Pair$fst,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'Kind.Parser.u8': Kind$Parser$u8,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.nat': Kind$Parser$nat,
        'String.eql': String$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Term.ann': Kind$Term$ann,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at': List$at,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Parser.eof': Parser$eof,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'Either': Either,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Bool.not': Bool$not,
        'Kind.Code.color': Kind$Code$color,
        'Nat.eql': Nat$eql,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'Char.eql': Char$eql,
        'String.starts_with': String$starts_with,
        'String.drop': String$drop,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.SmartMotive.vals.cont': Kind$SmartMotive$vals$cont,
        'Kind.SmartMotive.vals': Kind$SmartMotive$vals,
        'Kind.SmartMotive.nams.cont': Kind$SmartMotive$nams$cont,
        'Kind.SmartMotive.nams': Kind$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.name': Kind$Term$serialize$name,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.SmartMotive.replace': Kind$SmartMotive$replace,
        'Kind.SmartMotive.make': Kind$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Bool.or': Bool$or,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal': Kind$Term$equal,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show': Kind$Core$show,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();